/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// int __cdecl std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(_DWORD); weak
// int __cdecl std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int __cdecl std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(_DWORD, _DWORD, _DWORD); weak
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// int __cdecl std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(_DWORD, _DWORD, _DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl std::operator|(__int64 a1);
void std::allocator<long long>::allocator();
void std::allocator<long long>::~allocator();
int __cdecl std::vector<long long,std::allocator<long long>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<long long,std::allocator<long long>>::~vector(int a1);
int __cdecl std::vector<long long,std::allocator<long long>>::operator[](int a1, int a2);
char *__cdecl std::vector<long long,std::allocator<long long>>::vector(int a1, int a2);
int __cdecl std::min<long long>(int a1, int a2);
int __cdecl std::max<long long>(int a1, int a2);
void __gnu_cxx::new_allocator<long long>::new_allocator();
void __gnu_cxx::new_allocator<long long>::~new_allocator();
void std::_Vector_base<long long,std::allocator<long long>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<long long,std::allocator<long long>>::~_Vector_base(int a1);
int __cdecl std::vector<long long,std::allocator<long long>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<long long *,long long>();
int __cdecl std::vector<long long,std::allocator<long long>>::size(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<long long>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(int a1);
// int __userpurge std::vector<long long,std::allocator<long long>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<long long,std::allocator<long long>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *,long long>(int a1, int a2, int a3);
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<long long *,unsigned int,long long,long long>(int a1, int a2, int a3);
void std::_Destroy<long long *>();
int __cdecl __gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(int a1, int a2, int a3);
void std::allocator<long long>::allocator();
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<long long>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<long long *,unsigned int,long long>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<long long *>();
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<long long>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<long long>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<long long *,unsigned int,long long>(int a1, int a2, int a3);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<long long>::max_size();
int __cdecl std::fill_n<long long *,unsigned int,long long>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(char a1, char a2, int a3);
int __cdecl std::__niter_base<long long *>(int a1);
int __cdecl std::__fill_n_a<long long *,unsigned int,long long>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>(char a1);
char *__cdecl std::__copy_move_a<false,long long const*,long long *>(void *src, int a2, void *dest);
int __cdecl std::_Iter_base<long long *,false>::_S_base(int a1);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<long long>(void *src, int a2, void *dest);
int __cdecl __gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int _CTOR_LIST__ = 4294967295; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
char edata; // weak
_UNKNOWN unk_804B88B; // weak
int dtor_idx_3330; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (0804878C) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80487E0: using guessed type int __gmon_start__(void);

//----- (08048900) --------------------------------------------------------
#error "8048903: positive sp value has been found (funcsize=2)"

//----- (08048930) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804B88B - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804B88B - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048930: could not find valid save-restore pair for ebp
// 804B888: using guessed type char edata;

//----- (08048960) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048960: could not find valid save-restore pair for ebp

//----- (080489A0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804B738: using guessed type int _DTOR_LIST__[];
// 804B888: using guessed type char edata;
// 804B88C: using guessed type int dtor_idx_3330;

//----- (080489F0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80489F0: could not find valid save-restore pair for ebp

//----- (08048A20) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@1
  int v4; // eax@2
  int v5; // ebx@3
  int v6; // eax@3
  int v7; // eax@3
  int v8; // ebx@6
  int v9; // eax@6
  int v10; // eax@6
  int v11; // eax@11
  int v12; // ebx@11
  int v13; // esi@11
  int v14; // eax@11
  __int64 v15; // ST28_8@11
  int v16; // eax@12
  int v17; // eax@12
  int v18; // eax@16
  int v19; // edx@16
  int v20; // eax@17
  int v21; // ebx@17
  int v22; // esi@17
  int v23; // eax@17
  __int64 v24; // ST20_8@17
  int v25; // eax@18
  int v26; // eax@18
  int v27; // eax@22
  int v28; // edx@22
  int v29; // eax@23
  int v30; // ebx@23
  int v31; // esi@23
  int v32; // eax@23
  __int64 v33; // ST18_8@23
  int v34; // eax@24
  int v35; // eax@24
  int v36; // eax@27
  int v37; // edx@27
  int v38; // ebx@31
  int v39; // esi@31
  int v40; // edi@31
  int v41; // eax@31
  int v42; // eax@31
  int v43; // eax@31
  int v44; // eax@31
  int v46; // [sp+3Ch] [bp-320h]@1
  int v47; // [sp+150h] [bp-20Ch]@1
  __int64 v48; // [sp+268h] [bp-F4h]@22
  __int64 v49; // [sp+270h] [bp-ECh]@16
  __int64 v50; // [sp+278h] [bp-E4h]@10
  __int64 v51; // [sp+280h] [bp-DCh]@10
  int v52; // [sp+28Ch] [bp-D0h]@10
  int v53; // [sp+298h] [bp-C4h]@8
  int v54; // [sp+29Ch] [bp-C0h]@8
  int v55; // [sp+2A0h] [bp-BCh]@2
  int v56; // [sp+2ACh] [bp-B0h]@2
  int v57; // [sp+2B8h] [bp-A4h]@2
  int v58; // [sp+2C4h] [bp-98h]@2
  unsigned int v59; // [sp+2D0h] [bp-8Ch]@2
  unsigned int v60; // [sp+2D4h] [bp-88h]@2
  int v61; // [sp+2D8h] [bp-84h]@1
  int v62; // [sp+2E0h] [bp-7Ch]@2
  int v63; // [sp+2E4h] [bp-78h]@2
  int v64; // [sp+2F0h] [bp-6Ch]@2
  int v65; // [sp+2F4h] [bp-68h]@2
  int v66; // [sp+300h] [bp-5Ch]@2
  int v67; // [sp+304h] [bp-58h]@2
  char v68; // [sp+30Fh] [bp-4Dh]@31
  int v69; // [sp+310h] [bp-4Ch]@2
  int v70; // [sp+314h] [bp-48h]@2
  __int64 v71; // [sp+318h] [bp-44h]@24
  __int64 v72; // [sp+320h] [bp-3Ch]@18
  __int64 v73; // [sp+328h] [bp-34h]@12
  int jj; // [sp+330h] [bp-2Ch]@22
  int ii; // [sp+334h] [bp-28h]@16
  int n; // [sp+338h] [bp-24h]@10
  int m; // [sp+33Ch] [bp-20h]@9
  int l; // [sp+340h] [bp-1Ch]@8
  int k; // [sp+344h] [bp-18h]@5
  int j; // [sp+348h] [bp-14h]@2
  int i; // [sp+34Ch] [bp-10h]@1

  std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(&v47, "c.in", 8);
  v3 = std::operator|(137438953488LL);
  std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(&v46, "c.out", v3);
  std::istream::operator>>(&v47, &v61);
  for ( i = 0; i < v61; ++i )
  {
    v4 = std::istream::operator>>(&v47, &v59);
    std::istream::operator>>(v4, &v60);
    std::allocator<long long>::allocator();
    v62 = 0;
    v63 = 0;
    std::vector<long long,std::allocator<long long>>::vector((int)&v58, v60, (int)&v62);
    std::allocator<long long>::~allocator();
    std::allocator<long long>::allocator();
    v64 = 0;
    v65 = 0;
    std::vector<long long,std::allocator<long long>>::vector((int)&v57, v60, (int)&v64);
    std::allocator<long long>::~allocator();
    std::allocator<long long>::allocator();
    v66 = 0;
    v67 = 0;
    std::vector<long long,std::allocator<long long>>::vector((int)&v56, v59, (int)&v66);
    std::allocator<long long>::~allocator();
    std::allocator<long long>::allocator();
    v69 = 0;
    v70 = 0;
    std::vector<long long,std::allocator<long long>>::vector((int)&v55, v59, (int)&v69);
    std::allocator<long long>::~allocator();
    for ( j = 0; j < (signed int)v59; ++j )
    {
      v5 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v55, j);
      v6 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v56, j);
      v7 = std::istream::operator>>(&v47, v6);
      std::istream::operator>>(v7, v5);
    }
    for ( k = 0; k < (signed int)v60; ++k )
    {
      v8 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v57, k);
      v9 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v58, k);
      v10 = std::istream::operator>>(&v47, v9);
      std::istream::operator>>(v10, v8);
    }
    v53 = 0;
    v54 = 0;
    for ( l = 0; l < (signed int)v60; ++l )
    {
      for ( m = l; m < (signed int)v60; ++m )
      {
        std::vector<long long,std::allocator<long long>>::vector((int)&v52, (int)&v58);
        v51 = 0LL;
        v50 = *(_QWORD *)std::vector<long long,std::allocator<long long>>::operator[]((int)&v56, 0);
        for ( n = 0; n <= l; ++n )
        {
          v11 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v57, n);
          v12 = *(_DWORD *)v11;
          v13 = *(_DWORD *)(v11 + 4);
          v14 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v55, 0);
          LODWORD(v15) = *(_DWORD *)v14 ^ v12;
          HIDWORD(v15) = *(_DWORD *)(v14 + 4) ^ v13;
          if ( !v15 )
          {
            v16 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v52, n);
            v73 = *(_QWORD *)std::min<long long>((int)&v50, v16);
            v51 += v73;
            v50 -= v73;
            v17 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v52, n);
            *(_QWORD *)v17 -= v73;
          }
        }
        if ( (signed int)v59 > 1 )
        {
          v18 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v56, 1);
          v19 = *(_DWORD *)(v18 + 4);
          LODWORD(v49) = *(_DWORD *)v18;
          HIDWORD(v49) = v19;
          for ( ii = l; ii <= m; ++ii )
          {
            v20 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v57, ii);
            v21 = *(_DWORD *)v20;
            v22 = *(_DWORD *)(v20 + 4);
            v23 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v55, 1);
            LODWORD(v24) = *(_DWORD *)v23 ^ v21;
            HIDWORD(v24) = *(_DWORD *)(v23 + 4) ^ v22;
            if ( !v24 )
            {
              v25 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v52, ii);
              v72 = *(_QWORD *)std::min<long long>((int)&v49, v25);
              v51 += v72;
              v49 -= v72;
              v26 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v52, ii);
              *(_QWORD *)v26 -= v72;
            }
          }
        }
        if ( (signed int)v59 > 2 )
        {
          v27 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v56, 2);
          v28 = *(_DWORD *)(v27 + 4);
          LODWORD(v48) = *(_DWORD *)v27;
          HIDWORD(v48) = v28;
          for ( jj = m; jj < (signed int)v60; ++jj )
          {
            v29 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v57, jj);
            v30 = *(_DWORD *)v29;
            v31 = *(_DWORD *)(v29 + 4);
            v32 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v55, 2);
            LODWORD(v33) = *(_DWORD *)v32 ^ v30;
            HIDWORD(v33) = *(_DWORD *)(v32 + 4) ^ v31;
            if ( !v33 )
            {
              v34 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v52, jj);
              v71 = *(_QWORD *)std::min<long long>((int)&v48, v34);
              v51 += v71;
              v48 -= v71;
              v35 = std::vector<long long,std::allocator<long long>>::operator[]((int)&v52, jj);
              *(_QWORD *)v35 -= v71;
            }
          }
        }
        v36 = std::max<long long>((int)&v53, (int)&v51);
        v37 = *(_DWORD *)(v36 + 4);
        v53 = *(_DWORD *)v36;
        v54 = v37;
        std::vector<long long,std::allocator<long long>>::~vector((int)&v52);
      }
    }
    v38 = v53;
    v39 = v54;
    v40 = i + 1;
    v41 = std::operator<<<std::char_traits<char>>(&v46, "Case #");
    v42 = std::ostream::operator<<(v41, v40);
    v43 = std::operator<<<std::char_traits<char>>(v42, ": ");
    v44 = std::ostream::operator<<(v43, v38, v39, &v68);
    std::ostream::operator<<(v44, (const char *)&std::endl<char,std::char_traits<char>>);
    std::vector<long long,std::allocator<long long>>::~vector((int)&v55);
    std::vector<long long,std::allocator<long long>>::~vector((int)&v56);
    std::vector<long long,std::allocator<long long>>::~vector((int)&v57);
    std::vector<long long,std::allocator<long long>>::~vector((int)&v58);
  }
  std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(&v46);
  std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(&v47);
  return 0;
}
// 80487D0: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048810: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048820: using guessed type int __cdecl std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(_DWORD);
// 8048830: using guessed type int __cdecl std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(_DWORD);
// 8048850: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048870: using guessed type int __cdecl std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(_DWORD, _DWORD, _DWORD);
// 8048880: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD, _DWORD);
// 8048890: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 80488A0: using guessed type int __cdecl std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(_DWORD, _DWORD, _DWORD);
// 80488C0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);

//----- (080494A9) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (080494B6) --------------------------------------------------------
void std::allocator<long long>::allocator()
{
  __gnu_cxx::new_allocator<long long>::new_allocator();
}

//----- (080494CA) --------------------------------------------------------
void std::allocator<long long>::~allocator()
{
  __gnu_cxx::new_allocator<long long>::~new_allocator();
}

//----- (080494DE) --------------------------------------------------------
int __cdecl std::vector<long long,std::allocator<long long>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<long long,std::allocator<long long>>::_Vector_base(a1, a2);
  return std::vector<long long,std::allocator<long long>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08049536) --------------------------------------------------------
void __cdecl std::vector<long long,std::allocator<long long>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<long long *,long long>();
  std::_Vector_base<long long,std::allocator<long long>>::~_Vector_base(a1);
}

//----- (0804958E) --------------------------------------------------------
int __cdecl std::vector<long long,std::allocator<long long>>::operator[](int a1, int a2)
{
  return 8 * a2 + *(_DWORD *)a1;
}

//----- (080495A0) --------------------------------------------------------
char *__cdecl std::vector<long long,std::allocator<long long>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<long long>>::_S_select_on_copy(v2);
  v3 = std::vector<long long,std::allocator<long long>>::size(a2);
  std::_Vector_base<long long,std::allocator<long long>>::_Vector_base(a1, v3);
  std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<long long,std::allocator<long long>>::end((int)&v6, a2);
  std::vector<long long,std::allocator<long long>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *,long long>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (08049657) --------------------------------------------------------
int __cdecl std::min<long long>(int a1, int a2)
{
  __int64 v2; // rcx@1
  __int64 v3; // rax@1
  int result; // eax@2

  LODWORD(v3) = *(_DWORD *)a1;
  HIDWORD(v2) = *(_DWORD *)(a2 + 4);
  HIDWORD(v3) = *(_DWORD *)(a1 + 4);
  LODWORD(v2) = *(_DWORD *)a2;
  if ( v2 >= v3 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049682) --------------------------------------------------------
int __cdecl std::max<long long>(int a1, int a2)
{
  __int64 v2; // rcx@1
  __int64 v3; // rax@1
  int result; // eax@2

  LODWORD(v3) = *(_DWORD *)a2;
  HIDWORD(v2) = *(_DWORD *)(a1 + 4);
  HIDWORD(v3) = *(_DWORD *)(a2 + 4);
  LODWORD(v2) = *(_DWORD *)a1;
  if ( v2 >= v3 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (080496AE) --------------------------------------------------------
void __gnu_cxx::new_allocator<long long>::new_allocator()
{
  ;
}

//----- (080496B4) --------------------------------------------------------
void __gnu_cxx::new_allocator<long long>::~new_allocator()
{
  ;
}

//----- (080496BA) --------------------------------------------------------
void std::_Vector_base<long long,std::allocator<long long>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<long long>::~allocator();
}

//----- (080496CE) --------------------------------------------------------
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<long long,std::allocator<long long>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<long long,std::allocator<long long>>::_M_create_storage(a1, a2);
}

//----- (08049718) --------------------------------------------------------
void __cdecl std::_Vector_base<long long,std::allocator<long long>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
  std::_Vector_base<long long,std::allocator<long long>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<long long,std::allocator<long long>>::_Vector_impl::~_Vector_impl();
}

//----- (08049778) --------------------------------------------------------
int __cdecl std::vector<long long,std::allocator<long long>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<long long *,unsigned int,long long,long long>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080497B6) --------------------------------------------------------
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080497BE) --------------------------------------------------------
void std::_Destroy<long long *,long long>()
{
  std::_Destroy<long long *>();
}

//----- (080497D8) --------------------------------------------------------
int __cdecl std::vector<long long,std::allocator<long long>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 3;
}

//----- (080497F1) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<long long>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (080497FA) --------------------------------------------------------
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049802) --------------------------------------------------------
int __userpurge std::vector<long long,std::allocator<long long>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (0804982A) --------------------------------------------------------
int __userpurge std::vector<long long,std::allocator<long long>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (08049852) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *,long long>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(
           a1,
           a2,
           a3);
}

//----- (08049874) --------------------------------------------------------
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<long long>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (080498AC) --------------------------------------------------------
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<long long,std::allocator<long long>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * a2;
  return result;
}

//----- (080498EA) --------------------------------------------------------
void __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<long long>::deallocate(a1, a2);
}

//----- (08049911) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<long long *,unsigned int,long long,long long>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<long long *,unsigned int,long long>(a1, a2, a3);
}

//----- (08049932) --------------------------------------------------------
void std::_Destroy<long long *>()
{
  std::_Destroy_aux<true>::__destroy<long long *>();
}

//----- (0804994C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804995B) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(
           a1,
           a2,
           a3);
}

//----- (0804997C) --------------------------------------------------------
void std::allocator<long long>::allocator()
{
  __gnu_cxx::new_allocator<long long>::new_allocator();
}

//----- (08049996) --------------------------------------------------------
int __cdecl std::_Vector_base<long long,std::allocator<long long>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<long long>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (080499C6) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<long long>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (080499D9) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<long long *,unsigned int,long long>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<long long *,unsigned int,long long>(a1, a2, a3);
}

//----- (080499FA) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<long long *>()
{
  ;
}

//----- (080499FF) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(
           a1,
           a2,
           a3);
}

//----- (08049A20) --------------------------------------------------------
void __gnu_cxx::new_allocator<long long>::new_allocator()
{
  ;
}

//----- (08049A26) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<long long>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<long long>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (08049A56) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<long long *,unsigned int,long long>(int a1, int a2, int a3)
{
  return std::fill_n<long long *,unsigned int,long long>(a1, a2, a3);
}

//----- (08049A77) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>(
    (int)&v4,
    a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>(
    (int)&v5,
    a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(
           v5,
           v4,
           a3);
}

//----- (08049AC2) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<long long>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (08049ACC) --------------------------------------------------------
int __cdecl std::fill_n<long long *,unsigned int,long long>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<long long *>(a1);
  return std::__fill_n_a<long long *,unsigned int,long long>(v3, a2, a3);
}

//----- (08049AF5) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,false>::_S_base(
    a1,
    a2);
  return a1;
}

//----- (08049B17) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,long long *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<long long *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>(a1);
  return std::__copy_move_a<false,long long const*,long long *>((void *)v5, v4, (void *)v3);
}

//----- (08049B5B) --------------------------------------------------------
int __cdecl std::__niter_base<long long *>(int a1)
{
  return std::_Iter_base<long long *,false>::_S_base(a1);
}

//----- (08049B6E) --------------------------------------------------------
int __cdecl std::__fill_n_a<long long *,unsigned int,long long>(int a1, int a2, int a3)
{
  int v4; // [sp+0h] [bp-10h]@1
  int v5; // [sp+4h] [bp-Ch]@1
  int v6; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = *(_DWORD *)(a3 + 4);
  v6 = a2;
  while ( v6 )
  {
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v5;
    --v6;
    a1 += 8;
  }
  return a1;
}

//----- (08049BAA) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (08049BBC) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,true>::_S_base(a1);
}

//----- (08049BCF) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,long long const*,long long *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<long long>(src, a2, dest);
}

//----- (08049BF4) --------------------------------------------------------
int __cdecl std::_Iter_base<long long *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049BFC) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::base((int)&a1);
}

//----- (08049C11) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<long long>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 3;
  if ( v4 )
    memmove(dest, src, 8 * v4);
  return (char *)dest + 8 * v4;
}

//----- (08049C5A) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<long long const*,std::vector<long long,std::allocator<long long>>>::base(int a1)
{
  return a1;
}

//----- (08049C70) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049C80) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (08049CDA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049CE0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int *v2; // ebx@1
  void (*v3)(void); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &_CTOR_LIST__;
  v3 = (void (*)(void))_CTOR_LIST__;
  if ( _CTOR_LIST__ != -1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (*)(void))*v2;
    }
    while ( *v2 != -1 );
  }
  return v5;
}
// 804B730: using guessed type int _CTOR_LIST__;

//----- (08049D08) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 65 function(s)"
