/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// int __cdecl std::_Rb_tree_decrement(_DWORD); weak
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int __cdecl std::_Rb_tree_increment(_DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
char __cdecl DFS(int a1);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_w();
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
std::_Bit_reference *__cdecl std::_Bit_reference::_Bit_reference(std::_Bit_reference *this, unsigned __int32 *a2, unsigned __int32 a3);
bool __cdecl std::_Bit_reference::operator bool(int a1);
int __cdecl std::_Bit_reference::operator=(int a1, char a2);
int __cdecl std::_Bit_reference::operator=(int a1, int a2);
void std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator();
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_iterator_base *this, unsigned __int32 *a2, unsigned int a3);
bool __cdecl std::_Bit_iterator_base::_M_bump_up(std::_Bit_iterator_base *this);
bool __cdecl std::_Bit_iterator_base::_M_bump_down(std::_Bit_iterator_base *this);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_M_incr(std::_Bit_iterator_base *this, int a2);
bool __cdecl std::_Bit_iterator_base::operator==(int a1, int a2);
int __cdecl std::_Bit_iterator_base::operator!=(int a1, int a2);
int __cdecl std::operator-(int a1, int a2);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this, unsigned __int32 *a2, unsigned int a3);
std::_Bit_reference *__stdcall std::_Bit_iterator::operator*(std::_Bit_reference *a1, int a2);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator++(std::_Bit_iterator_base *a1);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator--(std::_Bit_iterator_base *a1);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator+=(std::_Bit_iterator_base *a1, int a2);
// int __userpurge std::_Bit_iterator::operator+@<eax>(int a1, int a2, int a3);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, unsigned __int32 *a2, unsigned int a3);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, const std::_Bit_iterator *a2);
bool __cdecl std::_Bit_const_iterator::operator*(int a1);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::operator++(std::_Bit_iterator_base *a1);
int __cdecl std::__fill_bvector(char a1, int a2, char a3, int a4, char a5);
int __cdecl std::fill(int, int, unsigned __int32 *, int, int); // idb
int __cdecl encode_in(int a1, int a2);
int __cdecl encode_out(int a1, int a2);
int __cdecl decode_row(int a1);
void __cdecl std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map(int a1);
int __cdecl std::fill<unsigned long *,int>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1);
std::_Bit_iterator *__cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1);
std::_Bit_reference *__stdcall std::vector<bool,std::allocator<bool>>::operator[](std::_Bit_reference *a1, int a2, unsigned int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::erase@<eax>(int a1, int a2, int a3);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::map(int a1);
void std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl();
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::~_Rb_tree(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int a1, int a2);
void std::allocator<bool>::allocator();
void std::allocator<bool>::~allocator();
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1, int a2, int a3);
void __cdecl std::vector<bool,std::allocator<bool>>::~vector(int a1);
void std::allocator<std::vector<bool,std::allocator<bool>>>::allocator();
void std::allocator<std::vector<bool,std::allocator<bool>>>::~allocator();
int __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::~vector(int a1);
int __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::operator[](int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear(int a1);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(int a1, unsigned int a2, int a3);
int __cdecl std::vector<bool,std::allocator<bool>>::clear(int a1);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::resize(int a1, int a2, char a3);
int __cdecl std::__niter_base<unsigned long *>(int a1);
int __cdecl std::__fill_a<unsigned long *,int>(int a1, int a2, int a3);
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
void std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl();
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1);
void __cdecl std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3);
// int __userpurge std::copy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree(int a1);
void std::allocator<std::_Rb_tree_node<std::pair<int const,int>>>::~allocator();
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(int a1, void *a2);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_begin(int a1);
// int __userpurge std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::lower_bound@<eax>(int a1, int a2, int a3);
int __stdcall std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::key_comp(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator*(int a1);
bool __cdecl std::less<int>::operator()(int a1, int a2, int a3);
// int __userpurge std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::end@<eax>(int a1, int a2);
bool __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator==(int a1, int a2);
int __cdecl std::pair<int const,int>::pair(int a1, int a2, int a3);
// int __userpurge std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::insert@<eax>(int a1, int a2, char a3, int a4);
void __gnu_cxx::new_allocator<bool>::new_allocator();
void __gnu_cxx::new_allocator<bool>::~new_allocator();
void __cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1);
int __cdecl std::vector<bool,std::allocator<bool>>::_M_initialize(int a1, int a2);
void __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::~new_allocator();
void std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<bool,std::allocator<bool>> *,std::vector<bool,std::allocator<bool>>>(int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1);
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(int a1, char a2, unsigned int a3, int a4);
int __cdecl std::vector<bool,std::allocator<bool>>::_M_erase_at_end(int a1, int a2, int a3);
// int __userpurge std::vector<bool,std::allocator<bool>>::begin@<eax>(int a1, int a2);
int __cdecl std::vector<bool,std::allocator<bool>>::size(int a1);
// int __userpurge std::vector<bool,std::allocator<bool>>::end@<eax>(int a1, int a2);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::insert(int a1, int a2, int a3, unsigned int a4, int a5);
int __cdecl std::_Iter_base<unsigned long *,false>::_S_base(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1);
void std::allocator<unsigned long>::~allocator();
void __cdecl std::_Bvector_base<std::allocator<bool>>::_M_deallocate(int a1);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
void __gnu_cxx::new_allocator<int>::destroy();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy<int *>();
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(int a1);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::~new_allocator();
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right(int a1);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_left(int a1);
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_destroy_node(int a1, void *a2);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::lower_bound@<eax>(int a1, int a2, int a3);
int __stdcall std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::key_comp(int a1);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::end@<eax>(int a1, int a2);
int __cdecl std::_Rb_tree_const_iterator<std::pair<int const,int>>::_Rb_tree_const_iterator(int a1, int a2);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_@<eax>(int a1, int a2, char a3, int a4);
void std::allocator<unsigned long>::allocator<bool>();
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1);
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_allocate(int a1, int a2);
unsigned int __cdecl std::_Bvector_base<std::allocator<bool>>::_S_nword(int a1);
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>,std::vector<bool,std::allocator<bool>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<bool,std::allocator<bool>> *>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4);
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::begin(std::_Bit_const_iterator *a1, std::_Bit_iterator *a2);
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::end(std::_Bit_const_iterator *a1, int a2);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::_M_fill_insert(int a1, int a2, int a3, unsigned int a4, std::_Bit_iterator_base *a5);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void std::allocator<unsigned long>::allocator();
void __gnu_cxx::new_allocator<unsigned long>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<unsigned long>::deallocate(int a1, void *a2);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
void std::allocator<int>::allocator();
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<std::_Rb_tree_node<std::pair<int const,int>>>::allocator();
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(int a1);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::get_allocator@<eax>(int a1, int a2);
void std::allocator<std::pair<int const,int>>::~allocator();
int __cdecl std::__addressof<std::pair<int const,int>>(int a1);
void __gnu_cxx::new_allocator<std::pair<int const,int>>::destroy();
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_put_node(int a1, void *a2);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_end(int a1);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_lower_bound@<eax>(int a1, int a2, int a3, int a4, int a5);
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(int a1, int a2);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_hint_unique_pos@<eax>(int a1, int a2, char a3, int a4);
int __cdecl std::_Select1st<std::pair<int const,int>>::operator()(int a1, int a2);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5);
void __gnu_cxx::new_allocator<unsigned long>::new_allocator();
void std::allocator<unsigned long>::allocator();
int __cdecl __gnu_cxx::new_allocator<unsigned long>::allocate(int a1, unsigned int a2);
void std::allocator<std::vector<bool,std::allocator<bool>>>::allocator();
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<bool,std::allocator<bool>> *>(int a1, int a2);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(int a1, int a2);
int __cdecl std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1);
int __cdecl std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3);
int __cdecl std::vector<bool,std::allocator<bool>>::capacity(int a1);
// int __userpurge std::copy_backward<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::vector<bool,std::allocator<bool>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<bool,std::allocator<bool>>::_M_copy_aligned@<eax>(int a1, int a2, int a3, int a4, unsigned __int32 *a5, int a6, int a7);
// int __userpurge std::copy<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::new_allocator();
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_Node_allocator(int a1);
void std::allocator<std::pair<int const,int>>::allocator<std::_Rb_tree_node<std::pair<int const,int>>>();
void __gnu_cxx::new_allocator<std::pair<int const,int>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::deallocate(int a1, void *a2);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(int a1);
// int __userpurge std::_Rb_tree_const_iterator<std::pair<int const,int>>::_M_const_cast@<eax>(int a1, int *a2);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_rightmost(int a1);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(int a1);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::size(int a1);
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_leftmost(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator--(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator++(int a1);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_create_node(int a1, int a2);
void __gnu_cxx::new_allocator<unsigned long>::new_allocator();
signed int __gnu_cxx::new_allocator<unsigned long>::max_size();
void __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<bool,std::allocator<bool>>>(int a1);
void __cdecl std::_Destroy<std::vector<bool,std::allocator<bool>>>(int a1);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__miter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
// int __userpurge std::__miter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_backward_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::vector<bool,std::allocator<bool>>::max_size(int a1);
char *__cdecl std::copy<unsigned long *,unsigned long *>(int a1, int a2, int a3);
// int __userpurge std::copy<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
// int __userpurge std::__copy_move_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::pair<int const,int>>::new_allocator();
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_value(int a1);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_value(int a1);
// int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::begin@<eax>(int a1, int a2);
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_node(int a1);
void *__cdecl __gnu_cxx::new_allocator<std::pair<int const,int>>::construct(int a1, void *a2, int a3);
signed int __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::max_size();
int __cdecl std::_Construct<std::vector<bool,std::allocator<bool>>,std::vector<bool,std::allocator<bool>>>(void *, int); // idb
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
int __cdecl std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1);
int __cdecl std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
// int __userpurge std::_Iter_base<std::_Bit_iterator,false>::_S_base@<eax>(int a1, int a2, int a3);
// int __userpurge std::__niter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_backward_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(int a1);
int __cdecl std::__miter_base<unsigned long *>(int a1);
char *__cdecl std::__copy_move_a2<false,unsigned long *,unsigned long *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
// int __userpurge std::__copy_move_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::allocate(int a1, unsigned int a2);
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *, int); // idb
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4);
// int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
// int __userpurge std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
char *__cdecl std::__copy_move_a<false,unsigned long *,unsigned long *>(void *src, int a2, void *dest);
// int __userpurge std::_Iter_base<std::_Bit_const_iterator,false>::_S_base@<eax>(int a1, int a2, int a3);
// int __userpurge std::__niter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::max_size();
void std::allocator<bool>::allocator<unsigned long>();
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
// int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, int a2, void *dest);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_8053350)() = &GLOBAL__sub_I_w; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char edata; // weak
_UNKNOWN unk_80534AF; // weak
int dtor_idx_3330; // weak
int w; // idb
int h; // weak
_UNKNOWN G; // weak
_UNKNOWN V; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048770) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80487D0: using guessed type int __gmon_start__(void);

//----- (080488F0) --------------------------------------------------------
#error "80488F3: positive sp value has been found (funcsize=2)"

//----- (08048920) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_80534AF - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_80534AF - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048920: could not find valid save-restore pair for ebp
// 80534AC: using guessed type char edata;

//----- (08048950) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048950: could not find valid save-restore pair for ebp

//----- (08048990) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 8053358: using guessed type int _DTOR_LIST__[];
// 80534AC: using guessed type char edata;
// 80534B0: using guessed type int dtor_idx_3330;

//----- (080489E0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80489E0: could not find valid save-restore pair for ebp

//----- (08048A10) --------------------------------------------------------
char __cdecl DFS(int a1)
{
  char result; // al@2
  int v2; // eax@3
  int v3; // eax@4
  int v4; // eax@5
  bool v5; // al@6
  int v6; // eax@9
  int v7; // eax@9
  int v8; // eax@9
  int v9; // eax@11
  int v10; // [sp+14h] [bp-24h]@3
  char v11; // [sp+18h] [bp-20h]@1
  char v12; // [sp+20h] [bp-18h]@4
  char v13; // [sp+28h] [bp-10h]@9
  char v14; // [sp+2Ch] [bp-Ch]@11

  std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v11, (int)&V, a1);
  std::_Bit_reference::operator=((int)&v11, 1);
  if ( decode_row(a1) == h - 1 )
  {
    result = 1;
  }
  else
  {
    v2 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
           (int)&G,
           a1);
    std::vector<int,std::allocator<int>>::begin((int)&v10, v2);
    while ( 1 )
    {
      v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&G,
             a1);
      std::vector<int,std::allocator<int>>::end((int)&v14, v9);
      if ( !__gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v10, (int)&v14) )
        break;
      v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10);
      std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v12, (int)&V, *(_DWORD *)v3);
      v5 = 0;
      if ( !std::_Bit_reference::operator bool((int)&v12) )
      {
        v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10);
        if ( (unsigned __int8)DFS(*(_DWORD *)v4) )
          v5 = 1;
      }
      if ( v5 )
      {
        v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10);
        v7 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&G,
               *(_DWORD *)v6);
        std::vector<int,std::allocator<int>>::push_back(v7, (int)&a1);
        v8 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&G,
               a1);
        std::vector<int,std::allocator<int>>::erase((int)&v13, v8, v10);
        return 1;
      }
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v10);
    }
    result = 0;
  }
  return result;
}
// 80534B8: using guessed type int h;

//----- (08048BB8) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // edi@3
  int v4; // esi@3
  int v5; // ebx@3
  int v6; // eax@3
  int v7; // eax@3
  int v8; // eax@3
  int v9; // eax@3
  int v10; // eax@3
  int v11; // eax@3
  int v12; // eax@3
  unsigned int v13; // ebx@8
  int v14; // eax@8
  int v15; // eax@9
  int v16; // eax@11
  int v17; // ebx@16
  int v18; // eax@16
  int v19; // eax@17
  int v20; // eax@17
  int v21; // ebx@22
  int v22; // eax@22
  bool v23; // al@23
  int v24; // eax@26
  int v25; // eax@26
  int v26; // eax@34
  char v27; // al@34
  int v29; // [sp+0h] [bp-12Ch]@14
  int v30; // [sp+4h] [bp-128h]@14
  int v31; // [sp+8h] [bp-124h]@14
  int v32; // [sp+Ch] [bp-120h]@14
  int v33; // [sp+10h] [bp-11Ch]@14
  int v34; // [sp+14h] [bp-118h]@14
  int v35; // [sp+18h] [bp-114h]@14
  int v36; // [sp+1Ch] [bp-110h]@14
  char v37; // [sp+20h] [bp-10Ch]@5
  char v38; // [sp+2Ch] [bp-100h]@2
  char v39; // [sp+44h] [bp-E8h]@2
  char v40; // [sp+50h] [bp-DCh]@2
  char v41; // [sp+5Ch] [bp-D0h]@2
  char v42; // [sp+68h] [bp-C4h]@2
  unsigned int v43; // [sp+74h] [bp-B8h]@2
  int v44; // [sp+78h] [bp-B4h]@1
  int v45; // [sp+80h] [bp-ACh]@2
  int v46; // [sp+88h] [bp-A4h]@2
  int v47; // [sp+90h] [bp-9Ch]@2
  int v48; // [sp+98h] [bp-94h]@2
  char v49; // [sp+9Fh] [bp-8Dh]@36
  char v50; // [sp+A0h] [bp-8Ch]@5
  _BYTE v51[10]; // [sp+B6h] [bp-76h]@5
  char v52; // [sp+C0h] [bp-6Ch]@14
  char v53; // [sp+CCh] [bp-60h]@16
  int v54; // [sp+D4h] [bp-58h]@17
  char v55; // [sp+D8h] [bp-54h]@22
  int v56; // [sp+E0h] [bp-4Ch]@26
  int v57; // [sp+E4h] [bp-48h]@18
  int v58; // [sp+E8h] [bp-44h]@18
  int kk; // [sp+ECh] [bp-40h]@33
  int v60; // [sp+F0h] [bp-3Ch]@33
  int jj; // [sp+F4h] [bp-38h]@17
  int ii; // [sp+F8h] [bp-34h]@15
  int n; // [sp+FCh] [bp-30h]@14
  unsigned int m; // [sp+100h] [bp-2Ch]@7
  int l; // [sp+104h] [bp-28h]@6
  int k; // [sp+108h] [bp-24h]@5
  int j; // [sp+10Ch] [bp-20h]@2
  int i; // [sp+110h] [bp-1Ch]@1
  int *v69; // [sp+120h] [bp-Ch]@1

  v69 = &argc;
  scanf("%d", &v44);
  for ( i = 1; i <= v44; ++i )
  {
    scanf("%d%d%d", &w, &h, &v43);
    std::allocator<int>::allocator();
    v45 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v42, v43, (int)&v45);
    std::allocator<int>::~allocator();
    std::allocator<int>::allocator();
    v46 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v41, v43, (int)&v46);
    std::allocator<int>::~allocator();
    std::allocator<int>::allocator();
    v47 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v40, v43, (int)&v47);
    std::allocator<int>::~allocator();
    std::allocator<int>::allocator();
    v48 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v39, v43, (int)&v48);
    std::allocator<int>::~allocator();
    std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::map((int)&v38);
    h += 2;
    for ( j = 0; j < (signed int)v43; ++j )
    {
      v3 = std::vector<int,std::allocator<int>>::operator[]((int)&v39, j);
      v4 = std::vector<int,std::allocator<int>>::operator[]((int)&v40, j);
      v5 = std::vector<int,std::allocator<int>>::operator[]((int)&v41, j);
      v6 = std::vector<int,std::allocator<int>>::operator[]((int)&v42, j);
      scanf("%d%d%d%d", v6, v5, v4, v3);
      v7 = std::vector<int,std::allocator<int>>::operator[]((int)&v40, j);
      ++*(_DWORD *)v7;
      v8 = std::vector<int,std::allocator<int>>::operator[]((int)&v39, j);
      ++*(_DWORD *)v8;
      v9 = std::vector<int,std::allocator<int>>::operator[]((int)&v41, j);
      ++*(_DWORD *)v9;
      v10 = std::vector<int,std::allocator<int>>::operator[]((int)&v39, j);
      ++*(_DWORD *)v10;
      v11 = std::vector<int,std::allocator<int>>::operator[]((int)&v41, j);
      *(_DWORD *)std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[]((int)&v38, v11) = 0;
      v12 = std::vector<int,std::allocator<int>>::operator[]((int)&v39, j);
      *(_DWORD *)std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[]((int)&v38, v12) = 0;
    }
    std::allocator<std::vector<bool,std::allocator<bool>>>::allocator();
    std::allocator<bool>::allocator();
    v51[1] = 1;
    std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&v50, w, (int)&v51[1]);
    std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::vector(
      (int)&v37,
      h,
      (int)&v50);
    std::vector<bool,std::allocator<bool>>::~vector((int)&v50);
    std::allocator<bool>::~allocator();
    std::allocator<std::vector<bool,std::allocator<bool>>>::~allocator();
    for ( k = 0; k < (signed int)v43; ++k )
    {
      for ( l = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v41, k); ; ++l )
      {
        v16 = std::vector<int,std::allocator<int>>::operator[]((int)&v39, k);
        if ( *(_DWORD *)v16 - 1 < l )
          break;
        for ( m = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v42, k); ; ++m )
        {
          v15 = std::vector<int,std::allocator<int>>::operator[]((int)&v40, k);
          if ( *(_DWORD *)v15 - 1 < (signed int)m )
            break;
          v13 = m;
          v14 = std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::operator[](
                  (int)&v37,
                  l);
          std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v51[2], v14, v13);
          std::_Bit_reference::operator=((int)&v51[2], 0);
        }
      }
    }
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear((int)&G);
    std::vector<int,std::allocator<int>>::vector((int)&v52);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(
      (int)&G,
      2 * w * h,
      (int)&v52);
    std::vector<int,std::allocator<int>>::~vector((int)&v52);
    v33 = 0;
    v34 = 1;
    v35 = 0;
    v36 = -1;
    v29 = 1;
    v30 = 0;
    v31 = -1;
    v32 = 0;
    for ( n = 0; n < h; ++n )
    {
      for ( ii = 0; ii < w; ++ii )
      {
        v17 = ii;
        v18 = std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::operator[](
                (int)&v37,
                n);
        std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v53, v18, v17);
        if ( std::_Bit_reference::operator bool((int)&v53) )
        {
          v54 = encode_out(n, ii);
          v19 = encode_in(n, ii);
          v20 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                  (int)&G,
                  v19);
          std::vector<int,std::allocator<int>>::push_back(v20, (int)&v54);
          for ( jj = 0; jj <= 3; ++jj )
          {
            v58 = *(&v33 + jj) + n;
            v57 = *(&v29 + jj) + ii;
            v23 = 0;
            if ( v58 >= 0 && v58 < h && v57 >= 0 && v57 < w )
            {
              v21 = v57;
              v22 = std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::operator[](
                      (int)&v37,
                      v58);
              std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v55, v22, v21);
              if ( std::_Bit_reference::operator bool((int)&v55) )
                v23 = 1;
            }
            if ( v23 )
            {
              v56 = encode_in(v58, v57);
              v24 = encode_out(n, ii);
              v25 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                      (int)&G,
                      v24);
              std::vector<int,std::allocator<int>>::push_back(v25, (int)&v56);
            }
          }
        }
      }
    }
    v60 = 0;
    for ( kk = 0; kk < w; ++kk )
    {
      std::vector<bool,std::allocator<bool>>::clear((int)&V);
      std::vector<bool,std::allocator<bool>>::resize((int)&V, 2 * w * h, 0);
      v26 = encode_in(0, kk);
      v27 = DFS(v26);
      v60 += (unsigned __int8)v27;
    }
    printf("Case #%d: %d\n", i, v60, &v49);
    std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::~vector((int)&v37);
    std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map((int)&v38);
    std::vector<int,std::allocator<int>>::~vector((int)&v39);
    std::vector<int,std::allocator<int>>::~vector((int)&v40);
    std::vector<int,std::allocator<int>>::~vector((int)&v41);
    std::vector<int,std::allocator<int>>::~vector((int)&v42);
  }
  return 0;
}
// 3: found interdependent unknown calls
// 80534B8: using guessed type int h;

//----- (080494CA) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector((int)&G);
    __cxa_atexit(
      (const char *)std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector,
      &G,
      &_dso_handle);
    std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&V);
    result = __cxa_atexit((const char *)std::vector<bool,std::allocator<bool>>::~vector, &V, &_dso_handle);
  }
  return result;
}
// 80487C0: using guessed type int __cxa_atexit(const char *, ...);

//----- (0804955D) --------------------------------------------------------
int GLOBAL__sub_I_w()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049579) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08049581) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08049586) --------------------------------------------------------
std::_Bit_reference *__cdecl std::_Bit_reference::_Bit_reference(std::_Bit_reference *this, unsigned __int32 *a2, unsigned __int32 a3)
{
  std::_Bit_reference *result; // eax@1

  *(_DWORD *)this = a2;
  result = this;
  *((_DWORD *)this + 1) = a3;
  return result;
}

//----- (0804959C) --------------------------------------------------------
bool __cdecl std::_Bit_reference::operator bool(int a1)
{
  return (**(_DWORD **)a1 & *(_DWORD *)(a1 + 4)) != 0;
}

//----- (080495B6) --------------------------------------------------------
int __cdecl std::_Bit_reference::operator=(int a1, char a2)
{
  if ( a2 )
    **(_DWORD **)a1 |= *(_DWORD *)(a1 + 4);
  else
    **(_DWORD **)a1 &= ~*(_DWORD *)(a1 + 4);
  return a1;
}

//----- (080495FE) --------------------------------------------------------
int __cdecl std::_Bit_reference::operator=(int a1, int a2)
{
  bool v2; // al@1

  v2 = std::_Bit_reference::operator bool(a2);
  return std::_Bit_reference::operator=(a1, v2);
}

//----- (08049626) --------------------------------------------------------
void std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator()
{
  ;
}

//----- (0804962C) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_iterator_base *this, unsigned __int32 *a2, unsigned int a3)
{
  std::_Bit_iterator_base *result; // eax@1

  std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator();
  *(_DWORD *)this = a2;
  result = this;
  *((_DWORD *)this + 1) = a3;
  return result;
}

//----- (08049650) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::_M_bump_up(std::_Bit_iterator_base *this)
{
  int v1; // eax@1
  bool result; // al@1

  v1 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = v1 + 1;
  result = v1 == 31;
  if ( result )
  {
    *((_DWORD *)this + 1) = 0;
    result = (char)this;
    *(_DWORD *)this += 4;
  }
  return result;
}

//----- (08049686) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::_M_bump_down(std::_Bit_iterator_base *this)
{
  int v1; // eax@1
  bool result; // al@1

  v1 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = v1 - 1;
  result = v1 == 0;
  if ( result )
  {
    *((_DWORD *)this + 1) = 31;
    result = (char)this;
    *(_DWORD *)this -= 4;
  }
  return result;
}

//----- (080496BA) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_M_incr(std::_Bit_iterator_base *this, int a2)
{
  signed int v2; // ST0C_4@1
  std::_Bit_iterator_base *result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v2 = *((_DWORD *)this + 1) + a2;
  *(_DWORD *)this += 4 * (v2 / 32);
  v4 = ((((unsigned int)(v2 >> 31) >> 27) + (_BYTE)v2) & 0x1F) - ((unsigned int)(v2 >> 31) >> 27);
  if ( v4 < 0 )
  {
    v4 += 32;
    *(_DWORD *)this -= 4;
  }
  result = this;
  *((_DWORD *)this + 1) = v4;
  return result;
}

//----- (08049724) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
}

//----- (0804974E) --------------------------------------------------------
int __cdecl std::_Bit_iterator_base::operator!=(int a1, int a2)
{
  int v2; // eax@1

  LOBYTE(v2) = std::_Bit_iterator_base::operator==(a1, a2);
  return v2 ^ 1;
}

//----- (0804976B) --------------------------------------------------------
int __cdecl std::operator-(int a1, int a2)
{
  return *(_DWORD *)(a1 + 4) + 32 * ((*(_DWORD *)a1 - *(_DWORD *)a2) >> 2) - *(_DWORD *)(a2 + 4);
}

//----- (0804979A) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, 0, 0);
}

//----- (080497BE) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this, unsigned __int32 *a2, unsigned int a3)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, a2, a3);
}

//----- (080497E0) --------------------------------------------------------
std::_Bit_reference *__stdcall std::_Bit_iterator::operator*(std::_Bit_reference *a1, int a2)
{
  std::_Bit_reference::_Bit_reference(a1, *(unsigned __int32 **)a2, 1 << *(_DWORD *)(a2 + 4));
  return a1;
}

//----- (08049814) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator++(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_up(a1);
  return a1;
}

//----- (0804982A) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator--(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_down(a1);
  return a1;
}

//----- (08049840) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator+=(std::_Bit_iterator_base *a1, int a2)
{
  std::_Bit_iterator_base::_M_incr(a1, a2);
  return a1;
}

//----- (0804985E) --------------------------------------------------------
int __userpurge std::_Bit_iterator::operator+@<eax>(int a1, int a2, int a3)
{
  int v3; // edx@1
  std::_Bit_iterator_base *v4; // eax@1
  int v5; // edx@1
  int v7; // [sp+18h] [bp-10h]@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  v7 = *(_DWORD *)a2;
  v8 = v3;
  v4 = std::_Bit_iterator::operator+=((std::_Bit_iterator_base *)&v7, a3);
  v5 = *((_DWORD *)v4 + 1);
  *(_DWORD *)a1 = *(_DWORD *)v4;
  *(_DWORD *)(a1 + 4) = v5;
  return a1;
}

//----- (08049898) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, unsigned __int32 *a2, unsigned int a3)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, a2, a3);
}

//----- (080498BA) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, const std::_Bit_iterator *a2)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, *(unsigned __int32 **)a2, *((_DWORD *)a2 + 1));
}

//----- (080498E0) --------------------------------------------------------
bool __cdecl std::_Bit_const_iterator::operator*(int a1)
{
  char v2; // [sp+18h] [bp-10h]@1

  std::_Bit_reference::_Bit_reference((std::_Bit_reference *)&v2, *(unsigned __int32 **)a1, 1 << *(_DWORD *)(a1 + 4));
  return std::_Bit_reference::operator bool((int)&v2);
}

//----- (0804991A) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::operator++(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_up(a1);
  return a1;
}

//----- (08049930) --------------------------------------------------------
int __cdecl std::__fill_bvector(char a1, int a2, char a3, int a4, char a5)
{
  int result; // eax@3
  char v6; // [sp+Ch] [bp-1Ch]@1
  char v7; // [sp+18h] [bp-10h]@2

  v6 = a5;
  while ( 1 )
  {
    result = std::_Bit_iterator_base::operator!=((int)&a1, (int)&a3);
    if ( !(_BYTE)result )
      break;
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v7, (int)&a1);
    std::_Bit_reference::operator=((int)&v7, v6);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a1);
  }
  return result;
}

//----- (08049990) --------------------------------------------------------
int __cdecl std::fill(int a1, int a2, unsigned __int32 *a3, int a4, int a5)
{
  signed int v5; // eax@3
  char v6; // bl@5
  char v7; // bl@5
  int result; // eax@5
  int v9; // [sp+2Ch] [bp-1Ch]@5
  int v10; // [sp+30h] [bp-18h]@5
  int v11; // [sp+34h] [bp-14h]@5
  int v12; // [sp+38h] [bp-10h]@5
  int v13; // [sp+3Ch] [bp-Ch]@5

  if ( (unsigned __int32 *)a1 == a3 )
  {
    result = std::__fill_bvector(a1, a2, (char)a3, a4, *(_BYTE *)a5);
  }
  else
  {
    if ( *(_BYTE *)a5 )
      v5 = -1;
    else
      v5 = 0;
    v9 = v5;
    std::fill<unsigned long *,int>(a1 + 4, (int)a3, (int)&v9);
    v6 = *(_BYTE *)a5;
    std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v10, (unsigned __int32 *)(a1 + 4), 0);
    std::__fill_bvector(a1, a2, v10, v11, v6);
    v7 = *(_BYTE *)a5;
    std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v12, a3, 0);
    result = std::__fill_bvector(v12, v13, (char)a3, a4, v7);
  }
  return result;
}

//----- (08049AAA) --------------------------------------------------------
int __cdecl encode_in(int a1, int a2)
{
  return 2 * (a1 * w + a2);
}

//----- (08049AC1) --------------------------------------------------------
int __cdecl encode_out(int a1, int a2)
{
  return 2 * (a1 * w + a2) + 1;
}

//----- (08049AD9) --------------------------------------------------------
int __cdecl decode_row(int a1)
{
  return a1 / 2 / w;
}

//----- (08049AF8) --------------------------------------------------------
void __cdecl std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::~map(int a1)
{
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::~_Rb_tree(a1);
}

//----- (08049B0B) --------------------------------------------------------
int __cdecl std::fill<unsigned long *,int>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<unsigned long *>(a2);
  v4 = std::__niter_base<unsigned long *>(a1);
  return std::__fill_a<unsigned long *,int>(v4, v3, a3);
}

//----- (08049B44) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(a1);
}

//----- (08049B58) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1)
{
  return std::_Bvector_base<std::allocator<bool>>::_Bvector_base(a1);
}

//----- (08049B6C) --------------------------------------------------------
std::_Bit_reference *__stdcall std::vector<bool,std::allocator<bool>>::operator[](std::_Bit_reference *a1, int a2, unsigned int a3)
{
  char v4; // [sp+18h] [bp-10h]@1

  std::_Bit_iterator::_Bit_iterator(
    (std::_Bit_iterator *)&v4,
    (unsigned __int32 *)(4 * (a3 >> 5) + *(_DWORD *)a2),
    a3 & 0x1F);
  std::_Bit_iterator::operator*(a1, (int)&v4);
  return a1;
}

//----- (08049BBA) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (08049BD2) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (08049BF2) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049C14) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (08049C40) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (08049C56) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (08049C60) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (08049CD4) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::erase@<eax>(int a1, int a2, int a3)
{
  int v3; // ST04_4@3
  char v5; // [sp+14h] [bp-24h]@1
  char v6; // [sp+18h] [bp-20h]@1
  int v7; // [sp+1Ch] [bp-1Ch]@1
  char v8; // [sp+20h] [bp-18h]@2
  int v9; // [sp+24h] [bp-14h]@2
  int v10; // [sp+28h] [bp-10h]@2
  int v11; // [sp+2Ch] [bp-Ch]@2

  std::vector<int,std::allocator<int>>::end((int)&v5, a2);
  v7 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v6, (int)&a3, (int)&v7);
  if ( __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v6, (int)&v5) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v9, a2);
    v10 = 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v11, (int)&a3, (int)&v10);
    std::copy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      (int)&v8,
      v11,
      v9,
      a3);
  }
  *(_DWORD *)(a2 + 4) -= 4;
  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
  *(_DWORD *)a1 = a3;
  return a1;
}

//----- (08049DC0) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049DD4) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049DE8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, a2);
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08049E40) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08049E98) --------------------------------------------------------
int __cdecl std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::map(int a1)
{
  return std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree(a1);
}

//----- (08049EAC) --------------------------------------------------------
void std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl()
{
  std::allocator<std::_Rb_tree_node<std::pair<int const,int>>>::~allocator();
}

//----- (08049EC0) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::~_Rb_tree(int a1)
{
  int v1; // eax@1

  v1 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_begin(a1);
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(
    a1,
    (void *)v1);
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl();
}

//----- (08049F0C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049F1E) --------------------------------------------------------
int __cdecl std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::operator[](int a1, int a2)
{
  int v2; // edi@2
  bool v3; // al@3
  int v5; // [sp+18h] [bp-40h]@6
  char v6; // [sp+1Fh] [bp-39h]@2
  int v7; // [sp+28h] [bp-30h]@1
  char v8; // [sp+2Ch] [bp-2Ch]@1
  char v9; // [sp+33h] [bp-25h]@2
  char v10; // [sp+34h] [bp-24h]@6
  int v11; // [sp+3Ch] [bp-1Ch]@6

  std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::lower_bound((int)&v7, a1, a2);
  std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::end((int)&v8, a1);
  v3 = 1;
  if ( !std::_Rb_tree_iterator<std::pair<int const,int>>::operator==((int)&v7, (int)&v8) )
  {
    v2 = std::_Rb_tree_iterator<std::pair<int const,int>>::operator*((int)&v7);
    std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::key_comp((int)&v6);
    if ( !std::less<int>::operator()((int)&v9, a2, v2) )
      v3 = 0;
  }
  if ( v3 )
  {
    v11 = 0;
    std::pair<int const,int>::pair((int)&v10, a2, (int)&v11);
    std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::insert((int)&v5, a1, v7, (int)&v10);
    v7 = v5;
  }
  return std::_Rb_tree_iterator<std::pair<int const,int>>::operator*((int)&v7) + 4;
}

//----- (0804A03C) --------------------------------------------------------
void std::allocator<bool>::allocator()
{
  __gnu_cxx::new_allocator<bool>::new_allocator();
}

//----- (0804A050) --------------------------------------------------------
void std::allocator<bool>::~allocator()
{
  __gnu_cxx::new_allocator<bool>::~new_allocator();
}

//----- (0804A064) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1, int a2, int a3)
{
  signed int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@4

  std::_Bvector_base<std::allocator<bool>>::_Bvector_base(a1);
  std::vector<bool,std::allocator<bool>>::_M_initialize((int)a1, a2);
  if ( *(_BYTE *)a3 )
    v3 = -1;
  else
    v3 = 0;
  v5 = v3;
  return std::fill<unsigned long *,int>(*(_DWORD *)a1, *((_DWORD *)a1 + 4), (int)&v5);
}

//----- (0804A0E8) --------------------------------------------------------
void __cdecl std::vector<bool,std::allocator<bool>>::~vector(int a1)
{
  std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(a1);
}

//----- (0804A0FC) --------------------------------------------------------
void std::allocator<std::vector<bool,std::allocator<bool>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::new_allocator();
}

//----- (0804A110) --------------------------------------------------------
void std::allocator<std::vector<bool,std::allocator<bool>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::~new_allocator();
}

//----- (0804A124) --------------------------------------------------------
int __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (0804A17C) --------------------------------------------------------
void __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<bool,std::allocator<bool>> *,std::vector<bool,std::allocator<bool>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::~_Vector_base(a1);
}

//----- (0804A1D4) --------------------------------------------------------
int __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 20 * a2;
}

//----- (0804A1EE) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear(int a1)
{
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
           a1,
           *(_DWORD *)a1);
}

//----- (0804A20A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (0804A21E) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804A2D6) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(int a1, unsigned int a2, int a3)
{
  unsigned int v3; // ebx@2
  int v4; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) < a2 )
  {
    v3 = a2
       - std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
      (int)&v4,
      a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(
      a1,
      v4,
      v3,
      a3);
  }
  else if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) > a2 )
  {
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
      a1,
      *(_DWORD *)a1 + 12 * a2);
  }
}

//----- (0804A374) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::clear(int a1)
{
  int v2; // [sp+18h] [bp-10h]@1
  int v3; // [sp+1Ch] [bp-Ch]@1

  std::vector<bool,std::allocator<bool>>::begin((int)&v2, a1);
  return std::vector<bool,std::allocator<bool>>::_M_erase_at_end(a1, v2, v3);
}

//----- (0804A3AA) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::resize(int a1, int a2, char a3)
{
  std::_Bit_iterator_base *result; // eax@2
  unsigned int v4; // ebx@3
  char v5; // [sp+1Ch] [bp-2Ch]@1
  char v6; // [sp+28h] [bp-20h]@2
  int v7; // [sp+30h] [bp-18h]@2
  int v8; // [sp+34h] [bp-14h]@2
  int v9; // [sp+38h] [bp-10h]@3
  int v10; // [sp+3Ch] [bp-Ch]@3

  v5 = a3;
  if ( std::vector<bool,std::allocator<bool>>::size(a1) > (unsigned int)a2 )
  {
    std::vector<bool,std::allocator<bool>>::begin((int)&v6, a1);
    std::_Bit_iterator::operator+((int)&v7, (int)&v6, a2);
    result = (std::_Bit_iterator_base *)std::vector<bool,std::allocator<bool>>::_M_erase_at_end(a1, v7, v8);
  }
  else
  {
    v4 = a2 - std::vector<bool,std::allocator<bool>>::size(a1);
    std::vector<bool,std::allocator<bool>>::end((int)&v9, a1);
    result = std::vector<bool,std::allocator<bool>>::insert(a1, v9, v10, v4, (int)&v5);
  }
  return result;
}

//----- (0804A468) --------------------------------------------------------
int __cdecl std::__niter_base<unsigned long *>(int a1)
{
  return std::_Iter_base<unsigned long *,false>::_S_base(a1);
}

//----- (0804A47B) --------------------------------------------------------
int __cdecl std::__fill_a<unsigned long *,int>(int a1, int a2, int a3)
{
  int result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    *(_DWORD *)a1 = v4;
    a1 += 4;
  }
  return result;
}

//----- (0804A4A2) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (0804A4B6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A4CA) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A54C) --------------------------------------------------------
void std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl()
{
  std::allocator<unsigned long>::~allocator();
}

//----- (0804A560) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1)
{
  return std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(a1);
}

//----- (0804A574) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(int a1)
{
  std::_Bvector_base<std::allocator<bool>>::_M_deallocate(a1);
  std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl();
}

//----- (0804A5B0) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A5C0) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804A5C8) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (0804A5EA) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (0804A888) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804A8B9) --------------------------------------------------------
int __userpurge std::copy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804A913) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (0804A92E) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804A934) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804A93A) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804A94E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (0804A998) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A9F8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804AA36) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804AA3E) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (0804AA58) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree(int a1)
{
  return std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(a1);
}

//----- (0804AA6C) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::pair<int const,int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::~new_allocator();
}

//----- (0804AA80) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(int a1, void *a2)
{
  int v2; // eax@2
  int v3; // ST1C_4@2

  while ( a2 )
  {
    v2 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right((int)a2);
    std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_erase(
      a1,
      (void *)v2);
    v3 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_left((int)a2);
    std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_destroy_node(
      a1,
      a2);
    a2 = (void *)v3;
  }
}

//----- (0804AAD0) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_begin(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (0804AADC) --------------------------------------------------------
int __userpurge std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::lower_bound@<eax>(int a1, int a2, int a3)
{
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::lower_bound(
    a1,
    a2,
    a3);
  return a1;
}

//----- (0804AB06) --------------------------------------------------------
int __stdcall std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::key_comp(int a1)
{
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::key_comp(a1);
  return a1;
}

//----- (0804AB28) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator*(int a1)
{
  return *(_DWORD *)a1 + 16;
}

//----- (0804AB36) --------------------------------------------------------
bool __cdecl std::less<int>::operator()(int a1, int a2, int a3)
{
  return *(_DWORD *)a2 < *(_DWORD *)a3;
}

//----- (0804AB4A) --------------------------------------------------------
int __userpurge std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::end(
    a1,
    a2);
  return a1;
}

//----- (0804AB6C) --------------------------------------------------------
bool __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (0804AB80) --------------------------------------------------------
int __cdecl std::pair<int const,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804AB9A) --------------------------------------------------------
int __userpurge std::map<int,int,std::less<int>,std::allocator<std::pair<int const,int>>>::insert@<eax>(int a1, int a2, char a3, int a4)
{
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::_Rb_tree_const_iterator<std::pair<int const,int>>::_Rb_tree_const_iterator((int)&v5, (int)&a3);
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_(
    a1,
    a2,
    v5,
    a4);
  return a1;
}

//----- (0804ABE6) --------------------------------------------------------
void __gnu_cxx::new_allocator<bool>::new_allocator()
{
  ;
}

//----- (0804ABEC) --------------------------------------------------------
void __gnu_cxx::new_allocator<bool>::~new_allocator()
{
  ;
}

//----- (0804ABF2) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1)
{
  std::allocator<unsigned long>::allocator<bool>();
  std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(a1);
  std::allocator<unsigned long>::~allocator();
}

//----- (0804AC2A) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::_M_initialize(int a1, int a2)
{
  int v2; // edx@1
  int result; // eax@1
  int v4; // edx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+24h] [bp-14h]@1
  int v8; // [sp+28h] [bp-10h]@1
  unsigned __int32 *v9; // [sp+2Ch] [bp-Ch]@1

  v9 = (unsigned __int32 *)std::_Bvector_base<std::allocator<bool>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 16) = &v9[std::_Bvector_base<std::allocator<bool>>::_S_nword(a2)];
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v7, v9, 0);
  v2 = v8;
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v2;
  std::_Bit_iterator::operator+((int)&v5, a1, a2);
  result = v5;
  v4 = v6;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v4;
  return result;
}

//----- (0804ACBC) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::new_allocator()
{
  ;
}

//----- (0804ACC2) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::~new_allocator()
{
  ;
}

//----- (0804ACC8) --------------------------------------------------------
void std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<bool,std::allocator<bool>>>::~allocator();
}

//----- (0804ACDC) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (0804AD26) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -858993459 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_impl::~_Vector_impl();
}

//----- (0804ADA8) --------------------------------------------------------
int __cdecl std::vector<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>,std::vector<bool,std::allocator<bool>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804ADE6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804ADEE) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<bool,std::allocator<bool>> *,std::vector<bool,std::allocator<bool>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<bool,std::allocator<bool>> *>(a1, a2);
}

//----- (0804AE08) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(a2, *(_DWORD *)(a1 + 4));
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (0804AE3E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804AE52) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804AE6B) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804AE74) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804AE7C) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804AEA4) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804AECC) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804AEEE) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (0804AF2A) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804AF4C) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(int a1, char a2, unsigned int a3, int a4)
{
  std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(
    a1,
    a2,
    a3,
    a4);
}

//----- (0804AF74) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::_M_erase_at_end(int a1, int a2, int a3)
{
  int result; // eax@1

  result = a2;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  return result;
}

//----- (0804AF88) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::begin@<eax>(int a1, int a2)
{
  int v2; // edx@1

  v2 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v2;
  return a1;
}

//----- (0804AFA2) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::size(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1
  char v3; // [sp+18h] [bp-10h]@1

  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v2, (std::_Bit_iterator *)a1);
  std::vector<bool,std::allocator<bool>>::end((std::_Bit_const_iterator *)&v3, a1);
  return std::operator-((int)&v3, (int)&v2);
}

//----- (0804AFE6) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::end@<eax>(int a1, int a2)
{
  int v2; // edx@1

  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v2;
  return a1;
}

//----- (0804B002) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::insert(int a1, int a2, int a3, unsigned int a4, int a5)
{
  return std::vector<bool,std::allocator<bool>>::_M_fill_insert(a1, a2, a3, a4, (std::_Bit_iterator_base *)*(_BYTE *)a5);
}

//----- (0804B038) --------------------------------------------------------
int __cdecl std::_Iter_base<unsigned long *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804B040) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B070) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (0804B084) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (0804B0AC) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1)
{
  std::_Bit_iterator *result; // eax@1

  std::allocator<unsigned long>::allocator();
  std::_Bit_iterator::_Bit_iterator(a1);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)((char *)a1 + 8));
  result = a1;
  *((_DWORD *)a1 + 4) = 0;
  return result;
}

//----- (0804B0E2) --------------------------------------------------------
void std::allocator<unsigned long>::~allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::~new_allocator();
}

//----- (0804B0F6) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::_M_deallocate(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    v1 = (*(_DWORD *)(a1 + 16) - *(_DWORD *)a1) >> 2;
    __gnu_cxx::new_allocator<unsigned long>::deallocate(a1, *(void **)a1);
  }
}

//----- (0804B136) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804B15C) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804B194) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (0804B238) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (0804B268) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804B297) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804B2C0) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804B2E7) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804B309) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  char *v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_a<false,int *,int *>((void *)v6, v5, (void *)v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804B368) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804B36E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B3A6) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804B3E3) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804B404) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804B41E) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(int a1)
{
  std::allocator<std::_Rb_tree_node<std::pair<int const,int>>>::allocator();
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  return std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(a1);
}

//----- (0804B46E) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::~new_allocator()
{
  ;
}

//----- (0804B473) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right(int a1)
{
  return *(_DWORD *)(a1 + 12);
}

//----- (0804B47E) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_left(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (0804B48A) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_destroy_node(int a1, void *a2)
{
  char v2; // [sp+1Fh] [bp-9h]@1

  std::__addressof<std::pair<int const,int>>((int)((char *)a2 + 16));
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::get_allocator(
    (int)&v2,
    a1);
  __gnu_cxx::new_allocator<std::pair<int const,int>>::destroy();
  std::allocator<std::pair<int const,int>>::~allocator();
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_put_node(
    a1,
    a2);
}

//----- (0804B4E8) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::lower_bound@<eax>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_end(a2);
  v4 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_begin(a2);
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_lower_bound(
    a1,
    a2,
    v4,
    v3,
    a3);
  return a1;
}

//----- (0804B536) --------------------------------------------------------
int __stdcall std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::key_comp(int a1)
{
  return a1;
}

//----- (0804B542) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(a1, a2 + 4);
  return a1;
}

//----- (0804B564) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::pair<int const,int>>::_Rb_tree_const_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B574) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_unique_@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@1
  int v6; // [sp+24h] [bp-14h]@1
  int v7; // [sp+28h] [bp-10h]@1
  char v8; // [sp+2Fh] [bp-9h]@1

  v4 = std::_Select1st<std::pair<int const,int>>::operator()((int)&v8, a4);
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_hint_unique_pos(
    (int)&v6,
    a2,
    a3,
    v4);
  if ( v7 )
    std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_(
      a1,
      a2,
      v6,
      v7,
      a4);
  else
    std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(a1, v6);
  return a1;
}

//----- (0804B608) --------------------------------------------------------
void std::allocator<unsigned long>::allocator<bool>()
{
  __gnu_cxx::new_allocator<unsigned long>::new_allocator();
}

//----- (0804B61C) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1)
{
  std::_Bit_iterator *result; // eax@1

  std::allocator<unsigned long>::allocator();
  std::_Bit_iterator::_Bit_iterator(a1);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)((char *)a1 + 8));
  result = a1;
  *((_DWORD *)a1 + 4) = 0;
  return result;
}

//----- (0804B65A) --------------------------------------------------------
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_allocate(int a1, int a2)
{
  unsigned int v2; // eax@1

  v2 = std::_Bvector_base<std::allocator<bool>>::_S_nword(a2);
  return __gnu_cxx::new_allocator<unsigned long>::allocate(a1, v2);
}

//----- (0804B684) --------------------------------------------------------
unsigned int __cdecl std::_Bvector_base<std::allocator<bool>>::_S_nword(int a1)
{
  return (unsigned int)(a1 + 31) >> 5;
}

//----- (0804B692) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<bool,std::allocator<bool>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B6CA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 20 * a2;
  return result;
}

//----- (0804B710) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::deallocate(a1, a2);
}

//----- (0804B737) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>,std::vector<bool,std::allocator<bool>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>>(
           a1,
           a2,
           a3);
}

//----- (0804B758) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<bool,std::allocator<bool>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<bool,std::allocator<bool>> *>(a1, a2);
}

//----- (0804B772) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804B77A) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804B794) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B7C4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B7D3) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B7F4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B804) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@7
  int v13; // eax@7
  int v14; // esi@7
  int v15; // eax@7
  int v16; // ST08_4@7
  char v17; // [sp+14h] [bp-44h]@3
  char v18; // [sp+20h] [bp-38h]@3
  char v19; // [sp+24h] [bp-34h]@7
  void *v20; // [sp+28h] [bp-30h]@7
  int v21; // [sp+2Ch] [bp-2Ch]@7
  int v22; // [sp+30h] [bp-28h]@7
  int v23; // [sp+34h] [bp-24h]@3
  int v24; // [sp+38h] [bp-20h]@3
  void *v25; // [sp+3Ch] [bp-1Ch]@7

  if ( a3 )
  {
    if ( -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2) < a3 )
    {
      v22 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(
              a1,
              a3,
              "vector::_M_fill_insert");
      std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin(
        (int)&v19,
        a1);
      v21 = __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(
              (int)&a2,
              (int)&v19);
      v20 = (void *)std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                      a1,
                      v22);
      v25 = v20;
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
        (int)((char *)v20 + 12 * v21),
        a3,
        a4);
      v25 = 0;
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
              *(_DWORD *)a1,
              *(_DWORD *)v12,
              (int)v20);
      v25 = (void *)(12 * a3 + v13);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
      v25 = (void *)std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
                      *(_DWORD *)v15,
                      v14,
                      (int)v25);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
        *(_DWORD *)a1,
        *(_DWORD *)(a1 + 4));
      v16 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
        a1,
        *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 4) = v25;
      *(_DWORD *)(a1 + 8) = (char *)v20 + 12 * v22;
    }
    else
    {
      std::vector<int,std::allocator<int>>::vector((int)&v17, a4);
      std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
        (int)&v18,
        a1);
      v24 = __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(
              (int)&v18,
              (int)&a2);
      v23 = *(_DWORD *)(a1 + 4);
      if ( v24 <= a3 )
      {
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)(a1 + 4),
          a3 - v24,
          (int)&v17);
        *(_DWORD *)(a1 + 4) += 12 * (a3 - v24);
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
          *(_DWORD *)v10,
          v23,
          v9);
        *(_DWORD *)(a1 + 4) += 12 * v24;
        v11 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)v11,
          v23,
          (int)&v17);
      }
      else
      {
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
          *(_DWORD *)(a1 + 4) + -12 * a3,
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 12 * a3;
        v4 = -12 * a3 + v23;
        v5 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
          *(_DWORD *)v5,
          v4,
          v23);
        v6 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 12 * a3;
        v8 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)v8,
          v7,
          (int)&v17);
      }
      std::vector<int,std::allocator<int>>::~vector((int)&v17);
    }
  }
}

//----- (0804BCF6) --------------------------------------------------------
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::begin(std::_Bit_const_iterator *a1, std::_Bit_iterator *a2)
{
  std::_Bit_const_iterator::_Bit_const_iterator(a1, a2);
  return a1;
}

//----- (0804BD16) --------------------------------------------------------
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::end(std::_Bit_const_iterator *a1, int a2)
{
  std::_Bit_const_iterator::_Bit_const_iterator(a1, (const std::_Bit_iterator *)(a2 + 8));
  return a1;
}

//----- (0804BD38) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::_M_fill_insert(int a1, int a2, int a3, unsigned int a4, std::_Bit_iterator_base *a5)
{
  std::_Bit_iterator_base *result; // eax@1
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // edx@4
  unsigned int v9; // eax@4
  int v10; // edx@4
  int v11; // [sp+20h] [bp-88h]@4
  int v12; // [sp+24h] [bp-84h]@4
  int v13; // [sp+2Ch] [bp-7Ch]@1
  int v14; // [sp+30h] [bp-78h]@4
  int v15; // [sp+34h] [bp-74h]@4
  char v16; // [sp+38h] [bp-70h]@3
  int v17; // [sp+40h] [bp-68h]@3
  int v18; // [sp+44h] [bp-64h]@3
  int v19; // [sp+48h] [bp-60h]@3
  int v20; // [sp+4Ch] [bp-5Ch]@3
  unsigned __int32 *v21; // [sp+50h] [bp-58h]@3
  int v22; // [sp+54h] [bp-54h]@3
  int v23; // [sp+58h] [bp-50h]@4
  unsigned __int32 *v24; // [sp+60h] [bp-48h]@4
  int v25; // [sp+64h] [bp-44h]@4
  int v26; // [sp+68h] [bp-40h]@4
  int v27; // [sp+6Ch] [bp-3Ch]@4
  char v28; // [sp+70h] [bp-38h]@4
  unsigned __int32 *v29; // [sp+78h] [bp-30h]@4
  int v30; // [sp+7Ch] [bp-2Ch]@4
  int v31; // [sp+80h] [bp-28h]@4
  int v32; // [sp+84h] [bp-24h]@4
  int v33; // [sp+88h] [bp-20h]@4
  int v34; // [sp+8Ch] [bp-1Ch]@4
  std::_Bit_iterator_base *v35; // [sp+90h] [bp-18h]@4
  int v36; // [sp+94h] [bp-14h]@4
  unsigned __int32 *v37; // [sp+98h] [bp-10h]@4
  int v38; // [sp+9Ch] [bp-Ch]@4

  result = a5;
  LOBYTE(v13) = (_BYTE)a5;
  if ( a4 )
  {
    v6 = std::vector<bool,std::allocator<bool>>::capacity(a1);
    v7 = std::vector<bool,std::allocator<bool>>::size(a1);
    if ( v6 - v7 < a4 )
    {
      v38 = std::vector<bool,std::allocator<bool>>::_M_check_len(a1, a4, "vector<bool>::_M_fill_insert");
      v37 = (unsigned __int32 *)std::_Bvector_base<std::allocator<bool>>::_M_allocate(a1, v38);
      std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v23, v37, 0);
      std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v24, (const std::_Bit_iterator *)&a2);
      std::vector<bool,std::allocator<bool>>::begin((int)&v28, a1);
      std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v26, (const std::_Bit_iterator *)&v28);
      std::vector<bool,std::allocator<bool>>::_M_copy_aligned((int)&v14, a1, v26, v27, v24, v25, v23);
      std::_Bit_iterator::operator+((int)&v29, (int)&v14, a4);
      std::fill(v14, v15, v29, v30, (int)&v13);
      std::_Bit_iterator::operator+((int)&v31, (int)&v14, a4);
      std::vector<bool,std::allocator<bool>>::end((int)&v33, a1);
      std::copy<std::_Bit_iterator,std::_Bit_iterator>((int)&v11, a2, a3, v33, v34, v31, v32);
      v8 = v12;
      *(_DWORD *)(a1 + 8) = v11;
      *(_DWORD *)(a1 + 12) = v8;
      std::_Bvector_base<std::allocator<bool>>::_M_deallocate(a1);
      v9 = std::_Bvector_base<std::allocator<bool>>::_S_nword(v38);
      *(_DWORD *)(a1 + 16) = &v37[v9];
      std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v35, v37, 0);
      result = v35;
      v10 = v36;
      *(_DWORD *)a1 = v35;
      *(_DWORD *)(a1 + 4) = v10;
    }
    else
    {
      std::_Bit_iterator::operator+((int)&v17, a1 + 8, a4);
      std::vector<bool,std::allocator<bool>>::end((int)&v19, a1);
      std::copy_backward<std::_Bit_iterator,std::_Bit_iterator>((int)&v16, a2, a3, v19, v20, v17, v18);
      std::_Bit_iterator::operator+((int)&v21, (int)&a2, a4);
      std::fill(a2, a3, v21, v22, (int)&v13);
      result = std::_Bit_iterator::operator+=((std::_Bit_iterator_base *)(a1 + 8), a4);
    }
  }
  return result;
}

//----- (0804C030) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804C044) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (0804C04A) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C05E) --------------------------------------------------------
void std::allocator<unsigned long>::allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::new_allocator();
}

//----- (0804C072) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::~new_allocator()
{
  ;
}

//----- (0804C078) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<unsigned long>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C08B) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804C09E) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804C0E2) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804C0FD) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804C118) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804C148) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804C16A) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C17D) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804C18F) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804C1A2) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804C1C8) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804C1E2) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804C203) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804C208) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::pair<int const,int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::new_allocator();
}

//----- (0804C21C) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(int a1)
{
  int result; // eax@1

  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a1 + 4;
  result = a1;
  *(_DWORD *)(a1 + 16) = a1 + 4;
  return result;
}

//----- (0804C24E) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::get_allocator@<eax>(int a1, int a2)
{
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_Node_allocator(a2);
  std::allocator<std::pair<int const,int>>::allocator<std::_Rb_tree_node<std::pair<int const,int>>>();
  return a1;
}

//----- (0804C276) --------------------------------------------------------
void std::allocator<std::pair<int const,int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<int const,int>>::~new_allocator();
}

//----- (0804C289) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<int const,int>>(int a1)
{
  return a1;
}

//----- (0804C292) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int const,int>>::destroy()
{
  ;
}

//----- (0804C298) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_put_node(int a1, void *a2)
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::deallocate(a1, a2);
}

//----- (0804C2BA) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_end(int a1)
{
  return a1 + 4;
}

//----- (0804C2C6) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_lower_bound@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // eax@2

  while ( a3 )
  {
    v5 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(a3);
    if ( !std::less<int>::operator()(a2, v5, a5) )
    {
      a4 = a3;
      a3 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_left(a3);
    }
    else
    {
      a3 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right(a3);
    }
  }
  std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(a1, a4);
  return a1;
}

//----- (0804C33A) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = a2;
  return result;
}

//----- (0804C348) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_hint_unique_pos@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // ebx@1
  int v5; // eax@3
  int v6; // eax@3
  bool v7; // al@4
  int v8; // eax@7
  int v9; // eax@9
  int v10; // ebx@10
  int v11; // ebx@11
  int v12; // eax@11
  int v13; // eax@12
  int v14; // eax@12
  int v15; // eax@17
  int v16; // ebx@18
  int v17; // eax@19
  int v18; // eax@20
  int v19; // eax@20
  int v21; // [sp+10h] [bp-28h]@18
  int v22; // [sp+14h] [bp-24h]@10
  int v23; // [sp+18h] [bp-20h]@1
  int v24; // [sp+1Ch] [bp-1Ch]@7
  int v25; // [sp+20h] [bp-18h]@14
  int v26; // [sp+24h] [bp-14h]@19
  int v27; // [sp+28h] [bp-10h]@22
  int v28; // [sp+2Ch] [bp-Ch]@25

  std::_Rb_tree_const_iterator<std::pair<int const,int>>::_M_const_cast((int)&v23, (int *)&a3);
  v4 = v23;
  if ( v4 == std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_end(a2) )
  {
    v7 = 0;
    if ( std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::size(a2) )
    {
      v5 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_rightmost(a2);
      v6 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(*(_DWORD *)v5);
      if ( std::less<int>::operator()(a2, v6, a4) )
        v7 = 1;
    }
    if ( v7 )
    {
      v8 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_rightmost(a2);
      v24 = 0;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v24, v8);
    }
    else
    {
      std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_unique_pos(
        a1,
        a2,
        a4);
    }
  }
  else
  {
    v9 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(v23);
    if ( std::less<int>::operator()(a2, a4, v9) )
    {
      v22 = v23;
      v10 = v23;
      if ( v10 == *(_DWORD *)std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_leftmost(a2) )
      {
        v11 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_leftmost(a2);
        v12 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_leftmost(a2);
        std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, v12, v11);
      }
      else
      {
        v13 = std::_Rb_tree_iterator<std::pair<int const,int>>::operator--((int)&v22);
        v14 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(*(_DWORD *)v13);
        if ( std::less<int>::operator()(a2, v14, a4) )
        {
          if ( std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right(v22) == 0 )
          {
            v25 = 0;
            std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v25, (int)&v22);
          }
          else
          {
            std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v23, (int)&v23);
          }
        }
        else
        {
          std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_unique_pos(
            a1,
            a2,
            a4);
        }
      }
    }
    else
    {
      v15 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(v23);
      if ( std::less<int>::operator()(a2, v15, a4) )
      {
        v21 = v23;
        v16 = v23;
        if ( v16 == *(_DWORD *)std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_rightmost(a2) )
        {
          v17 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_rightmost(a2);
          v26 = 0;
          std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v26, v17);
        }
        else
        {
          v18 = std::_Rb_tree_iterator<std::pair<int const,int>>::operator++((int)&v21);
          v19 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(*(_DWORD *)v18);
          if ( std::less<int>::operator()(a2, a4, v19) )
          {
            if ( std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right(v23) == 0 )
            {
              v27 = 0;
              std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v27, (int)&v23);
            }
            else
            {
              std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v21, (int)&v21);
            }
          }
          else
          {
            std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_unique_pos(
              a1,
              a2,
              a4);
          }
        }
      }
      else
      {
        v28 = 0;
        std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v23, (int)&v28);
      }
    }
  }
  return a1;
}

//----- (0804C680) --------------------------------------------------------
int __cdecl std::_Select1st<std::pair<int const,int>>::operator()(int a1, int a2)
{
  return a2;
}

//----- (0804C688) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // esi@3
  int v6; // eax@3
  bool v7; // al@4
  char v9; // [sp+17h] [bp-11h]@3
  int v10; // [sp+18h] [bp-10h]@6
  unsigned __int8 v11; // [sp+1Fh] [bp-9h]@6

  v7 = 1;
  if ( !a3
    && std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_end(a2) != a4 )
  {
    v5 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(a4);
    v6 = std::_Select1st<std::pair<int const,int>>::operator()((int)&v9, a5);
    if ( !std::less<int>::operator()(a2, v6, v5) )
      v7 = 0;
  }
  v11 = v7;
  v10 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_create_node(
          a2,
          a5);
  std::_Rb_tree_insert_and_rebalance(v11, v10, a4, a2 + 4);
  ++*(_DWORD *)(a2 + 20);
  std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(a1, v10);
  return a1;
}
// 8048870: using guessed type int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0804C764) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::new_allocator()
{
  ;
}

//----- (0804C76A) --------------------------------------------------------
void std::allocator<unsigned long>::allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::new_allocator();
}

//----- (0804C784) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<unsigned long>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<unsigned long>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804C7B4) --------------------------------------------------------
void std::allocator<std::vector<bool,std::allocator<bool>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::new_allocator();
}

//----- (0804C7CE) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<bool,std::allocator<bool>>,std::allocator<std::vector<bool,std::allocator<bool>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804C7FE) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C811) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>>(
           a1,
           a2,
           a3);
}

//----- (0804C832) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<bool,std::allocator<bool>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<bool,std::allocator<bool>>>(a1);
    std::_Destroy<std::vector<bool,std::allocator<bool>>>(v2);
    a1 += 20;
  }
  return result;
}

//----- (0804C85B) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804C875) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804C896) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(a1);
  return -1431655765
       * ((v2
         - *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(a2)) >> 2);
}

//----- (0804C8E8) --------------------------------------------------------
int __cdecl std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804C910) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1)
{
  return a1;
}

//----- (0804C918) --------------------------------------------------------
int __cdecl std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::vector<int,std::allocator<int>> *>(a2);
  v4 = std::__miter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           v4,
           v3,
           a3);
}

//----- (0804C950) --------------------------------------------------------
int __cdecl std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a2);
  v4 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(v4, v3, a3);
}

//----- (0804C988) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804C9AA) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1);
  v4 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1),
        v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1);
  return result;
}

//----- (0804CA4E) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804CA6E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804CA9D) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804CAC6) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::capacity(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1
  char v3; // [sp+18h] [bp-10h]@1

  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v2, (std::_Bit_iterator *)a1);
  std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v3, *(unsigned __int32 **)(a1 + 16), 0);
  return std::operator-((int)&v3, (int)&v2);
}

//----- (0804CB12) --------------------------------------------------------
int __userpurge std::copy_backward<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_iterator>((int)&v10, a2, a3);
  std::__copy_move_backward_a2<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804CB90) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::_M_check_len(int a1, int a2, char *a3)
{
  int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<bool,std::allocator<bool>>::max_size(a1);
  v4 = std::vector<bool,std::allocator<bool>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<bool,std::allocator<bool>>::size(a1);
  v9 = std::vector<bool,std::allocator<bool>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<bool,std::allocator<bool>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<bool,std::allocator<bool>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<bool,std::allocator<bool>>::max_size(a1);
  return result;
}

//----- (0804CC34) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::_M_copy_aligned@<eax>(int a1, int a2, int a3, int a4, unsigned __int32 *a5, int a6, int a7)
{
  int v8; // [sp+2Ch] [bp-1Ch]@1
  int v9; // [sp+30h] [bp-18h]@1
  int v10; // [sp+34h] [bp-14h]@1
  int v11; // [sp+38h] [bp-10h]@1
  unsigned __int32 *v12; // [sp+3Ch] [bp-Ch]@1

  v12 = (unsigned __int32 *)std::copy<unsigned long *,unsigned long *>(a3, (int)a5, a7);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v8, v12, 0);
  std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v10, a5, 0);
  std::copy<std::_Bit_const_iterator,std::_Bit_iterator>(a1, v10, v11, (int)a5, a6, v8, v9);
  return a1;
}

//----- (0804CCD3) --------------------------------------------------------
int __userpurge std::copy<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_iterator>((int)&v10, a2, a3);
  std::__copy_move_a2<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804CD50) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804CD55) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804CD5D) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804CD70) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804CD95) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804CDA8) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804CDB2) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804CDD3) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804CDE8) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804CE32) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804CE37) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804CE58) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::new_allocator()
{
  ;
}

//----- (0804CE5E) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_Node_allocator(int a1)
{
  return a1;
}

//----- (0804CE66) --------------------------------------------------------
void std::allocator<std::pair<int const,int>>::allocator<std::_Rb_tree_node<std::pair<int const,int>>>()
{
  __gnu_cxx::new_allocator<std::pair<int const,int>>::new_allocator();
}

//----- (0804CE7A) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int const,int>>::~new_allocator()
{
  ;
}

//----- (0804CE80) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804CE93) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_value(a1);
  return std::_Select1st<std::pair<int const,int>>::operator()((int)&v3, v1);
}

//----- (0804CEB6) --------------------------------------------------------
int __userpurge std::_Rb_tree_const_iterator<std::pair<int const,int>>::_M_const_cast@<eax>(int a1, int *a2)
{
  std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(a1, *a2);
  return a1;
}

//----- (0804CED8) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_rightmost(int a1)
{
  return a1 + 16;
}

//----- (0804CEE3) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_value(a1);
  return std::_Select1st<std::pair<int const,int>>::operator()((int)&v3, v1);
}

//----- (0804CF06) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::size(int a1)
{
  return *(_DWORD *)(a1 + 20);
}

//----- (0804CF12) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804CF2C) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v4; // eax@3
  int v5; // eax@11
  int v7; // [sp+18h] [bp-30h]@7
  char v8; // [sp+1Ch] [bp-2Ch]@8
  int v9; // [sp+20h] [bp-28h]@9
  int v10; // [sp+24h] [bp-24h]@9
  int v11; // [sp+28h] [bp-20h]@12
  int v12; // [sp+2Ch] [bp-1Ch]@12
  int v13; // [sp+30h] [bp-18h]@13
  bool v14; // [sp+37h] [bp-11h]@1
  int v15; // [sp+38h] [bp-10h]@1
  int v16; // [sp+3Ch] [bp-Ch]@1

  v16 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_begin(a2);
  v15 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_end(a2);
  v14 = 1;
  while ( v16 )
  {
    v15 = v16;
    v3 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(v16);
    v14 = std::less<int>::operator()(a2, a3, v3);
    if ( v14 )
      v4 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_left(v16);
    else
      v4 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_right(v16);
    v16 = v4;
  }
  std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator((int)&v7, v15);
  if ( v14 )
  {
    std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::begin(
      (int)&v8,
      a2);
    if ( std::_Rb_tree_iterator<std::pair<int const,int>>::operator==((int)&v7, (int)&v8) )
    {
      v9 = v15;
      v10 = v16;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v10, (int)&v9);
      return a1;
    }
    std::_Rb_tree_iterator<std::pair<int const,int>>::operator--((int)&v7);
  }
  v5 = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_key(v7);
  if ( std::less<int>::operator()(a2, v5, a3) )
  {
    v11 = v15;
    v12 = v16;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v12, (int)&v11);
  }
  else
  {
    v13 = 0;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v7, (int)&v13);
  }
  return a1;
}

//----- (0804D08E) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_leftmost(int a1)
{
  return a1 + 12;
}

//----- (0804D09A) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator--(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_decrement(*(_DWORD *)a1);
  return a1;
}
// 8048810: using guessed type int __cdecl std::_Rb_tree_decrement(_DWORD);

//----- (0804D0B8) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<int const,int>>::operator++(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_increment(*(_DWORD *)a1);
  return a1;
}
// 8048890: using guessed type int __cdecl std::_Rb_tree_increment(_DWORD);

//----- (0804D0D6) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_create_node(int a1, int a2)
{
  int v2; // ebx@1
  char v4[5]; // [sp+1Bh] [bp-Dh]@1

  *(_DWORD *)&v4[1] = std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_node(a1);
  v2 = std::__addressof<std::pair<int const,int>>(*(_DWORD *)&v4[1] + 16);
  std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::get_allocator(
    (int)v4,
    a1);
  __gnu_cxx::new_allocator<std::pair<int const,int>>::construct((int)v4, (void *)v2, a2);
  std::allocator<std::pair<int const,int>>::~allocator();
  return *(_DWORD *)&v4[1];
}

//----- (0804D13A) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::new_allocator()
{
  ;
}

//----- (0804D140) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<unsigned long>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804D14A) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::new_allocator()
{
  ;
}

//----- (0804D150) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(20 * a2);
}

//----- (0804D187) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<bool,std::allocator<bool>> *,unsigned int,std::vector<bool,std::allocator<bool>>>(int a1, int a2, int a3)
{
  int result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<bool,std::allocator<bool>>>(v5);
    result = std::_Construct<std::vector<bool,std::allocator<bool>>,std::vector<bool,std::allocator<bool>>>(
               (void *)v4,
               a3);
    --a2;
    v5 += 20;
  }
  return result;
}

//----- (0804D1F5) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<bool,std::allocator<bool>>>(int a1)
{
  return a1;
}

//----- (0804D1FD) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<bool,std::allocator<bool>>>(int a1)
{
  std::vector<bool,std::allocator<bool>>::~vector(a1);
}

//----- (0804D210) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804D239) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804D284) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804D2A5) --------------------------------------------------------
int __cdecl std::__miter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804D2B8) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a3);
  v4 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a2);
  v5 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           v5,
           v4,
           v3);
}

//----- (0804D2FC) --------------------------------------------------------
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804D30F) --------------------------------------------------------
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    std::vector<int,std::allocator<int>>::operator=(a1, a3);
    a1 += 12;
  }
  return result;
}

//----- (0804D337) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804D358) --------------------------------------------------------
signed int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size();
}

//----- (0804D374) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804D3AA) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804D3D3) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_iterator>((int)&v12, a2, a3);
  std::__copy_move_backward_a<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804D46C) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::max_size(int a1)
{
  int result; // eax@2
  signed int v2; // [sp+18h] [bp-10h]@1

  std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(a1);
  v2 = __gnu_cxx::new_allocator<unsigned long>::max_size();
  if ( (unsigned int)v2 > 0x3FFFFFF )
    result = 2147483616;
  else
    result = 32 * v2;
  return result;
}

//----- (0804D4A7) --------------------------------------------------------
char *__cdecl std::copy<unsigned long *,unsigned long *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<unsigned long *>(a2);
  v4 = std::__miter_base<unsigned long *>(a1);
  return std::__copy_move_a2<false,unsigned long *,unsigned long *>(v4, v3, a3);
}

//----- (0804D4DF) --------------------------------------------------------
int __userpurge std::copy<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_const_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_const_iterator>((int)&v10, a2, a3);
  std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804D55C) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_iterator>((int)&v12, a2, a3);
  std::__copy_move_a<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804D5F5) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804D64A) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804D66B) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804D694) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int const,int>>::new_allocator()
{
  ;
}

//----- (0804D699) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804D6A4) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804D6B0) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::pair<int const,int>>::_Rb_tree_iterator(a1, *(_DWORD *)(a2 + 12));
  return a1;
}

//----- (0804D6D2) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,std::pair<int const,int>,std::_Select1st<std::pair<int const,int>>,std::less<int>,std::allocator<std::pair<int const,int>>>::_M_get_node(int a1)
{
  return __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::allocate(a1, 1u);
}

//----- (0804D6F6) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<int const,int>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1
  void *v4; // ecx@1
  int v5; // edx@2

  result = operator new(8u, a2);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(a3 + 4);
    result = *(void **)a3;
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *((_DWORD *)v4 + 1) = v5;
  }
  return result;
}

//----- (0804D724) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<bool,std::allocator<bool>>>::max_size()
{
  return 214748364;
}

//----- (0804D72E) --------------------------------------------------------
int __cdecl std::_Construct<std::vector<bool,std::allocator<bool>>,std::vector<bool,std::allocator<bool>>>(void *a1, int a2)
{
  int result; // eax@1

  result = (int)operator new(0x14u, a1);
  if ( result )
    result = std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)result, a2);
  return result;
}

//----- (0804D783) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804D78B) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804D79E) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804D7C0) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804D804) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804D825) --------------------------------------------------------
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804D82D) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804D852) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2)
{
  int v2; // ST04_4@3
  void *v3; // ST00_4@3
  int v4; // ST08_4@3
  void *v5; // ebx@6
  int v6; // esi@6
  int v7; // eax@6
  int v8; // edi@6
  int v9; // esi@6
  int v10; // ST1C_4@6
  int v11; // eax@6
  int v13; // [sp+2Ch] [bp-3Ch]@3
  int v14; // [sp+30h] [bp-38h]@3
  int v15; // [sp+34h] [bp-34h]@5
  int v16; // [sp+38h] [bp-30h]@5
  int v17; // [sp+3Ch] [bp-2Ch]@5
  int v18; // [sp+40h] [bp-28h]@5
  int v19; // [sp+44h] [bp-24h]@5
  int v20; // [sp+48h] [bp-20h]@3
  unsigned int v21; // [sp+4Ch] [bp-1Ch]@2

  if ( a2 != a1 )
  {
    v21 = std::vector<int,std::allocator<int>>::size(a2);
    if ( std::vector<int,std::allocator<int>>::capacity(a1) < v21 )
    {
      std::vector<int,std::allocator<int>>::end((int)&v13, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v14, a2);
      v20 = std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(
              a1,
              v21,
              v14,
              v13);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v2 = *(_DWORD *)(a1 + 4);
      v3 = *(void **)a1;
      std::_Destroy<int *,int>();
      v4 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * v21;
    }
    else if ( std::vector<int,std::allocator<int>>::size(a1) >= v21 )
    {
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      std::vector<int,std::allocator<int>>::end((int)&v15, a1);
      std::vector<int,std::allocator<int>>::begin((int)&v16, a1);
      std::vector<int,std::allocator<int>>::end((int)&v17, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v18, a2);
      std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
        (int)&v19,
        v18,
        v17,
        v16);
      std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
    }
    else
    {
      v5 = *(void **)a1;
      v6 = *(_DWORD *)a2;
      v7 = std::vector<int,std::allocator<int>>::size(a1);
      std::copy<int *,int *>(*(_DWORD *)a2, v6 + 4 * v7, (int)v5);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v8 = *(_DWORD *)(a1 + 4);
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)a2;
      v11 = std::vector<int,std::allocator<int>>::size(a1);
      std::__uninitialized_copy_a<int *,int *,int>(v10 + 4 * v11, v9, v8);
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)a1 + 4 * v21;
  }
  return a1;
}

//----- (0804DA98) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804DB06) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
}

//----- (0804DB1A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804DB22) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804DB2C) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Bit_iterator,false>::_S_base@<eax>(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  return a1;
}

//----- (0804DB44) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804DB6D) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::_Bit_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804DBB6) --------------------------------------------------------
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(int a1)
{
  return a1;
}

//----- (0804DBBE) --------------------------------------------------------
int __cdecl std::__miter_base<unsigned long *>(int a1)
{
  return std::_Iter_base<unsigned long *,false>::_S_base(a1);
}

//----- (0804DBD1) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,unsigned long *,unsigned long *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<unsigned long *>(a3);
  v4 = std::__niter_base<unsigned long *>(a2);
  v5 = std::__niter_base<unsigned long *>(a1);
  return std::__copy_move_a<false,unsigned long *,unsigned long *>((void *)v5, v4, (void *)v3);
}

//----- (0804DC15) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_const_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804DC3E) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_const_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_const_iterator>((int)&v12, a2, a3);
  std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804DCD7) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804DD20) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804DD58) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804DD88) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(24 * a2);
}

//----- (0804DDBE) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1, int a2)
{
  int v2; // eax@1
  int v3; // ST1C_4@1
  int v5; // [sp+27h] [bp-21h]@1
  unsigned __int32 *v6; // [sp+30h] [bp-18h]@1
  int v7; // [sp+34h] [bp-14h]@1
  int v8; // [sp+38h] [bp-10h]@1
  int v9; // [sp+3Ch] [bp-Ch]@1

  std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(a2);
  std::allocator<bool>::allocator<unsigned long>();
  std::_Bvector_base<std::allocator<bool>>::_Bvector_base(a1);
  std::allocator<bool>::~allocator();
  v2 = std::vector<bool,std::allocator<bool>>::size(a2);
  std::vector<bool,std::allocator<bool>>::_M_initialize((int)a1, v2);
  std::vector<bool,std::allocator<bool>>::end((std::_Bit_const_iterator *)&v6, a2);
  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v8, (std::_Bit_iterator *)a2);
  v3 = *((_DWORD *)a1 + 1);
  return std::vector<bool,std::allocator<bool>>::_M_copy_aligned(
           (int)((char *)&v5 + 1),
           (int)a1,
           v8,
           v9,
           v6,
           v7,
           *(_DWORD *)a1);
}

//----- (0804DE9F) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804DEB1) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804DEC4) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804DEE9) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v3, a1);
    a1 += 12;
    v5 += 12;
  }
  return v5;
}

//----- (0804DF5D) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = -1431655765 * ((a2 - a1) >> 2); i > 0; --i )
  {
    a2 -= 12;
    a3 -= 12;
    std::vector<int,std::allocator<int>>::operator=(a3, a2);
  }
  return a3;
}

//----- (0804DFC0) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
}

//----- (0804DFDA) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4)
{
  int v4; // ST1C_4@1

  v4 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
    a3,
    a4,
    v4);
  return v4;
}

//----- (0804E060) --------------------------------------------------------
int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804E0BA) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>()
{
  std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804E0D4) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804E129) --------------------------------------------------------
int __userpurge std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  int v7; // eax@2
  int v8; // eax@2
  int v9; // edx@4
  char v11; // [sp+1Ch] [bp-1Ch]@2
  char v12; // [sp+24h] [bp-14h]@2
  int i; // [sp+2Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    v7 = (int)std::_Bit_iterator::operator--((std::_Bit_iterator_base *)&a4);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v11, v7);
    v8 = (int)std::_Bit_iterator::operator--((std::_Bit_iterator_base *)&a6);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v12, v8);
    std::_Bit_reference::operator=((int)&v12, (int)&v11);
  }
  v9 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v9;
  return a1;
}

//----- (0804E1B0) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,unsigned long *,unsigned long *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(src, a2, dest);
}

//----- (0804E1D5) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Bit_const_iterator,false>::_S_base@<eax>(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  return a1;
}

//----- (0804E1ED) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_const_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804E216) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804E25F) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  int v7; // edx@4
  char v9; // [sp+1Ch] [bp-1Ch]@2
  char v10; // [sp+24h] [bp-14h]@2
  int i; // [sp+2Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v9, (int)&a2);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v10, (int)&a6);
    std::_Bit_reference::operator=((int)&v10, (int)&v9);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a2);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a6);
  }
  v7 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v7;
  return a1;
}

//----- (0804E2EC) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804E330) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const,int>>>::max_size()
{
  return 178956970;
}

//----- (0804E33A) --------------------------------------------------------
void std::allocator<bool>::allocator<unsigned long>()
{
  __gnu_cxx::new_allocator<bool>::new_allocator();
}

//----- (0804E34D) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804E362) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  char *v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_a<false,int const*,int *>((void *)v6, v5, (void *)v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804E3C0) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804E3DA) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804E423) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  bool v7; // bl@2
  int v8; // edx@4
  char v10; // [sp+14h] [bp-14h]@2
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    v7 = std::_Bit_const_iterator::operator*((int)&a2);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v10, (int)&a6);
    std::_Bit_reference::operator=((int)&v10, v7);
    std::_Bit_const_iterator::operator++((std::_Bit_iterator_base *)&a2);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a6);
  }
  v8 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v8;
  return a1;
}

//----- (0804E4AC) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804E4B4) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  ;
}

//----- (0804E4BA) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (0804E520) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804E530) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804E58A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804E590) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_8053350;
  v3 = (void (__cdecl *)())off_8053350;
  if ( off_8053350 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 8053350: using guessed type int (*off_8053350)();

//----- (0804E5B8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 365 function(s)"
