/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new[](unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
int __cdecl std::__lg(int a1);
int __cdecl std::sort<long double *>(int a1, unsigned int a2);
int __cdecl std::__introsort_loop<long double *,int>(int a1, unsigned int a2, int a3);
int __cdecl std::__final_insertion_sort<long double *>(int a1, int a2);
int __cdecl std::partial_sort<long double *>(int a1, int a2, unsigned int a3);
int __cdecl std::__unguarded_partition_pivot<long double *>(int a1, int a2);
int __cdecl std::__insertion_sort<long double *>(int a1, int a2);
int __cdecl std::__unguarded_insertion_sort<long double *>(int a1, int a2);
int __cdecl std::__heap_select<long double *>(int a1, int a2, unsigned int a3);
int __cdecl std::sort_heap<long double *>(int a1, int a2);
void __cdecl std::__move_median_first<long double *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_partition<long double *,long double>(int a1, int a2, int a3);
int __cdecl std::copy_backward<long double *,long double *>(int a1, int a2, int a3);
__int64 __cdecl std::__unguarded_linear_insert<long double *>(int a1);
int __cdecl std::make_heap<long double *>(int a1, int a2);
__int64 __cdecl std::__pop_heap<long double *>(int a1, int a2, int a3);
int __cdecl std::iter_swap<long double *,long double *>(int a1, int a2);
int __cdecl std::__miter_base<long double *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,long double *,long double *>(int a1, int a2, int a3);
__int64 __cdecl std::__adjust_heap<long double *,int,long double>(int a1, int a2, int a3, long double a4);
int __cdecl std::__iter_swap<true>::iter_swap<long double *,long double *>(int a1, int a2);
int __cdecl std::_Iter_base<long double *,false>::_S_base(int a1);
int __cdecl std::__niter_base<long double *>(int a1);
int __cdecl std::__copy_move_backward_a<false,long double *,long double *>(void *src, int, int); // idb
__int64 __cdecl std::__push_heap<long double *,int,long double>(int a1, int a2, int a3, long double a4);
int __cdecl std::swap<long double>(int a1, int a2);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<long double>(void *src, int, int); // idb
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804ACB0)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080486B0) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048710: using guessed type int __gmon_start__(void);

//----- (080487E0) --------------------------------------------------------
#error "80487E3: positive sp value has been found (funcsize=2)"

//----- (08048810) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048810: could not find valid save-restore pair for ebp

//----- (08048840) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048840: could not find valid save-restore pair for ebp

//----- (08048880) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804ACB8: using guessed type int _DTOR_LIST__[];
// 804AF2C: using guessed type char completed_3328;
// 804AF30: using guessed type int dtor_idx_3330;

//----- (080488D0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80488D0: could not find valid save-restore pair for ebp

//----- (08048900) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  int v4; // eax@2
  unsigned int v5; // eax@3
  unsigned int v6; // eax@6
  int v7; // eax@23
  int v8; // eax@32
  unsigned int v10; // [sp+1Ch] [bp-24h]@2
  signed int v11; // [sp+20h] [bp-20h]@1
  int v12; // [sp+24h] [bp-1Ch]@8
  int v13; // [sp+28h] [bp-18h]@5
  signed int l; // [sp+2Ch] [bp-14h]@14
  signed int v15; // [sp+30h] [bp-10h]@14
  signed int k; // [sp+34h] [bp-Ch]@11
  signed int j; // [sp+38h] [bp-8h]@8
  signed int i; // [sp+3Ch] [bp-4h]@1

  std::istream::operator>>(&std::cin, &v11);
  for ( i = 1; i <= v11; ++i )
  {
    v3 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v4 = std::ostream::operator<<(v3, i);
    std::operator<<<std::char_traits<char>>(v4, ": ");
    std::istream::operator>>(&std::cin, &v10);
    if ( v10 > 0xAA00000 )
      v5 = -1;
    else
      v5 = 12 * v10;
    v13 = operator new[](v5);
    if ( v10 > 0xAA00000 )
      v6 = -1;
    else
      v6 = 12 * v10;
    v12 = operator new[](v6);
    for ( j = 0; j < (signed int)v10; ++j )
      std::istream::operator>>(&std::cin, 12 * j + v13);
    for ( k = 0; k < (signed int)v10; ++k )
      std::istream::operator>>(&std::cin, 12 * k + v12);
    std::sort<long double *>(v13, 12 * v10 + v13);
    std::sort<long double *>(v12, 12 * v10 + v12);
    v15 = 0;
    for ( l = 0; v15 < (signed int)v10 && l < (signed int)v10; ++l )
    {
      while ( *(long double *)(12 * v15 + v12) > *(long double *)(12 * l + v13) && l < (signed int)v10 )
        ++l;
      if ( l >= (signed int)v10 )
        break;
      ++v15;
    }
    v7 = std::ostream::operator<<(&std::cout, v15);
    std::operator<<<std::char_traits<char>>(v7, " ");
    v15 = 0;
    for ( l = 0; v15 < (signed int)v10 && l < (signed int)v10; ++l )
    {
      while ( *(long double *)(12 * v15 + v13) > *(long double *)(12 * l + v12) && l < (signed int)v10 )
        ++l;
      if ( l >= (signed int)v10 )
        break;
      ++v15;
    }
    v8 = std::ostream::operator<<(&std::cout, v10 - v15);
    std::ostream::operator<<(v8, (const char *)&std::endl<char,std::char_traits<char>>);
  }
  return 0;
}
// 80486F0: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048750: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048760: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048780: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 80487A0: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);

//----- (08048C05) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048700: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048C44) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048C60) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048C78) --------------------------------------------------------
int __cdecl std::sort<long double *>(int a1, unsigned int a2)
{
  int result; // eax@1
  int v3; // eax@2

  result = a1;
  if ( a1 != a2 )
  {
    v3 = std::__lg(-1431655765 * ((signed int)(a2 - a1) >> 2));
    std::__introsort_loop<long double *,int>(a1, a2, 2 * v3);
    result = std::__final_insertion_sort<long double *>(a1, a2);
  }
  return result;
}

//----- (08048CE9) --------------------------------------------------------
int __cdecl std::__introsort_loop<long double *,int>(int a1, unsigned int a2, int a3)
{
  int result; // eax@3
  int v4; // ST1C_4@4

  while ( 1 )
  {
    result = a2 - a1;
    if ( (signed int)(a2 - a1) <= 203 )
      break;
    if ( !a3 )
      return std::partial_sort<long double *>(a1, a2, a2);
    --a3;
    v4 = std::__unguarded_partition_pivot<long double *>(a1, a2);
    std::__introsort_loop<long double *,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (08048D5C) --------------------------------------------------------
int __cdecl std::__final_insertion_sort<long double *>(int a1, int a2)
{
  int result; // eax@2

  if ( a2 - a1 <= 203 )
  {
    result = std::__insertion_sort<long double *>(a1, a2);
  }
  else
  {
    std::__insertion_sort<long double *>(a1, a1 + 192);
    result = std::__unguarded_insertion_sort<long double *>(a1 + 192, a2);
  }
  return result;
}

//----- (08048DB8) --------------------------------------------------------
int __cdecl std::partial_sort<long double *>(int a1, int a2, unsigned int a3)
{
  std::__heap_select<long double *>(a1, a2, a3);
  return std::sort_heap<long double *>(a1, a2);
}

//----- (08048DEB) --------------------------------------------------------
int __cdecl std::__unguarded_partition_pivot<long double *>(int a1, int a2)
{
  std::__move_median_first<long double *>(a1, 12 * (-1431655765 * ((a2 - a1) >> 2) / 2) + a1, a2 - 12);
  return std::__unguarded_partition<long double *,long double>(a1 + 12, a2, a1);
}

//----- (08048E78) --------------------------------------------------------
int __cdecl std::__insertion_sort<long double *>(int a1, int a2)
{
  int result; // eax@1
  int v3; // ST10_4@4
  int v4; // ST14_4@4
  int v5; // ST18_4@4
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a1 + 12; ; i += 12 )
    {
      result = i;
      if ( i == a2 )
        break;
      if ( *(long double *)a1 <= *(long double *)i )
      {
        std::__unguarded_linear_insert<long double *>(i);
      }
      else
      {
        v3 = *(_DWORD *)i;
        v4 = *(_DWORD *)(i + 4);
        v5 = *(_DWORD *)(i + 8);
        std::copy_backward<long double *,long double *>(a1, i, i + 12);
        *(_DWORD *)a1 = v3;
        *(_DWORD *)(a1 + 4) = v4;
        *(_DWORD *)(a1 + 8) = v5;
      }
    }
  }
  return result;
}

//----- (08048F0A) --------------------------------------------------------
int __cdecl std::__unguarded_insertion_sort<long double *>(int a1, int a2)
{
  int result; // eax@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; i += 12 )
  {
    result = i;
    if ( i == a2 )
      break;
    std::__unguarded_linear_insert<long double *>(i);
  }
  return result;
}

//----- (08048F31) --------------------------------------------------------
int __cdecl std::__heap_select<long double *>(int a1, int a2, unsigned int a3)
{
  int result; // eax@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<long double *>(a1, a2);
  for ( i = a2; ; i += 12 )
  {
    result = i;
    if ( i >= a3 )
      break;
    if ( *(long double *)a1 > *(long double *)i )
      std::__pop_heap<long double *>(a1, a2, i);
  }
  return result;
}

//----- (08048F8B) --------------------------------------------------------
int __cdecl std::sort_heap<long double *>(int a1, int a2)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a2 - a1;
    if ( a2 - a1 <= 23 )
      break;
    a2 -= 12;
    std::__pop_heap<long double *>(a1, a2, a2);
  }
  return result;
}

//----- (08048FC1) --------------------------------------------------------
void __cdecl std::__move_median_first<long double *>(int a1, int a2, int a3)
{
  if ( *(long double *)a2 <= *(long double *)a1 )
  {
    if ( *(long double *)a3 <= *(long double *)a1 )
    {
      if ( *(long double *)a3 <= *(long double *)a2 )
        std::iter_swap<long double *,long double *>(a1, a2);
      else
        std::iter_swap<long double *,long double *>(a1, a3);
    }
  }
  else if ( *(long double *)a3 <= *(long double *)a2 )
  {
    if ( *(long double *)a3 > *(long double *)a1 )
      std::iter_swap<long double *,long double *>(a1, a3);
  }
  else
  {
    std::iter_swap<long double *,long double *>(a1, a2);
  }
}

//----- (08049078) --------------------------------------------------------
int __cdecl std::__unguarded_partition<long double *,long double>(int a1, int a2, int a3)
{
  while ( 1 )
  {
    while ( *(long double *)a3 > *(long double *)a1 )
      a1 += 12;
    for ( a2 -= 12; *(long double *)a2 > *(long double *)a3; a2 -= 12 )
      ;
    if ( a1 >= (unsigned int)a2 )
      break;
    std::iter_swap<long double *,long double *>(a1, a2);
    a1 += 12;
  }
  return a1;
}

//----- (080490DC) --------------------------------------------------------
int __cdecl std::copy_backward<long double *,long double *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<long double *>(a2);
  v4 = std::__miter_base<long double *>(a1);
  return std::__copy_move_backward_a2<false,long double *,long double *>(v4, v3, a3);
}

//----- (08049114) --------------------------------------------------------
__int64 __cdecl std::__unguarded_linear_insert<long double *>(int a1)
{
  int v1; // ecx@2
  int v2; // edx@2
  __int64 result; // rax@4
  long double v4; // [sp+0h] [bp-14h]@1
  int i; // [sp+Ch] [bp-8h]@1

  LODWORD(v4) = *(_DWORD *)a1;
  *(_QWORD *)((char *)&v4 + 4) = *(_QWORD *)(a1 + 4);
  for ( i = a1 - 12; *(long double *)i > v4; i -= 12 )
  {
    v1 = *(_DWORD *)(i + 8);
    v2 = *(_DWORD *)(i + 4);
    *(_DWORD *)a1 = *(_DWORD *)i;
    *(_DWORD *)(a1 + 4) = v2;
    *(_DWORD *)(a1 + 8) = v1;
    a1 = i;
  }
  result = *(_QWORD *)&v4;
  *(_QWORD *)a1 = *(_QWORD *)&v4;
  *(_DWORD *)(a1 + 8) = DWORD2(v4);
  return result;
}

//----- (08049188) --------------------------------------------------------
int __cdecl std::make_heap<long double *>(int a1, int a2)
{
  int result; // eax@1
  int v3; // eax@3
  long double v4; // ST0C_12@3
  int i; // [sp+3Ch] [bp-Ch]@2

  result = a2 - a1;
  if ( a2 - a1 > 23 )
  {
    for ( i = (-1431655765 * ((a2 - a1) >> 2) - 2) / 2; ; --i )
    {
      v3 = 12 * i + a1;
      LODWORD(v4) = *(_DWORD *)v3;
      *(_QWORD *)((char *)&v4 + 4) = *(_QWORD *)(v3 + 4);
      result = std::__adjust_heap<long double *,int,long double>(a1, i, -1431655765 * ((a2 - a1) >> 2), v4);
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (08049247) --------------------------------------------------------
__int64 __cdecl std::__pop_heap<long double *>(int a1, int a2, int a3)
{
  long double v3; // ST20_12@1
  int v4; // ecx@1
  int v5; // edx@1

  LODWORD(v3) = *(_DWORD *)a3;
  *(_QWORD *)((char *)&v3 + 4) = *(_QWORD *)(a3 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_DWORD *)(a3 + 4) = v5;
  *(_DWORD *)(a3 + 8) = v4;
  return std::__adjust_heap<long double *,int,long double>(a1, 0, -1431655765 * ((a2 - a1) >> 2), v3);
}

//----- (080492DB) --------------------------------------------------------
int __cdecl std::iter_swap<long double *,long double *>(int a1, int a2)
{
  return std::__iter_swap<true>::iter_swap<long double *,long double *>(a1, a2);
}

//----- (080492F5) --------------------------------------------------------
int __cdecl std::__miter_base<long double *>(int a1)
{
  return std::_Iter_base<long double *,false>::_S_base(a1);
}

//----- (08049308) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,long double *,long double *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<long double *>(a3);
  v4 = std::__niter_base<long double *>(a2);
  v5 = std::__niter_base<long double *>(a1);
  return std::__copy_move_backward_a<false,long double *,long double *>((void *)v5, v4, v3);
}

//----- (0804934C) --------------------------------------------------------
__int64 __cdecl std::__adjust_heap<long double *,int,long double>(int a1, int a2, int a3, long double a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // ecx@4
  int v7; // edx@4
  int v8; // ST2C_4@8
  int v9; // ebx@8
  int v10; // eax@8
  int v11; // ecx@8
  int v12; // edx@8
  int v14; // [sp+28h] [bp-10h]@1
  int i; // [sp+2Ch] [bp-Ch]@1

  v14 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    if ( *(long double *)(12 * i - 12 + a1) > *(long double *)(12 * i + a1) )
      --i;
    v4 = 12 * a2 + a1;
    v5 = 12 * i + a1;
    v6 = *(_DWORD *)(v5 + 8);
    v7 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v7;
    *(_DWORD *)(v4 + 8) = v6;
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    v8 = 2 * (i + 1);
    v9 = 12 * a2 + a1;
    v10 = 12 * v8 - 12 + a1;
    v11 = *(_DWORD *)(v10 + 8);
    v12 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)v9 = *(_DWORD *)v10;
    *(_DWORD *)(v9 + 4) = v12;
    *(_DWORD *)(v9 + 8) = v11;
    a2 = v8 - 1;
  }
  return std::__push_heap<long double *,int,long double>(a1, a2, v14, a4);
}

//----- (0804948E) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<long double *,long double *>(int a1, int a2)
{
  return std::swap<long double>(a1, a2);
}

//----- (080494A8) --------------------------------------------------------
int __cdecl std::_Iter_base<long double *,false>::_S_base(int a1)
{
  return a1;
}

//----- (080494B0) --------------------------------------------------------
int __cdecl std::__niter_base<long double *>(int a1)
{
  return std::_Iter_base<long double *,false>::_S_base(a1);
}

//----- (080494C3) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,long double *,long double *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<long double>(src, a2, a3);
}

//----- (080494E8) --------------------------------------------------------
__int64 __cdecl std::__push_heap<long double *,int,long double>(int a1, int a2, int a3, long double a4)
{
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // ecx@2
  int v7; // edx@2
  int v8; // ebx@5
  __int64 result; // rax@5
  int i; // [sp+Ch] [bp-8h]@1

  for ( i = (a2 - 1) / 2; a2 > a3 && a4 > *(long double *)(12 * i + a1); i = (i - 1) / 2 )
  {
    v4 = 12 * a2 + a1;
    v5 = 12 * i + a1;
    v6 = *(_DWORD *)(v5 + 8);
    v7 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v7;
    *(_DWORD *)(v4 + 8) = v6;
    a2 = i;
  }
  v8 = 12 * a2 + a1;
  result = *(_QWORD *)&a4;
  *(_QWORD *)v8 = *(_QWORD *)&a4;
  *(_DWORD *)(v8 + 8) = DWORD2(a4);
  return result;
}

//----- (080495A2) --------------------------------------------------------
int __cdecl std::swap<long double>(int a1, int a2)
{
  int v2; // ST00_4@1
  int v3; // ST04_4@1
  int v4; // ST08_4@1
  int v5; // ecx@1
  int v6; // edx@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v6;
  *(_DWORD *)(a1 + 8) = v5;
  result = v2;
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

//----- (080495ED) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<long double>(void *src, int a2, int a3)
{
  if ( -1431655765 * ((a2 - (signed int)src) >> 2) )
    memmove((void *)(a3 + -4 * ((a2 - (signed int)src) >> 2)), src, 4 * ((a2 - (signed int)src) >> 2));
  return -4 * ((a2 - (signed int)src) >> 2) + a3;
}

//----- (08049680) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049690) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (080496EA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (080496F0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804ACB0;
  v3 = (void (__cdecl *)())off_804ACB0;
  if ( off_804ACB0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804ACB0: using guessed type int (*off_804ACB0)();

//----- (08049718) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 41 function(s)"
