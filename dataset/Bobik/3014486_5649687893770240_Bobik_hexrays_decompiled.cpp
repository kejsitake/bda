/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// _DWORD std::string::string(std::string *this); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::string::size(std::string *this); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::string::compare(std::string *this, const std::string *); idb
// _DWORD __cdecl std::string::string(std::string *this, const std::string *); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// _DWORD __cdecl std::string::~string(std::string *this); idb
// int scanf(const char *format, ...);
// int __cdecl std::string::string(_DWORD, _DWORD, _DWORD); weak
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::allocator<char>::~allocator(_DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::allocator<char>::allocator(_DWORD); weak
// int __cdecl std::string::operator=(_DWORD, _DWORD); weak
// _DWORD __cdecl std::string::swap(std::string *this, std::string *); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl generate(int a1);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_m();
int __cdecl std::__lg(int a1);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::vector<std::string,std::allocator<std::string>>::vector(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1);
void __cdecl std::vector<std::string,std::allocator<std::string>>::~vector(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<std::string,std::allocator<std::string>>::operator[](int a1, int a2);
int __cdecl std::vector<std::string,std::allocator<std::string>>::push_back(int, std::string *); // idb
// int __userpurge std::vector<std::string,std::allocator<std::string>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<std::string,std::allocator<std::string>>::end@<eax>(int a1, int a2);
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, int a2);
int __cdecl std::vector<std::string,std::allocator<std::string>>::size(int a1);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
void __cdecl std::vector<int,std::allocator<int>>::pop_back(int a1);
int __cdecl std::vector<std::string,std::allocator<std::string>>::clear(int a1);
void __cdecl std::vector<std::string,std::allocator<std::string>>::resize(int a1, int a2, std::string *a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear(int a1);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(int a1, unsigned int a2, int a3);
void std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(int a1);
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::string *,std::string>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
std::string *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(int a1, void *a2, std::string *a3);
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_insert_aux(int, char, std::string *); // idb
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2);
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int>(char a1, int a2, int a3);
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, char a2);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(int a1, int a2);
void __cdecl std::vector<std::string,std::allocator<std::string>>::insert(int a1, char a2, int a3, std::string *a4);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1);
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(int a1, char a2, unsigned int a3, int a4);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::string>::~allocator();
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Destroy<std::string *>(int a1, int a2);
std::string *__cdecl __gnu_cxx::new_allocator<std::string>::construct(int a1, void *a2, std::string *a3);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(int a1);
int __cdecl std::copy_backward<std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*(int a1);
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_check_len(int, int, char *); // idb
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::destroy(int, std::string *); // idb
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, int a2, char a3);
// int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, char a2, char a3);
// int __userpurge __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+@<eax>(int a1, int a2, int a3);
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, char a2);
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, char a2);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
void __gnu_cxx::new_allocator<int>::destroy();
void __cdecl std::vector<std::string,std::allocator<std::string>>::_M_fill_insert(int a1, char a2, int a3, std::string *a4);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<int>::~allocator();
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4);
void std::allocator<std::string>::allocator();
void __gnu_cxx::new_allocator<std::string>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::string>::deallocate(int a1, void *a2);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
int __cdecl std::_Destroy_aux<false>::__destroy<std::string *>(int a1, int a2);
int __cdecl std::__miter_base<std::string *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::string *,std::string *>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::string,std::allocator<std::string>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<std::string>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::string *,std::string *,std::string>(std::string *, int, int); // idb
int __cdecl __gnu_cxx::new_allocator<std::string>::destroy(int, std::string *); // idb
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, int a2, char a3);
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2);
// int __userpurge __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator-@<eax>(int a1, int a2, int a3);
int __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2, char a3);
// int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,std::string>@<eax>(int a1, int a2, char a3, std::string *a4);
bool __cdecl __gnu_cxx::operator==<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++(int a1);
int __cdecl std::operator<<char,std::char_traits<char>,std::allocator<char>>(std::string *, std::string *); // idb
// int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, int a2, int a3, char a4);
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3);
int __cdecl std::fill<std::string *,std::string>(int a1, int a2, int a3);
std::string *__cdecl std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(int a1, int a2, std::string *a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void std::allocator<int>::allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<int>::allocator();
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(int a1, int a2);
int __cdecl std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1);
int __cdecl std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::string>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl std::__addressof<std::string>(int a1);
int __cdecl std::_Destroy<std::string>(std::string *); // idb
int __cdecl std::_Iter_base<std::string *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::string *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::string *,std::string *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size();
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::string>::max_size();
int __cdecl std::uninitialized_copy<std::string *,std::string *>(std::string *, int, int); // idb
bool __cdecl std::make_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2);
bool __cdecl __gnu_cxx::operator<<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2);
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--(int a1);
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, char a2, char a3, char a4);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__fill_a<std::string *,std::string>(int a1, int a2, int a3);
std::string *__cdecl std::uninitialized_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::new_allocator();
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__miter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(std::string *, int, int); // idb
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(char, int, int, std::string *); // idb
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
std::string *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
int __cdecl std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1);
int __cdecl std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
std::string *__cdecl std::_Construct<std::string,std::string>(void *a1, std::string *a2);
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(char, int, int, std::string *); // idb
int __cdecl std::swap<char,std::char_traits<char>,std::allocator<char>>(std::string *, std::string *); // idb
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,true>::_S_base(char a1);
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4);
// int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
// int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_8050004)() = &GLOBAL__sub_I_m; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char edata; // weak
_UNKNOWN unk_8050183; // weak
int dtor_idx_3330; // weak
int m; // idb
int n; // weak
_UNKNOWN S; // weak
_UNKNOWN A; // weak
int best; // weak
int res; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048880) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80488F0: using guessed type int __gmon_start__(void);

//----- (08048A80) --------------------------------------------------------
#error "8048A83: positive sp value has been found (funcsize=2)"

//----- (08048AB0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_8050183 - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_8050183 - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048AB0: could not find valid save-restore pair for ebp
// 8050180: using guessed type char edata;

//----- (08048AE0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048AE0: could not find valid save-restore pair for ebp

//----- (08048B20) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 805000C: using guessed type int _DTOR_LIST__[];
// 8050180: using guessed type char edata;
// 8050184: using guessed type int dtor_idx_3330;

//----- (08048B70) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048B70: could not find valid save-restore pair for ebp

//----- (08048BA0) --------------------------------------------------------
int __cdecl generate(int a1)
{
  int v1; // eax@3
  int v2; // eax@4
  int v3; // eax@4
  int v4; // eax@5
  int v5; // eax@8
  int v6; // eax@8
  int v7; // eax@11
  int v8; // eax@11
  int v9; // eax@12
  int v10; // eax@12
  int v11; // ebx@13
  int v12; // eax@13
  char v13; // ST0F_1@13
  int v14; // ebx@13
  int v15; // eax@13
  bool v16; // al@14
  int v17; // eax@17
  int v18; // eax@17
  int v19; // eax@19
  int result; // eax@23
  int v21; // eax@28
  int v22; // eax@28
  char v23; // [sp+10h] [bp-38h]@3
  int v24; // [sp+14h] [bp-34h]@3
  char v25; // [sp+20h] [bp-28h]@5
  int v26; // [sp+24h] [bp-24h]@6
  int v27; // [sp+28h] [bp-20h]@6
  int l; // [sp+2Ch] [bp-1Ch]@27
  int k; // [sp+30h] [bp-18h]@9
  int j; // [sp+34h] [bp-14h]@6
  int i; // [sp+38h] [bp-10h]@2
  int v32; // [sp+3Ch] [bp-Ch]@2

  if ( a1 == m )
  {
    v32 = 0;
    for ( i = 0; i < n; ++i )
    {
      std::vector<std::string,std::allocator<std::string>>::vector((int)&v24);
      v1 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&A,
             i);
      std::vector<int,std::allocator<int>>::begin((int)&v23, v1);
      while ( 1 )
      {
        v4 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&A,
               i);
        std::vector<int,std::allocator<int>>::end((int)&v25, v4);
        if ( !__gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v23, (int)&v25) )
          break;
        v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v23);
        v3 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&S, *(_DWORD *)v2);
        std::vector<std::string,std::allocator<std::string>>::push_back((int)&v24, (std::string *)v3);
        __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v23);
      }
      std::vector<std::string,std::allocator<std::string>>::end((int)&v26, (int)&v24);
      std::vector<std::string,std::allocator<std::string>>::begin((int)&v27, (int)&v24);
      std::sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
        v27,
        v26);
      for ( j = 0; ; ++j )
      {
        v19 = std::vector<std::string,std::allocator<std::string>>::size((int)&v24);
        if ( v19 <= j )
          break;
        if ( j )
        {
          for ( k = 0; ; ++k )
          {
            v7 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v24, j - 1);
            v8 = std::string::size((std::string *)v7);
            v16 = 0;
            if ( v8 > k )
            {
              v9 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v24, j);
              v10 = std::string::size((std::string *)v9);
              if ( v10 > k )
              {
                v11 = k;
                v12 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v24, j - 1);
                v13 = *(_BYTE *)std::string::operator[](v12, v11);
                v14 = k;
                v15 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v24, j);
                if ( v13 == *(_BYTE *)std::string::operator[](v15, v14) )
                  v16 = 1;
              }
            }
            if ( !v16 )
              break;
          }
          v17 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v24, j);
          v18 = std::string::size((std::string *)v17);
          v32 += v18 - k;
        }
        else
        {
          v5 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v24, 0);
          v6 = std::string::size((std::string *)v5);
          v32 += v6 + 1;
        }
      }
      std::vector<std::string,std::allocator<std::string>>::~vector((int)&v24);
    }
    if ( v32 == best )
    {
      result = res++ + 1;
    }
    else
    {
      result = best;
      if ( v32 > best )
      {
        result = v32;
        best = v32;
        res = 1;
      }
    }
  }
  else
  {
    for ( l = 0; ; ++l )
    {
      result = n;
      if ( l >= n )
        break;
      v21 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
              (int)&A,
              l);
      std::vector<int,std::allocator<int>>::push_back(v21, (int)&a1);
      generate(a1 + 1);
      v22 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
              (int)&A,
              l);
      std::vector<int,std::allocator<int>>::pop_back(v22);
    }
  }
  return result;
}
// 8048900: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 805018C: using guessed type int n;
// 80501A8: using guessed type int best;
// 80501AC: using guessed type int res;

//----- (08048E9C) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@3
  int v5; // [sp+1Ch] [bp-A8h]@3
  signed int v6; // [sp+9Ch] [bp-28h]@1
  int v7; // [sp+A0h] [bp-24h]@2
  int v8; // [sp+A4h] [bp-20h]@3
  char v9; // [sp+ABh] [bp-19h]@3
  int v10; // [sp+ACh] [bp-18h]@5
  int j; // [sp+B8h] [bp-Ch]@2
  signed int i; // [sp+BCh] [bp-8h]@1

  scanf("%d", &v6);
  for ( i = 1; i <= v6; ++i )
  {
    scanf("%d%d", &m, &n);
    std::vector<std::string,std::allocator<std::string>>::clear((int)&S);
    std::string::string((std::string *)&v7);
    std::vector<std::string,std::allocator<std::string>>::resize((int)&S, m, (std::string *)&v7);
    std::string::~string((std::string *)&v7);
    for ( j = 0; j < m; ++j )
    {
      scanf("%s", &v5);
      std::allocator<char>::allocator(&v9);
      std::string::string(&v8, &v5, &v9);
      v3 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&S, j);
      std::string::operator=(v3, &v8);
      std::string::~string((std::string *)&v8);
      std::allocator<char>::~allocator(&v9);
    }
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear((int)&A);
    std::vector<int,std::allocator<int>>::vector((int)&v10);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(
      (int)&A,
      n,
      (int)&v10);
    std::vector<int,std::allocator<int>>::~vector((int)&v10);
    best = 0;
    res = 0;
    generate(0);
    printf("Case #%d: %d %d\n", i, best, res);
  }
  return 0;
}
// 80489B0: using guessed type int __cdecl std::string::string(_DWORD, _DWORD, _DWORD);
// 80489E0: using guessed type int __cdecl std::allocator<char>::~allocator(_DWORD);
// 8048A30: using guessed type int __cdecl std::allocator<char>::allocator(_DWORD);
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);
// 805018C: using guessed type int n;
// 80501A8: using guessed type int best;
// 80501AC: using guessed type int res;

//----- (08049103) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    std::vector<std::string,std::allocator<std::string>>::vector((int)&S);
    __cxa_atexit((const char *)std::vector<std::string,std::allocator<std::string>>::~vector, &S, &_dso_handle);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector((int)&A);
    result = __cxa_atexit(
               (const char *)std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector,
               &A,
               &_dso_handle);
  }
  return result;
}
// 80488E0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08049196) --------------------------------------------------------
int GLOBAL__sub_I_m()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (080491B2) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (080491CA) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (080491D2) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (080491D8) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::vector(int a1)
{
  return std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(a1);
}

//----- (080491EC) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(a1);
}

//----- (08049200) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::~vector(int a1)
{
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(a1);
}

//----- (08049258) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (08049270) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (08049290) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (080492B2) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (080492DE) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (080492F4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (080492FE) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049310) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::push_back(int a1, std::string *a2)
{
  int result; // eax@2
  char v3[4]; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::string,std::allocator<std::string>>::end((int)v3, a1);
    result = std::vector<std::string,std::allocator<std::string>>::_M_insert_aux(a1, v3[0], a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (08049384) --------------------------------------------------------
int __userpurge std::vector<std::string,std::allocator<std::string>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (080493A4) --------------------------------------------------------
int __userpurge std::vector<std::string,std::allocator<std::string>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (080493C6) --------------------------------------------------------
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, int a2)
{
  bool result; // al@1
  int v3; // eax@2
  int v4; // eax@2

  result = __gnu_cxx::operator!=<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a1, (int)&a2);
  if ( result )
  {
    v3 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&a1);
    v4 = std::__lg(v3);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int>(
      a1,
      a2,
      2 * v4);
    result = std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (08049428) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (08049442) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (080494B6) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::pop_back(int a1)
{
  int v1; // ST04_4@1

  *(_DWORD *)(a1 + 4) -= 4;
  v1 = *(_DWORD *)(a1 + 4);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
}

//----- (080494E2) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::clear(int a1)
{
  return std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(a1, *(_DWORD *)a1);
}

//----- (080494FE) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::resize(int a1, int a2, std::string *a3)
{
  int v3; // ebx@2
  char v4[4]; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<std::string,std::allocator<std::string>>::size(a1) < (unsigned int)a2 )
  {
    v3 = a2 - std::vector<std::string,std::allocator<std::string>>::size(a1);
    std::vector<std::string,std::allocator<std::string>>::end((int)v4, a1);
    std::vector<std::string,std::allocator<std::string>>::insert(a1, v4[0], v3, a3);
  }
  else if ( std::vector<std::string,std::allocator<std::string>>::size(a1) > (unsigned int)a2 )
  {
    std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(a1, 4 * a2 + *(_DWORD *)a1);
  }
}

//----- (08049596) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear(int a1)
{
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
           a1,
           *(_DWORD *)a1);
}

//----- (080495B2) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (080495C6) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (0804961E) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (080496D6) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(int a1, unsigned int a2, int a3)
{
  unsigned int v3; // ebx@2
  int v4; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) < a2 )
  {
    v3 = a2
       - std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
      (int)&v4,
      a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(
      a1,
      v4,
      v3,
      a3);
  }
  else if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) > a2 )
  {
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
      a1,
      *(_DWORD *)a1 + 12 * a2);
  }
}

//----- (08049774) --------------------------------------------------------
void std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::string>::~allocator();
}

//----- (08049788) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804979C) --------------------------------------------------------
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl();
}

//----- (080497FC) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (08049810) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049824) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (080498A6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080498AE) --------------------------------------------------------
int __cdecl std::_Destroy<std::string *,std::string>(int a1, int a2)
{
  return std::_Destroy<std::string *>(a1, a2);
}

//----- (080498C8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (080498D8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (080498E0) --------------------------------------------------------
std::string *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(int a1, void *a2, std::string *a3)
{
  return __gnu_cxx::new_allocator<std::string>::construct(a1, a2, a3);
}

//----- (08049902) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_insert_aux(int a1, char a2, std::string *a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // eax@2
  int result; // eax@2
  int v8; // eax@3
  int v9; // eax@3
  int v10; // esi@3
  int v11; // eax@3
  int v12; // ST08_4@3
  char v13; // [sp+18h] [bp-20h]@2
  char v14; // [sp+1Ch] [bp-1Ch]@3
  void *v15; // [sp+20h] [bp-18h]@3
  int v16; // [sp+24h] [bp-14h]@3
  int v17; // [sp+28h] [bp-10h]@3
  int v18; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<std::string,std::allocator<std::string>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<std::string,std::allocator<std::string>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&v14);
    v8 = std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(a1, v17);
    v15 = (void *)v8;
    v18 = v8;
    __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(a1, (void *)(4 * v16 + v8), a3);
    v18 = 0;
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
    v9 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
    v18 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
            *(std::string **)a1,
            *(_DWORD *)v9,
            (int)v15)
        + 4;
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
    v10 = *(_DWORD *)(a1 + 4);
    v11 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
    v18 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
            *(std::string **)v11,
            v10,
            v18);
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
    std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
    v12 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v18;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(
      a1,
      *(void **)(a1 + 4),
      (std::string *)(*(_DWORD *)(a1 + 4) - 4));
    *(_DWORD *)(a1 + 4) += 4;
    std::string::string((std::string *)&v13, a3);
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
    std::copy_backward<std::string *,std::string *>(*(_DWORD *)v5, v4, v3);
    v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
    std::string::operator=(v6, &v13);
    result = std::string::~string((std::string *)&v13);
  }
  return result;
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (08049BE6) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049BF5) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a2);
}

//----- (08049C21) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a1);
  return (v2
        - *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a2)) >> 2;
}

//----- (08049C51) --------------------------------------------------------
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int>(char a1, int a2, int a3)
{
  bool result; // al@3
  int v4; // [sp+1Ch] [bp-Ch]@4

  while ( 1 )
  {
    result = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(
               (int)&a2,
               (int)&a1) > 16;
    if ( !result )
      break;
    if ( !a3 )
      return std::partial_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
               a1,
               a2,
               a2);
    --a3;
    std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
      (int)&v4,
      a1,
      a2);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int>(
      v4,
      a2,
      a3);
    a2 = v4;
  }
  return result;
}

//----- (08049CE0) --------------------------------------------------------
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, char a2)
{
  bool result; // al@2
  int v3; // [sp+10h] [bp-18h]@2
  int v4; // [sp+14h] [bp-14h]@2
  int v5; // [sp+18h] [bp-10h]@2
  int v6; // [sp+1Ch] [bp-Ch]@2

  if ( __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&a1) > 16 )
  {
    v3 = 16;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v4,
      (int)&a1,
      (int)&v3);
    std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
      a1,
      v4);
    v5 = 16;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v6,
      (int)&a1,
      (int)&v5);
    result = std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
               v6,
               a2);
  }
  else
  {
    result = std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (08049D98) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (08049DBA) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (0804A057) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (0804A072) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(int a1, int a2)
{
  int result; // eax@1

  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::string *,std::string>(a2, *(_DWORD *)(a1 + 4));
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (0804A0A8) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::insert(int a1, char a2, int a3, std::string *a4)
{
  std::vector<std::string,std::allocator<std::string>>::_M_fill_insert(a1, a2, a3, a4);
}

//----- (0804A0D0) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(a2, *(_DWORD *)(a1 + 4));
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (0804A106) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804A11A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A12E) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A18E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A196) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (0804A1B0) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804A1C9) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804A1D2) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A1DA) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (0804A224) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804A24C) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804A274) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804A296) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (0804A2D2) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804A2F4) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(int a1, char a2, unsigned int a3, int a4)
{
  std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(
    a1,
    a2,
    a3,
    a4);
}

//----- (0804A31C) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::string>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A34C) --------------------------------------------------------
void std::allocator<std::string>::~allocator()
{
  __gnu_cxx::new_allocator<std::string>::~new_allocator();
}

//----- (0804A360) --------------------------------------------------------
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::string>::deallocate(a1, a2);
}

//----- (0804A388) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A3B8) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (0804A3CC) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (0804A3F3) --------------------------------------------------------
int __cdecl std::_Destroy<std::string *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::string *>(a1, a2);
}

//----- (0804A40E) --------------------------------------------------------
std::string *__cdecl __gnu_cxx::new_allocator<std::string>::construct(int a1, void *a2, std::string *a3)
{
  std::string *result; // eax@1

  result = (std::string *)operator new(4u, a2);
  if ( result )
    result = (std::string *)std::string::string(result, a3);
  return result;
}

//----- (0804A464) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(int a1)
{
  return a1;
}

//----- (0804A46C) --------------------------------------------------------
int __cdecl std::copy_backward<std::string *,std::string *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::string *>(a2);
  v4 = std::__miter_base<std::string *>(a1);
  return std::__copy_move_backward_a2<false,std::string *,std::string *>(v4, v3, a3);
}

//----- (0804A4A4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A4AE) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::string,std::allocator<std::string>>::max_size(a1);
  v4 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  v9 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::string,std::allocator<std::string>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::string,std::allocator<std::string>>::max_size(a1);
  return result;
}

//----- (0804A552) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::string>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A581) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::string *,std::string *,std::string>(a1, a2, a3);
}

//----- (0804A5A9) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::destroy(int a1, std::string *a2)
{
  return __gnu_cxx::new_allocator<std::string>::destroy(a1, a2);
}

//----- (0804A5C3) --------------------------------------------------------
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, int a2, char a3)
{
  std::__heap_select<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
    a1,
    a2,
    a3);
  return std::sort_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
           a1,
           a2);
}

//----- (0804A5F6) --------------------------------------------------------
int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, char a2, char a3)
{
  int v3; // ebx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+20h] [bp-18h]@1
  int v8; // [sp+24h] [bp-14h]@1
  int v9; // [sp+28h] [bp-10h]@1
  int v10; // [sp+2Ch] [bp-Ch]@1

  v6 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a3, (int)&a2) / 2;
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
    (int)&v5,
    (int)&a2,
    (int)&v6);
  v7 = 1;
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator-(
    (int)&v8,
    (int)&a3,
    (int)&v7);
  std::__move_median_first<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
    a2,
    v5,
    v8);
  v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
  v9 = 1;
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
    (int)&v10,
    (int)&a2,
    (int)&v9);
  std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,std::string>(
    a1,
    v10,
    a3,
    (std::string *)v3);
  return a1;
}

//----- (0804A6DA) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    (int)&v4);
  return a1;
}

//----- (0804A70B) --------------------------------------------------------
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, char a2)
{
  bool result; // al@1
  int v3; // ebx@3
  int v4; // eax@3
  int v5; // eax@4
  int v6; // eax@4
  char v7; // [sp+18h] [bp-20h]@4
  int v8; // [sp+1Ch] [bp-1Ch]@2
  int v9; // [sp+20h] [bp-18h]@2
  char v10; // [sp+24h] [bp-14h]@4
  int v11; // [sp+28h] [bp-10h]@4
  int v12; // [sp+2Ch] [bp-Ch]@4

  result = __gnu_cxx::operator==<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a1, (int)&a2);
  if ( !result )
  {
    v9 = 1;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v8,
      (int)&a1,
      (int)&v9);
    while ( 1 )
    {
      result = __gnu_cxx::operator!=<std::string *,std::vector<std::string,std::allocator<std::string>>>(
                 (int)&v8,
                 (int)&a2);
      if ( !result )
        break;
      v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
      v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v8);
      if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                              (std::string *)v4,
                              (std::string *)v3) )
      {
        v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v8);
        std::string::string((std::string *)&v7, (const std::string *)v5);
        v11 = 1;
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
          (int)&v12,
          (int)&v8,
          (int)&v11);
        std::copy_backward<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
          (int)&v10,
          a1,
          v8,
          v12);
        v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
        std::string::operator=(v6, &v7);
        std::string::~string((std::string *)&v7);
      }
      else
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(v8);
      }
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++((int)&v8);
    }
  }
  return result;
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804A85E) --------------------------------------------------------
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1, char a2)
{
  bool result; // al@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1;
        ;
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator!=<std::string *,std::vector<std::string,std::allocator<std::string>>>(
               (int)&i,
               (int)&a2);
    if ( !result )
      break;
    std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(i);
  }
  return result;
}

//----- (0804A8A4) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804A8CA) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804A902) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (0804A9A6) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (0804A9D6) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804AA05) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804AA2E) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804AA56) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804AA5C) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::_M_fill_insert(int a1, char a2, int a3, std::string *a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@7
  int v13; // eax@7
  int v14; // esi@7
  int v15; // eax@7
  int v16; // ST08_4@7
  char v17; // [sp+1Ch] [bp-2Ch]@3
  char v18; // [sp+20h] [bp-28h]@3
  char v19; // [sp+24h] [bp-24h]@7
  void *v20; // [sp+28h] [bp-20h]@7
  int v21; // [sp+2Ch] [bp-1Ch]@7
  int v22; // [sp+30h] [bp-18h]@7
  int v23; // [sp+34h] [bp-14h]@3
  int v24; // [sp+38h] [bp-10h]@3
  int v25; // [sp+3Ch] [bp-Ch]@7

  if ( a3 )
  {
    if ( (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2 < (unsigned int)a3 )
    {
      v22 = std::vector<std::string,std::allocator<std::string>>::_M_check_len(a1, a3, "vector::_M_fill_insert");
      std::vector<std::string,std::allocator<std::string>>::begin((int)&v19, a1);
      v21 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(
              (int)&a2,
              (int)&v19);
      v20 = (void *)std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(a1, v22);
      v25 = (int)v20;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(
        (int)((char *)v20 + 4 * v21),
        a3,
        a4);
      v25 = 0;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
              *(std::string **)a1,
              *(_DWORD *)v12,
              (int)v20);
      v25 = 4 * a3 + v13;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
      v25 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
              *(std::string **)v15,
              v14,
              v25);
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
      v16 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 4) = v25;
      *(_DWORD *)(a1 + 8) = (char *)v20 + 4 * v22;
    }
    else
    {
      std::string::string((std::string *)&v17, a4);
      std::vector<std::string,std::allocator<std::string>>::end((int)&v18, a1);
      v24 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(
              (int)&v18,
              (int)&a2);
      v23 = *(_DWORD *)(a1 + 4);
      if ( v24 <= (unsigned int)a3 )
      {
        std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(
          *(_DWORD *)(a1 + 4),
          a3 - v24,
          (std::string *)&v17);
        *(_DWORD *)(a1 + 4) += 4 * (a3 - v24);
        std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(
          *(std::string **)v10,
          v23,
          v9);
        *(_DWORD *)(a1 + 4) += 4 * v24;
        v11 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::fill<std::string *,std::string>(*(_DWORD *)v11, v23, (int)&v17);
      }
      else
      {
        std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(
          (std::string *)(-4 * a3 + *(_DWORD *)(a1 + 4)),
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 4 * a3;
        v4 = -4 * a3 + v23;
        v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::copy_backward<std::string *,std::string *>(*(_DWORD *)v5, v4, v23);
        v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 4 * a3;
        v8 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::fill<std::string *,std::string>(*(_DWORD *)v8, v7, (int)&v17);
      }
      std::string::~string((std::string *)&v17);
    }
  }
}

//----- (0804AEBC) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804AEC4) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804AEDE) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804AF0E) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (0804AF21) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804AF3C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804AF74) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804AFB2) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804AFC1) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804AFE2) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804AFF2) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@7
  int v13; // eax@7
  int v14; // esi@7
  int v15; // eax@7
  int v16; // ST08_4@7
  char v17; // [sp+14h] [bp-44h]@3
  char v18; // [sp+20h] [bp-38h]@3
  char v19; // [sp+24h] [bp-34h]@7
  void *v20; // [sp+28h] [bp-30h]@7
  int v21; // [sp+2Ch] [bp-2Ch]@7
  int v22; // [sp+30h] [bp-28h]@7
  int v23; // [sp+34h] [bp-24h]@3
  int v24; // [sp+38h] [bp-20h]@3
  void *v25; // [sp+3Ch] [bp-1Ch]@7

  if ( a3 )
  {
    if ( -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2) < a3 )
    {
      v22 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(
              a1,
              a3,
              "vector::_M_fill_insert");
      std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin(
        (int)&v19,
        a1);
      v21 = __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(
              (int)&a2,
              (int)&v19);
      v20 = (void *)std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                      a1,
                      v22);
      v25 = v20;
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
        (int)((char *)v20 + 12 * v21),
        a3,
        a4);
      v25 = 0;
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
              *(_DWORD *)a1,
              *(_DWORD *)v12,
              (int)v20);
      v25 = (void *)(12 * a3 + v13);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
      v25 = (void *)std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
                      *(_DWORD *)v15,
                      v14,
                      (int)v25);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
        *(_DWORD *)a1,
        *(_DWORD *)(a1 + 4));
      v16 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
        a1,
        *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 4) = v25;
      *(_DWORD *)(a1 + 8) = (char *)v20 + 12 * v22;
    }
    else
    {
      std::vector<int,std::allocator<int>>::vector((int)&v17, a4);
      std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
        (int)&v18,
        a1);
      v24 = __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(
              (int)&v18,
              (int)&a2);
      v23 = *(_DWORD *)(a1 + 4);
      if ( v24 <= a3 )
      {
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)(a1 + 4),
          a3 - v24,
          (int)&v17);
        *(_DWORD *)(a1 + 4) += 12 * (a3 - v24);
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
          *(_DWORD *)v10,
          v23,
          v9);
        *(_DWORD *)(a1 + 4) += 12 * v24;
        v11 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)v11,
          v23,
          (int)&v17);
      }
      else
      {
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
          *(_DWORD *)(a1 + 4) + -12 * a3,
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 12 * a3;
        v4 = -12 * a3 + v23;
        v5 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
          *(_DWORD *)v5,
          v4,
          v23);
        v6 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 12 * a3;
        v8 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)v8,
          v7,
          (int)&v17);
      }
      std::vector<int,std::allocator<int>>::~vector((int)&v17);
    }
  }
}

//----- (0804B4E4) --------------------------------------------------------
void std::allocator<std::string>::allocator()
{
  __gnu_cxx::new_allocator<std::string>::new_allocator();
}

//----- (0804B4F8) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::~new_allocator()
{
  ;
}

//----- (0804B4FE) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::string>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B512) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804B526) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (0804B52C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B53F) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::string *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::string>(a1);
    std::_Destroy<std::string>((std::string *)v2);
    a1 += 4;
  }
  return result;
}

//----- (0804B568) --------------------------------------------------------
int __cdecl std::__miter_base<std::string *>(int a1)
{
  return std::_Iter_base<std::string *,false>::_S_base(a1);
}

//----- (0804B57B) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::string *,std::string *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::string *>(a3);
  v4 = std::__niter_base<std::string *>(a2);
  v5 = std::__niter_base<std::string *>(a1);
  return std::__copy_move_backward_a<false,std::string *,std::string *>(v5, v4, v3);
}

//----- (0804B5C0) --------------------------------------------------------
signed int __cdecl std::vector<std::string,std::allocator<std::string>>::max_size(int a1)
{
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size();
}

//----- (0804B5DB) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804B5F6) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::string>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::string>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804B626) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::string *,std::string *,std::string>(std::string *a1, int a2, int a3)
{
  return std::uninitialized_copy<std::string *,std::string *>(a1, a2, a3);
}

//----- (0804B648) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::string>::destroy(int a1, std::string *a2)
{
  return std::string::~string(a2);
}

//----- (0804B65B) --------------------------------------------------------
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, int a2, char a3)
{
  int v3; // ebx@2
  int v4; // eax@2
  bool result; // al@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
    a1,
    a2);
  for ( i = a2;
        ;
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator<<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&i, (int)&a3);
    if ( !result )
      break;
    v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
    v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&i);
    if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                            (std::string *)v4,
                            (std::string *)v3) )
      std::__pop_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
        a1,
        a2,
        i);
  }
  return result;
}

//----- (0804B6EE) --------------------------------------------------------
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2)
{
  bool result; // al@3

  while ( 1 )
  {
    result = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(
               (int)&a2,
               (int)&a1) > 1;
    if ( !result )
      break;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--((int)&a2);
    std::__pop_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
      a1,
      a2,
      a2);
  }
  return result;
}

//----- (0804B738) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    (int)&v4);
  return a1;
}

//----- (0804B76B) --------------------------------------------------------
int __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2, char a3)
{
  int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@2
  int v6; // eax@2
  int result; // eax@3
  int v8; // ebx@4
  int v9; // eax@4
  int v10; // ebx@6
  int v11; // eax@6
  int v12; // ebx@7
  int v13; // eax@7

  v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
  v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
  if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                          (std::string *)v4,
                          (std::string *)v3) )
  {
    v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
    v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
    if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                            (std::string *)v6,
                            (std::string *)v5) )
    {
      result = std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
                 a1,
                 a2);
    }
    else
    {
      v8 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
      v9 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
      result = std::operator<<char,std::char_traits<char>,std::allocator<char>>((std::string *)v9, (std::string *)v8);
      if ( (_BYTE)result )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
                   a1,
                   a3);
    }
  }
  else
  {
    v10 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
    v11 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
    result = std::operator<<char,std::char_traits<char>,std::allocator<char>>((std::string *)v11, (std::string *)v10);
    if ( !(_BYTE)result )
    {
      v12 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
      v13 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
      if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                              (std::string *)v13,
                              (std::string *)v12) )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
                   a1,
                   a3);
      else
        result = std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
                   a1,
                   a2);
    }
  }
  return result;
}

//----- (0804B897) --------------------------------------------------------
int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,std::string>@<eax>(int a1, int a2, char a3, std::string *a4)
{
  int v4; // eax@3
  int v5; // eax@6

  while ( 1 )
  {
    while ( 1 )
    {
      v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
      if ( !(unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>((std::string *)v4, a4) )
        break;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++((int)&a2);
    }
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--((int)&a3);
    while ( 1 )
    {
      v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
      if ( !(unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(a4, (std::string *)v5) )
        break;
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--((int)&a3);
    }
    if ( !__gnu_cxx::operator<<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&a3) )
      break;
    std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
      a2,
      a3);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++((int)&a2);
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804B94B) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a2);
}

//----- (0804B978) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (0804B98D) --------------------------------------------------------
int __cdecl std::operator<<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2)
{
  return std::string::compare(a1, a2) >> 31;
}

//----- (0804B9AA) --------------------------------------------------------
int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
    (int)&v5,
    a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
    (int)&v6,
    a2);
  std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804BA04) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(int a1)
{
  int v1; // eax@1
  int v2; // ebx@2
  int v3; // eax@2
  int v4; // eax@3
  int v5; // eax@4
  int v7; // [sp+18h] [bp-10h]@1
  char v8; // [sp+1Ch] [bp-Ch]@1

  v1 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
  std::string::string((std::string *)&v8, (const std::string *)v1);
  v7 = a1;
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--((int)&v7);
  while ( 1 )
  {
    v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v7);
    if ( !(unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                             (std::string *)&v8,
                             (std::string *)v4) )
      break;
    v2 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v7);
    v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
    std::string::operator=(v3, v2);
    a1 = v7;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--((int)&v7);
  }
  v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
  std::string::operator=(v5, &v8);
  return std::string::~string((std::string *)&v8);
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804BAD1) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804BAE4) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804BB28) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804BB44) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804BB74) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804BB96) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804BBA9) --------------------------------------------------------
int __cdecl std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::string *,std::string *,std::string>(a1, a2, a3);
}

//----- (0804BBD1) --------------------------------------------------------
int __cdecl std::fill<std::string *,std::string>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<std::string *>(a2);
  v4 = std::__niter_base<std::string *>(a1);
  return std::__fill_a<std::string *,std::string>(v4, v3, a3);
}

//----- (0804BC09) --------------------------------------------------------
std::string *__cdecl std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(int a1, int a2, std::string *a3)
{
  return std::uninitialized_fill_n<std::string *,unsigned int,std::string>(a1, a2, a3);
}

//----- (0804BC2A) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804BC44) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804BC58) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804BC5D) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804BC62) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804BC7C) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804BC9D) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(a1);
  return -1431655765
       * ((v2
         - *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(a2)) >> 2);
}

//----- (0804BCEF) --------------------------------------------------------
int __cdecl std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804BD18) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1)
{
  return a1;
}

//----- (0804BD20) --------------------------------------------------------
int __cdecl std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::vector<int,std::allocator<int>> *>(a2);
  v4 = std::__miter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           v4,
           v3,
           a3);
}

//----- (0804BD58) --------------------------------------------------------
int __cdecl std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a2);
  v4 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(v4, v3, a3);
}

//----- (0804BD90) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804BDB2) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1);
  v4 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1),
        v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1);
  return result;
}

//----- (0804BE56) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804BE76) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804BEA5) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804BECE) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::new_allocator()
{
  ;
}

//----- (0804BED4) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804BED9) --------------------------------------------------------
int __cdecl std::__addressof<std::string>(int a1)
{
  return a1;
}

//----- (0804BEE1) --------------------------------------------------------
int __cdecl std::_Destroy<std::string>(std::string *a1)
{
  return std::string::~string(a1);
}

//----- (0804BEF4) --------------------------------------------------------
int __cdecl std::_Iter_base<std::string *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804BEFC) --------------------------------------------------------
int __cdecl std::__niter_base<std::string *>(int a1)
{
  return std::_Iter_base<std::string *,false>::_S_base(a1);
}

//----- (0804BF0F) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::string *,std::string *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(
           a1,
           a2,
           a3);
}

//----- (0804BF34) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size()
{
  return __gnu_cxx::new_allocator<std::string>::max_size();
}

//----- (0804BF48) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804BF50) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::string>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804BF5A) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::string *,std::string *>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(a1, a2, a3);
}

//----- (0804BF7B) --------------------------------------------------------
bool __cdecl std::make_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2)
{
  bool result; // al@1
  int v3; // eax@3
  signed int v4; // ebx@4
  char v5; // [sp+1Ch] [bp-1Ch]@3
  int v6; // [sp+20h] [bp-18h]@2
  char v7; // [sp+24h] [bp-14h]@3
  char v8; // [sp+28h] [bp-10h]@3
  int v9; // [sp+2Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&a1) <= 1;
  if ( !result )
  {
    v9 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&a1);
    v6 = (v9 - 2) / 2;
    do
    {
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
        (int)&v7,
        (int)&a1,
        (int)&v6);
      v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v7);
      std::string::string((std::string *)&v5, (const std::string *)v3);
      std::string::string((std::string *)&v8, (const std::string *)&v5);
      std::__adjust_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(
        a1,
        v6,
        v9,
        (std::string *)&v8);
      std::string::~string((std::string *)&v8);
      if ( v6 )
      {
        --v6;
        v4 = 1;
      }
      else
      {
        v4 = 0;
      }
      result = std::string::~string((std::string *)&v5);
    }
    while ( v4 == 1 );
  }
  return result;
}

//----- (0804C09C) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator<<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2)
{
  unsigned int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a1);
  return v2 < *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a2);
}

//----- (0804C0C8) --------------------------------------------------------
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2, char a3)
{
  int v3; // eax@1
  int v4; // ebx@1
  int v5; // eax@1
  int v6; // eax@1
  char v8; // [sp+18h] [bp-10h]@1
  char v9; // [sp+1Ch] [bp-Ch]@1

  v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
  std::string::string((std::string *)&v8, (const std::string *)v3);
  v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
  v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a3);
  std::string::operator=(v5, v4);
  std::string::string((std::string *)&v9, (const std::string *)&v8);
  v6 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&a1);
  std::__adjust_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(
    a1,
    0,
    v6,
    (std::string *)&v9);
  std::string::~string((std::string *)&v9);
  return std::string::~string((std::string *)&v8);
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804C196) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 4;
  return a1;
}

//----- (0804C1AB) --------------------------------------------------------
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2)
{
  return std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(
           a1,
           a2);
}

//----- (0804C1C5) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,false>::_S_base(
    a1,
    a2);
  return a1;
}

//----- (0804C1E7) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(a2);
  v8 = std::__copy_move_backward_a<false,std::string *,std::string *>(v6, v5, v4);
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    (int)&v8);
  return a1;
}

//----- (0804C245) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804C24D) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804C260) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804C285) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804C298) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804C2A2) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804C2C3) --------------------------------------------------------
int __cdecl std::__fill_a<std::string *,std::string>(int a1, int a2, int a3)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    std::string::operator=(a1, a3);
    a1 += 4;
  }
  return result;
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804C2EB) --------------------------------------------------------
std::string *__cdecl std::uninitialized_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::string *,unsigned int,std::string>(a1, a2, a3);
}

//----- (0804C30C) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804C336) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804C33C) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804C341) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804C38C) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804C3AD) --------------------------------------------------------
int __cdecl std::__miter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804C3C0) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a3);
  v4 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a2);
  v5 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           v5,
           v4,
           v3);
}

//----- (0804C404) --------------------------------------------------------
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804C417) --------------------------------------------------------
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    std::vector<int,std::allocator<int>>::operator=(a1, a3);
    a1 += 12;
  }
  return result;
}

//----- (0804C43F) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804C460) --------------------------------------------------------
signed int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size();
}

//----- (0804C47C) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804C4B2) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = (a2 - a1) >> 2; i > 0; --i )
  {
    a2 -= 4;
    a3 -= 4;
    std::string::operator=(a3, a2);
  }
  return a3;
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804C4F2) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(std::string *a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != (std::string *)a2 )
  {
    v3 = std::__addressof<std::string>(v5);
    std::_Construct<std::string,std::string>((void *)v3, a1);
    a1 = (std::string *)((char *)a1 + 4);
    v5 += 4;
  }
  return v5;
}

//----- (0804C566) --------------------------------------------------------
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(char a1, int a2, int a3, std::string *a4)
{
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // ebx@4
  int v7; // eax@4
  int v8; // ebx@8
  int v9; // eax@8
  int i; // [sp+14h] [bp-44h]@1
  char v12; // [sp+18h] [bp-40h]@2
  int v13; // [sp+1Ch] [bp-3Ch]@2
  char v14; // [sp+20h] [bp-38h]@2
  char v15; // [sp+24h] [bp-34h]@4
  char v16; // [sp+28h] [bp-30h]@4
  char v17; // [sp+2Ch] [bp-2Ch]@8
  int v18; // [sp+30h] [bp-28h]@8
  char v19; // [sp+34h] [bp-24h]@8
  char v20; // [sp+38h] [bp-20h]@9
  int v21; // [sp+3Ch] [bp-1Ch]@1

  v21 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    v13 = i - 1;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v12,
      (int)&a1,
      (int)&v13);
    v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v12);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v14,
      (int)&a1,
      (int)&i);
    v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v14);
    if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>(
                            (std::string *)v5,
                            (std::string *)v4) )
      --i;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v15,
      (int)&a1,
      (int)&i);
    v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v15);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v16,
      (int)&a1,
      (int)&a2);
    v7 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v16);
    std::string::operator=(v7, v6);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    v18 = i - 1;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v17,
      (int)&a1,
      (int)&v18);
    v8 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v17);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v19,
      (int)&a1,
      (int)&a2);
    v9 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v19);
    std::string::operator=(v9, v8);
    a2 = i - 1;
  }
  std::string::string((std::string *)&v20, a4);
  std::__push_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(
    a1,
    a2,
    v21,
    (std::string *)&v20);
  return std::string::~string((std::string *)&v20);
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804C772) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1, char a2)
{
  int v2; // ebx@1
  int v3; // eax@1

  v2 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
  v3 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a1);
  return std::swap<char,std::char_traits<char>,std::allocator<char>>((std::string *)v3, (std::string *)v2);
}

//----- (0804C7A3) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804C7B5) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,true>::_S_base(a1);
}

//----- (0804C7C8) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804C81D) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804C83E) --------------------------------------------------------
std::string *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3)
{
  std::string *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (std::string *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::string>(v5);
    result = std::_Construct<std::string,std::string>((void *)v4, a3);
    --a2;
    v5 += 4;
  }
  return result;
}

//----- (0804C8AC) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804C8B4) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804C8C7) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804C8E9) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804C92D) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804C94E) --------------------------------------------------------
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804C956) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804C97C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2)
{
  int v2; // ST04_4@3
  void *v3; // ST00_4@3
  int v4; // ST08_4@3
  void *v5; // ebx@6
  int v6; // esi@6
  int v7; // eax@6
  int v8; // edi@6
  int v9; // esi@6
  int v10; // ST1C_4@6
  int v11; // eax@6
  int v13; // [sp+2Ch] [bp-3Ch]@3
  int v14; // [sp+30h] [bp-38h]@3
  int v15; // [sp+34h] [bp-34h]@5
  int v16; // [sp+38h] [bp-30h]@5
  int v17; // [sp+3Ch] [bp-2Ch]@5
  int v18; // [sp+40h] [bp-28h]@5
  int v19; // [sp+44h] [bp-24h]@5
  int v20; // [sp+48h] [bp-20h]@3
  unsigned int v21; // [sp+4Ch] [bp-1Ch]@2

  if ( a2 != a1 )
  {
    v21 = std::vector<int,std::allocator<int>>::size(a2);
    if ( std::vector<int,std::allocator<int>>::capacity(a1) < v21 )
    {
      std::vector<int,std::allocator<int>>::end((int)&v13, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v14, a2);
      v20 = std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(
              a1,
              v21,
              v14,
              v13);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v2 = *(_DWORD *)(a1 + 4);
      v3 = *(void **)a1;
      std::_Destroy<int *,int>();
      v4 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * v21;
    }
    else if ( std::vector<int,std::allocator<int>>::size(a1) >= v21 )
    {
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      std::vector<int,std::allocator<int>>::end((int)&v15, a1);
      std::vector<int,std::allocator<int>>::begin((int)&v16, a1);
      std::vector<int,std::allocator<int>>::end((int)&v17, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v18, a2);
      std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
        (int)&v19,
        v18,
        v17,
        v16);
      std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
    }
    else
    {
      v5 = *(void **)a1;
      v6 = *(_DWORD *)a2;
      v7 = std::vector<int,std::allocator<int>>::size(a1);
      std::copy<int *,int *>(*(_DWORD *)a2, v6 + 4 * v7, (int)v5);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v8 = *(_DWORD *)(a1 + 4);
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)a2;
      v11 = std::vector<int,std::allocator<int>>::size(a1);
      std::__uninitialized_copy_a<int *,int *,int>(v10 + 4 * v11, v9, v8);
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)a1 + 4 * v21;
  }
  return a1;
}

//----- (0804CBC2) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804CC30) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
}

//----- (0804CC44) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804CC4C) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804CC56) --------------------------------------------------------
std::string *__cdecl std::_Construct<std::string,std::string>(void *a1, std::string *a2)
{
  std::string *result; // eax@1

  result = (std::string *)operator new(4u, a1);
  if ( result )
    result = (std::string *)std::string::string(result, a2);
  return result;
}

//----- (0804CCAB) --------------------------------------------------------
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,int,std::string>(char a1, int a2, int a3, std::string *a4)
{
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // eax@4
  bool v7; // al@5
  int v8; // eax@8
  int i; // [sp+1Ch] [bp-2Ch]@1
  char v11; // [sp+20h] [bp-28h]@2
  char v12; // [sp+24h] [bp-24h]@2
  char v13; // [sp+28h] [bp-20h]@4
  char v14; // [sp+2Ch] [bp-1Ch]@8

  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v7 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
        (int)&v13,
        (int)&a1,
        (int)&i);
      v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v13);
      if ( (unsigned __int8)std::operator<<char,std::char_traits<char>,std::allocator<char>>((std::string *)v6, a4) )
        v7 = 1;
    }
    if ( !v7 )
      break;
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v11,
      (int)&a1,
      (int)&i);
    v4 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v11);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
      (int)&v12,
      (int)&a1,
      (int)&a2);
    v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v12);
    std::string::operator=(v5, v4);
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator+(
    (int)&v14,
    (int)&a1,
    (int)&a2);
  v8 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&v14);
  return std::string::operator=(v8, a4);
}
// 8048A60: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804CDDD) --------------------------------------------------------
int __cdecl std::swap<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2)
{
  return std::string::swap(a1, a2);
}

//----- (0804CDF7) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a1);
}

//----- (0804CE0C) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804CE44) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804CE56) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804CE69) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804CE8E) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v3, a1);
    a1 += 12;
    v5 += 12;
  }
  return v5;
}

//----- (0804CF02) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = -1431655765 * ((a2 - a1) >> 2); i > 0; --i )
  {
    a2 -= 12;
    a3 -= 12;
    std::vector<int,std::allocator<int>>::operator=(a3, a2);
  }
  return a3;
}

//----- (0804CF64) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
}

//----- (0804CF7E) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4)
{
  int v4; // ST1C_4@1

  v4 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
    a3,
    a4,
    v4);
  return v4;
}

//----- (0804D004) --------------------------------------------------------
int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804D05E) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>()
{
  std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804D078) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804D0CD) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804D111) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804D126) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804D16F) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  char *v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_a<false,int const*,int *>((void *)v6, v5, (void *)v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804D1CD) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804D1E7) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804D20C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804D214) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804D227) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  ;
}

//----- (0804D22C) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804D242) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (0804D2A0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804D2B0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804D30A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804D310) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_8050004;
  v3 = (void (__cdecl *)())off_8050004;
  if ( off_8050004 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 8050004: using guessed type int (*off_8050004)();

//----- (0804D338) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 254 function(s)"
