/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// FILE *freopen(const char *filename, const char *modes, FILE *stream);
// int printf(const char *format, ...);
// void *memmove(void *dest, const void *src, size_t n);
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl gao(int a1);
int solve(void);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_a();
int __cdecl std::__lg(int a1);
int __cdecl std::sort<int *>(int a1, unsigned int a2);
int __cdecl std::unique<int *>(int a1, int a2);
int __cdecl std::__introsort_loop<int *,int>(int a1, unsigned int a2, int a3);
int __cdecl std::__final_insertion_sort<int *>(int a1, int a2);
int __cdecl std::adjacent_find<int *>(int a1, int a2);
int __cdecl std::partial_sort<int *>(int a1, int a2, unsigned int a3);
int __cdecl std::__unguarded_partition_pivot<int *>(int a1, int a2);
int __cdecl std::__insertion_sort<int *>(int a1, int a2);
int __cdecl std::__unguarded_insertion_sort<int *>(int a1, int a2);
int *__cdecl std::__heap_select<int *>(int a1, int a2, unsigned int a3);
int __cdecl std::sort_heap<int *>(int a1, int a2);
int __cdecl std::__move_median_first<int *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_partition<int *,int>(int a1, int a2, int a3);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_linear_insert<int *>(int a1);
int __cdecl std::make_heap<int *>(int a1, int a2);
int __cdecl std::__pop_heap<int *>(int a1, int a2, int *a3);
int __cdecl std::iter_swap<int *,int *>(int a1, int a2);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
int __cdecl std::__adjust_heap<int *,int,int>(int a1, int a2, int a3, int a4);
int __cdecl std::__iter_swap<true>::iter_swap<int *,int *>(int a1, int a2);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
int __cdecl std::__push_heap<int *,int,int>(int a1, int a2, int a3, int a4);
int __cdecl std::swap<int>(int a1, int a2);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804A9AC)() = &GLOBAL__sub_I_a; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
int p[] = { 1 }; // weak
FILE *stdin; // idb
FILE *stdout; // idb
char completed_3328; // weak
int dtor_idx_3330; // weak
int a[]; // weak
_UNKNOWN unk_804AB84; // weak
int A; // weak
int B; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (0804859C) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80485F0: using guessed type int __gmon_start__(void);

//----- (08048690) --------------------------------------------------------
#error "8048693: positive sp value has been found (funcsize=2)"

//----- (080486C0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 80486C0: could not find valid save-restore pair for ebp

//----- (080486F0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80486F0: could not find valid save-restore pair for ebp

//----- (08048730) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804A9B4: using guessed type int _DTOR_LIST__[];
// 804AB64: using guessed type char completed_3328;
// 804AB68: using guessed type int dtor_idx_3330;

//----- (08048780) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048780: could not find valid save-restore pair for ebp

//----- (080487B0) --------------------------------------------------------
int __cdecl gao(int a1)
{
  int v2; // [sp+1Ch] [bp-2Ch]@7
  int i; // [sp+20h] [bp-28h]@1
  signed int v4; // [sp+24h] [bp-24h]@1
  signed int j; // [sp+28h] [bp-20h]@4
  signed int k; // [sp+28h] [bp-20h]@7
  int v7; // [sp+2Ch] [bp-1Ch]@1

  v7 = 0;
  v4 = 0;
  for ( i = a1; i; i /= 10 )
    ++v4;
  for ( j = 1; j < v4; ++j )
    a[j] = a1 / p[j] + p[v4 - j] * (a1 % p[j]);
  std::sort<int *>((int)&unk_804AB84, 4 * v4 + 134523776);
  v2 = (std::unique<int *>((int)&unk_804AB84, 4 * v4 + 134523776) - (signed int)&unk_804AB84) >> 2;
  for ( k = 1; k <= v2; ++k )
  {
    if ( a[k] > a1 && a[k] <= B )
      ++v7;
  }
  return v7;
}
// 804AB00: using guessed type int p[];
// 804AB80: using guessed type int a[];
// 804ABB0: using guessed type int B;

//----- (080488DF) --------------------------------------------------------
int solve(void)
{
  int i; // [sp+18h] [bp-10h]@1
  int v2; // [sp+1Ch] [bp-Ch]@1

  v2 = 0;
  for ( i = A; i <= B; ++i )
    v2 += gao(i);
  return v2;
}
// 804ABAC: using guessed type int A;
// 804ABB0: using guessed type int B;

//----- (08048916) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  signed int v5; // [sp+18h] [bp-8h]@1
  signed int i; // [sp+1Ch] [bp-4h]@1

  freopen("C-small-attempt0.in", "r", stdin);
  freopen("C.out", "w", stdout);
  scanf("%d", &v5);
  for ( i = 1; i <= v5; ++i )
  {
    scanf("%d%d", &A, &B);
    v3 = solve();
    printf("Case #%d: %d\n", i, v3);
  }
  return 0;
}
// 804ABAC: using guessed type int A;
// 804ABB0: using guessed type int B;

//----- (080489CF) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80485E0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048A0E) --------------------------------------------------------
int GLOBAL__sub_I_a()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048A2A) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048A42) --------------------------------------------------------
int __cdecl std::sort<int *>(int a1, unsigned int a2)
{
  int result; // eax@1
  int v3; // eax@2

  result = a1;
  if ( a1 != a2 )
  {
    v3 = std::__lg((signed int)(a2 - a1) >> 2);
    std::__introsort_loop<int *,int>(a1, a2, 2 * v3);
    result = std::__final_insertion_sort<int *>(a1, a2);
  }
  return result;
}

//----- (08048A91) --------------------------------------------------------
int __cdecl std::unique<int *>(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3
  int v4; // [sp+30h] [bp+8h]@1
  int v5; // [sp+30h] [bp+8h]@3

  v4 = std::adjacent_find<int *>(a1, a2);
  if ( v4 == a2 )
  {
    result = a2;
  }
  else
  {
    v3 = v4;
    v5 = v4 + 4;
    while ( 1 )
    {
      v5 += 4;
      if ( v5 == a2 )
        break;
      if ( *(_DWORD *)v3 != *(_DWORD *)v5 )
      {
        v3 += 4;
        *(_DWORD *)v3 = *(_DWORD *)v5;
      }
    }
    result = v3 + 4;
  }
  return result;
}

//----- (08048AFB) --------------------------------------------------------
int __cdecl std::__introsort_loop<int *,int>(int a1, unsigned int a2, int a3)
{
  int result; // eax@3
  int v4; // ST1C_4@4

  while ( 1 )
  {
    result = a2 - a1;
    if ( (signed int)(a2 - a1) <= 67 )
      break;
    if ( !a3 )
      return std::partial_sort<int *>(a1, a2, a2);
    --a3;
    v4 = std::__unguarded_partition_pivot<int *>(a1, a2);
    std::__introsort_loop<int *,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (08048B6C) --------------------------------------------------------
int __cdecl std::__final_insertion_sort<int *>(int a1, int a2)
{
  int result; // eax@2

  if ( a2 - a1 <= 67 )
  {
    result = std::__insertion_sort<int *>(a1, a2);
  }
  else
  {
    std::__insertion_sort<int *>(a1, a1 + 64);
    result = std::__unguarded_insertion_sort<int *>(a1 + 64, a2);
  }
  return result;
}

//----- (08048BC1) --------------------------------------------------------
int __cdecl std::adjacent_find<int *>(int a1, int a2)
{
  int result; // eax@2
  int i; // [sp+Ch] [bp-4h]@3

  if ( a1 == a2 )
  {
    result = a2;
  }
  else
  {
    for ( i = a1; ; a1 = i )
    {
      i += 4;
      if ( i == a2 )
        break;
      if ( *(_DWORD *)a1 == *(_DWORD *)i )
        return a1;
    }
    result = a2;
  }
  return result;
}

//----- (08048C0B) --------------------------------------------------------
int __cdecl std::partial_sort<int *>(int a1, int a2, unsigned int a3)
{
  std::__heap_select<int *>(a1, a2, a3);
  return std::sort_heap<int *>(a1, a2);
}

//----- (08048C3E) --------------------------------------------------------
int __cdecl std::__unguarded_partition_pivot<int *>(int a1, int a2)
{
  std::__move_median_first<int *>(
    a1,
    4 * ((signed int)(((unsigned int)(a2 - a1) >> 31) + ((a2 - a1) >> 2)) >> 1) + a1,
    a2 - 4);
  return std::__unguarded_partition<int *,int>(a1 + 4, a2, a1);
}

//----- (08048CA3) --------------------------------------------------------
int __cdecl std::__insertion_sort<int *>(int a1, int a2)
{
  int result; // eax@1
  int v3; // ST18_4@4
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a1 + 4; ; i += 4 )
    {
      result = i;
      if ( i == a2 )
        break;
      if ( *(_DWORD *)i >= *(_DWORD *)a1 )
      {
        std::__unguarded_linear_insert<int *>(i);
      }
      else
      {
        v3 = *(_DWORD *)i;
        std::copy_backward<int *,int *>(a1, i, i + 4);
        *(_DWORD *)a1 = v3;
      }
    }
  }
  return result;
}

//----- (08048D13) --------------------------------------------------------
int __cdecl std::__unguarded_insertion_sort<int *>(int a1, int a2)
{
  int result; // eax@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; i += 4 )
  {
    result = i;
    if ( i == a2 )
      break;
    std::__unguarded_linear_insert<int *>(i);
  }
  return result;
}

//----- (08048D3A) --------------------------------------------------------
int *__cdecl std::__heap_select<int *>(int a1, int a2, unsigned int a3)
{
  int *result; // eax@5
  int *i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<int *>(a1, a2);
  for ( i = (int *)a2; ; ++i )
  {
    result = i;
    if ( (unsigned int)i >= a3 )
      break;
    if ( *i < *(_DWORD *)a1 )
      std::__pop_heap<int *>(a1, a2, i);
  }
  return result;
}

//----- (08048D8F) --------------------------------------------------------
int __cdecl std::sort_heap<int *>(int a1, int a2)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a2 - a1;
    if ( a2 - a1 <= 7 )
      break;
    a2 -= 4;
    std::__pop_heap<int *>(a1, a2, (int *)a2);
  }
  return result;
}

//----- (08048DC5) --------------------------------------------------------
int __cdecl std::__move_median_first<int *>(int a1, int a2, int a3)
{
  int result; // eax@3

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
  {
    result = *(_DWORD *)a3;
    if ( *(_DWORD *)a1 >= *(_DWORD *)a3 )
    {
      if ( *(_DWORD *)a2 >= *(_DWORD *)a3 )
        result = std::iter_swap<int *,int *>(a1, a2);
      else
        result = std::iter_swap<int *,int *>(a1, a3);
    }
  }
  else if ( *(_DWORD *)a2 >= *(_DWORD *)a3 )
  {
    result = *(_DWORD *)a3;
    if ( *(_DWORD *)a1 < *(_DWORD *)a3 )
      result = std::iter_swap<int *,int *>(a1, a3);
  }
  else
  {
    result = std::iter_swap<int *,int *>(a1, a2);
  }
  return result;
}

//----- (08048E63) --------------------------------------------------------
int __cdecl std::__unguarded_partition<int *,int>(int a1, int a2, int a3)
{
  while ( 1 )
  {
    while ( *(_DWORD *)a1 < *(_DWORD *)a3 )
      a1 += 4;
    for ( a2 -= 4; *(_DWORD *)a3 < *(_DWORD *)a2; a2 -= 4 )
      ;
    if ( a1 >= (unsigned int)a2 )
      break;
    std::iter_swap<int *,int *>(a1, a2);
    a1 += 4;
  }
  return a1;
}

//----- (08048EBD) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (08048EF5) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<int *>(int a1)
{
  int result; // eax@4
  int v2; // [sp+8h] [bp-8h]@1
  int i; // [sp+Ch] [bp-4h]@1

  v2 = *(_DWORD *)a1;
  for ( i = a1 - 4; *(_DWORD *)i > v2; i -= 4 )
  {
    *(_DWORD *)a1 = *(_DWORD *)i;
    a1 = i;
  }
  result = a1;
  *(_DWORD *)a1 = v2;
  return result;
}

//----- (08048F37) --------------------------------------------------------
int __cdecl std::make_heap<int *>(int a1, int a2)
{
  int result; // eax@1
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a2 - a1;
  if ( a2 - a1 > 7 )
  {
    for ( i = (((a2 - a1) >> 2) - 2) / 2; ; --i )
    {
      result = std::__adjust_heap<int *,int,int>(a1, i, (a2 - a1) >> 2, *(_DWORD *)(4 * i + a1));
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (08048FB3) --------------------------------------------------------
int __cdecl std::__pop_heap<int *>(int a1, int a2, int *a3)
{
  int v3; // ST1C_4@1

  v3 = *a3;
  *a3 = *(_DWORD *)a1;
  return std::__adjust_heap<int *,int,int>(a1, 0, (a2 - a1) >> 2, v3);
}

//----- (08048FF8) --------------------------------------------------------
int __cdecl std::iter_swap<int *,int *>(int a1, int a2)
{
  return std::__iter_swap<true>::iter_swap<int *,int *>(a1, a2);
}

//----- (08049012) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (08049025) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (08049069) --------------------------------------------------------
int __cdecl std::__adjust_heap<int *,int,int>(int a1, int a2, int a3, int a4)
{
  int v4; // ST1C_4@8
  int v6; // [sp+18h] [bp-10h]@1
  int i; // [sp+1Ch] [bp-Ch]@1

  v6 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    if ( *(_DWORD *)(4 * i + a1) < *(_DWORD *)(4 * (i + 0x3FFFFFFF) + a1) )
      --i;
    *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * i + a1);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    v4 = 2 * (i + 1);
    *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * (v4 + 0x3FFFFFFF) + a1);
    a2 = v4 - 1;
  }
  return std::__push_heap<int *,int,int>(a1, a2, v6, a4);
}

//----- (08049165) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<int *,int *>(int a1, int a2)
{
  return std::swap<int>(a1, a2);
}

//----- (0804917F) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049187) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804919A) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (080491BF) --------------------------------------------------------
int __cdecl std::__push_heap<int *,int,int>(int a1, int a2, int a3, int a4)
{
  int result; // eax@5
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - 1) / 2; a2 > a3 && *(_DWORD *)(4 * i + a1) < a4; i = (i - 1) / 2 )
  {
    *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * i + a1);
    a2 = i;
  }
  result = a4;
  *(_DWORD *)(a1 + 4 * a2) = a4;
  return result;
}

//----- (08049243) --------------------------------------------------------
int __cdecl std::swap<int>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (08049265) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (080492C0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (080492D0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804932A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049330) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804A9AC;
  v3 = (void (__cdecl *)())off_804A9AC;
  if ( off_804A9AC != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804A9AC: using guessed type int (*off_804A9AC)();

//----- (08049358) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 45 function(s)"
