/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD std::string::string(std::string *this); idb
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __gmon_start__(void); weak
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// int __cdecl __popcountdi2(_DWORD, _DWORD); weak
// int __cdecl std::operator>><char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::string::~string(std::string *this); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
int __cdecl std::__lg(int a1);
unsigned __int64 __cdecl mymin(unsigned __int64 a1, unsigned __int64 a2);
int __cdecl std::sort<unsigned long long *>(int a1, unsigned int a2);
int __cdecl std::__introsort_loop<unsigned long long *,int>(int a1, unsigned int a2, int a3);
int __cdecl std::__final_insertion_sort<unsigned long long *>(int a1, int a2);
int __cdecl std::partial_sort<unsigned long long *>(int a1, int a2, unsigned int a3);
int __cdecl std::__unguarded_partition_pivot<unsigned long long *>(int a1, int a2);
int __cdecl std::__insertion_sort<unsigned long long *>(int a1, int a2);
int __cdecl std::__unguarded_insertion_sort<unsigned long long *>(int a1, int a2);
int __cdecl std::__heap_select<unsigned long long *>(int a1, int a2, unsigned int a3);
int __cdecl std::sort_heap<unsigned long long *>(int a1, int a2);
int __cdecl std::__move_median_first<unsigned long long *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_partition<unsigned long long *,unsigned long long>(int a1, int a2, int a3);
int __cdecl std::copy_backward<unsigned long long *,unsigned long long *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_linear_insert<unsigned long long *>(int a1);
int __cdecl std::make_heap<unsigned long long *>(int a1, int a2);
int __cdecl std::__pop_heap<unsigned long long *>(int a1, int a2, int a3);
int __cdecl std::iter_swap<unsigned long long *,unsigned long long *>(int a1, int a2);
int __cdecl std::__miter_base<unsigned long long *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,unsigned long long *,unsigned long long *>(int a1, int a2, int a3);
int __cdecl std::__adjust_heap<unsigned long long *,int,unsigned long long>(int a1, int a2, int a3, unsigned __int64 a4);
int __cdecl std::__iter_swap<true>::iter_swap<unsigned long long *,unsigned long long *>(int a1, int a2);
int __cdecl std::_Iter_base<unsigned long long *,false>::_S_base(int a1);
int __cdecl std::__niter_base<unsigned long long *>(int a1);
int __cdecl std::__copy_move_backward_a<false,unsigned long long *,unsigned long long *>(void *src, int, int); // idb
int __cdecl std::__push_heap<unsigned long long *,int,unsigned long long>(int a1, int a2, int a3, unsigned __int64 a4);
int __cdecl std::swap<unsigned long long>(int a1, int a2);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<unsigned long long>(void *src, int, int); // idb
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804B190)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080487DC) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048860: using guessed type int __gmon_start__(void);

//----- (08048950) --------------------------------------------------------
#error "8048953: positive sp value has been found (funcsize=2)"

//----- (08048980) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048980: could not find valid save-restore pair for ebp

//----- (080489B0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80489B0: could not find valid save-restore pair for ebp

//----- (080489F0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804B198: using guessed type int _DTOR_LIST__[];
// 804B42C: using guessed type char completed_3328;
// 804B430: using guessed type int dtor_idx_3330;

//----- (08048A40) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048A40: could not find valid save-restore pair for ebp

//----- (08048A70) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  int v4; // eax@3
  unsigned __int64 v5; // rax@5
  int v6; // ecx@5
  int v7; // eax@11
  unsigned __int64 v8; // rax@13
  int v9; // ecx@13
  int v10; // ebx@25
  int v11; // eax@26
  int v12; // esi@26
  int v13; // eax@37
  int v14; // eax@41
  int v15; // eax@41
  int v16; // eax@41
  int v17; // eax@41
  int v18; // eax@42
  int v19; // eax@42
  int v20; // eax@42
  int v21; // eax@42
  int v23; // [sp+20h] [bp-133Ch]@3
  int v24; // [sp+24h] [bp-1338h]@3
  int v25; // [sp+660h] [bp-CFCh]@11
  int v26; // [sp+664h] [bp-CF8h]@11
  int v27; // [sp+CA0h] [bp-6BCh]@26
  int v28; // [sp+CA4h] [bp-6B8h]@26
  int v29; // [sp+12E4h] [bp-78h]@11
  int v30; // [sp+12E8h] [bp-74h]@3
  unsigned __int64 v31; // [sp+12ECh] [bp-70h]@2
  int v32; // [sp+12F0h] [bp-6Ch]@2
  signed int v33; // [sp+12F4h] [bp-68h]@1
  int v34; // [sp+12F8h] [bp-64h]@25
  int v35; // [sp+12FCh] [bp-60h]@25
  int mm; // [sp+1304h] [bp-58h]@31
  char v37; // [sp+130Bh] [bp-51h]@31
  int ll; // [sp+130Ch] [bp-50h]@28
  int kk; // [sp+1310h] [bp-4Ch]@25
  int jj; // [sp+1314h] [bp-48h]@24
  int ii; // [sp+1318h] [bp-44h]@21
  int n; // [sp+131Ch] [bp-40h]@18
  __int64 v43; // [sp+1320h] [bp-3Ch]@18
  char v44; // [sp+132Fh] [bp-2Dh]@18
  unsigned __int64 m; // [sp+1330h] [bp-2Ch]@11
  int l; // [sp+133Ch] [bp-20h]@10
  unsigned __int64 k; // [sp+1340h] [bp-1Ch]@3
  int j; // [sp+1348h] [bp-14h]@2
  signed int i; // [sp+134Ch] [bp-10h]@1

  std::istream::operator>>(&std::cin, &v33);
  for ( i = 1; i <= v33; ++i )
  {
    v3 = std::istream::operator>>(&std::cin, &v32);
    std::istream::operator>>(v3, &v31);
    for ( j = 0; j < v32; ++j )
    {
      std::string::string((std::string *)&v30);
      std::operator>><char,std::char_traits<char>,std::allocator<char>>(&std::cin, &v30);
      v4 = j;
      *(&v23 + 2 * j) = 0;
      *(&v24 + 2 * v4) = 0;
      for ( k = 0LL; (signed int)v31 > k; ++k )
      {
        if ( *(_BYTE *)std::string::operator[](&v30, v31 - k - 1) == 49 )
        {
          v5 = __PAIR__(*(&v24 + 2 * j), *(&v23 + 2 * j)) + (1LL << k);
          v6 = j;
          *(&v23 + 2 * j) = v5;
          *(&v24 + 2 * v6) = HIDWORD(v5);
        }
      }
      std::string::~string((std::string *)&v30);
    }
    for ( l = 0; l < v32; ++l )
    {
      std::string::string((std::string *)&v29);
      std::operator>><char,std::char_traits<char>,std::allocator<char>>(&std::cin, &v29);
      v7 = l;
      *(&v25 + 2 * l) = 0;
      *(&v26 + 2 * v7) = 0;
      for ( m = 0LL; (signed int)v31 > m; ++m )
      {
        if ( *(_BYTE *)std::string::operator[](&v29, v31 - m - 1) == 49 )
        {
          v8 = __PAIR__(*(&v26 + 2 * l), *(&v25 + 2 * l)) + (1LL << m);
          v9 = l;
          *(&v25 + 2 * l) = v8;
          *(&v26 + 2 * v9) = HIDWORD(v8);
        }
      }
      std::string::~string((std::string *)&v29);
    }
    std::sort<unsigned long long *>((int)&v25, (unsigned int)(&v25 + 2 * v32));
    v44 = 0;
    v43 = 100LL;
    for ( n = 0; n < v32; ++n )
      ;
    for ( ii = 0; ii < v32; ++ii )
      ;
    for ( jj = 0; jj < v32; ++jj )
    {
      v10 = *(&v24 + 2 * jj);
      v34 = v25 ^ *(&v23 + 2 * jj);
      v35 = v26 ^ v10;
      for ( kk = 0; kk < v32; ++kk )
      {
        v11 = kk;
        v12 = v35 ^ *(&v24 + 2 * kk);
        *(&v27 + 2 * kk) = v34 ^ *(&v23 + 2 * kk);
        *(&v28 + 2 * v11) = v12;
      }
      std::sort<unsigned long long *>((int)&v27, (unsigned int)(&v27 + 2 * v32));
      for ( ll = 0; ll < v32; ++ll )
        ;
      v37 = 1;
      for ( mm = 0; mm < v32; ++mm )
      {
        if ( *(&v26 + 2 * mm) ^ *(&v28 + 2 * mm) | *(&v27 + 2 * mm) ^ *(&v25 + 2 * mm) )
        {
          v37 = 0;
          break;
        }
      }
      if ( v37 )
      {
        v44 = 1;
        v13 = __popcountdi2(v34, v35);
        v43 = mymin(v43, v13);
      }
    }
    if ( v44 )
    {
      v14 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
      v15 = std::ostream::operator<<(v14, i);
      v16 = std::operator<<<std::char_traits<char>>(v15, ": ");
      v17 = std::ostream::operator<<(v16, v43, HIDWORD(v43));
      std::ostream::operator<<(v17, (const char *)&std::endl<char,std::char_traits<char>>);
    }
    else
    {
      v18 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
      v19 = std::ostream::operator<<(v18, i);
      v20 = std::operator<<<std::char_traits<char>>(v19, ": ");
      v21 = std::operator<<<std::char_traits<char>>(v20, "NOT POSSIBLE");
      std::ostream::operator<<(v21, (const char *)&std::endl<char,std::char_traits<char>>);
    }
  }
  return 0;
}
// 7: found interdependent unknown calls
// 8048830: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048850: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD);
// 8048870: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 80488B0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 80488C0: using guessed type int __cdecl __popcountdi2(_DWORD, _DWORD);
// 80488D0: using guessed type int __cdecl std::operator>><char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD);
// 80488F0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048910: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);

//----- (0804910D) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048840: using guessed type int __cxa_atexit(const char *, ...);

//----- (0804914C) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049168) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08049180) --------------------------------------------------------
unsigned __int64 __cdecl mymin(unsigned __int64 a1, unsigned __int64 a2)
{
  unsigned __int64 result; // rax@2

  if ( a1 >= a2 )
    result = a2;
  else
    result = a1;
  return result;
}

//----- (080491C3) --------------------------------------------------------
int __cdecl std::sort<unsigned long long *>(int a1, unsigned int a2)
{
  int result; // eax@1
  int v3; // eax@2

  result = a1;
  if ( a1 != a2 )
  {
    v3 = std::__lg((signed int)(a2 - a1) >> 3);
    std::__introsort_loop<unsigned long long *,int>(a1, a2, 2 * v3);
    result = std::__final_insertion_sort<unsigned long long *>(a1, a2);
  }
  return result;
}

//----- (08049212) --------------------------------------------------------
int __cdecl std::__introsort_loop<unsigned long long *,int>(int a1, unsigned int a2, int a3)
{
  int result; // eax@3
  int v4; // ST1C_4@4

  while ( 1 )
  {
    result = a2 - a1;
    if ( (signed int)(a2 - a1) <= 135 )
      break;
    if ( !a3 )
      return std::partial_sort<unsigned long long *>(a1, a2, a2);
    --a3;
    v4 = std::__unguarded_partition_pivot<unsigned long long *>(a1, a2);
    std::__introsort_loop<unsigned long long *,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (08049285) --------------------------------------------------------
int __cdecl std::__final_insertion_sort<unsigned long long *>(int a1, int a2)
{
  int result; // eax@2

  if ( a2 - a1 <= 135 )
  {
    result = std::__insertion_sort<unsigned long long *>(a1, a2);
  }
  else
  {
    std::__insertion_sort<unsigned long long *>(a1, a1 + 128);
    result = std::__unguarded_insertion_sort<unsigned long long *>(a1 + 128, a2);
  }
  return result;
}

//----- (080492DF) --------------------------------------------------------
int __cdecl std::partial_sort<unsigned long long *>(int a1, int a2, unsigned int a3)
{
  std::__heap_select<unsigned long long *>(a1, a2, a3);
  return std::sort_heap<unsigned long long *>(a1, a2);
}

//----- (08049312) --------------------------------------------------------
int __cdecl std::__unguarded_partition_pivot<unsigned long long *>(int a1, int a2)
{
  std::__move_median_first<unsigned long long *>(
    a1,
    8 * ((signed int)(((unsigned int)(a2 - a1) >> 31) + ((a2 - a1) >> 3)) >> 1) + a1,
    a2 - 8);
  return std::__unguarded_partition<unsigned long long *,unsigned long long>(a1 + 8, a2, a1);
}

//----- (08049377) --------------------------------------------------------
int __cdecl std::__insertion_sort<unsigned long long *>(int a1, int a2)
{
  int result; // eax@1
  unsigned __int64 v3; // rcx@3
  unsigned __int64 v4; // rax@3
  int v5; // ST10_4@4
  int v6; // ST14_4@4
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a1 + 8; ; i += 8 )
    {
      result = i;
      if ( i == a2 )
        break;
      LODWORD(v4) = *(_DWORD *)a1;
      HIDWORD(v3) = *(_DWORD *)(i + 4);
      HIDWORD(v4) = *(_DWORD *)(a1 + 4);
      LODWORD(v3) = *(_DWORD *)i;
      if ( v3 >= v4 )
      {
        std::__unguarded_linear_insert<unsigned long long *>(i);
      }
      else
      {
        v5 = *(_DWORD *)i;
        v6 = *(_DWORD *)(i + 4);
        std::copy_backward<unsigned long long *,unsigned long long *>(a1, i, i + 8);
        *(_DWORD *)a1 = v5;
        *(_DWORD *)(a1 + 4) = v6;
      }
    }
  }
  return result;
}

//----- (08049406) --------------------------------------------------------
int __cdecl std::__unguarded_insertion_sort<unsigned long long *>(int a1, int a2)
{
  int result; // eax@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; i += 8 )
  {
    result = i;
    if ( i == a2 )
      break;
    std::__unguarded_linear_insert<unsigned long long *>(i);
  }
  return result;
}

//----- (0804942D) --------------------------------------------------------
int __cdecl std::__heap_select<unsigned long long *>(int a1, int a2, unsigned int a3)
{
  unsigned __int64 v3; // rcx@2
  unsigned __int64 v4; // rax@2
  int result; // eax@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<unsigned long long *>(a1, a2);
  for ( i = a2; ; i += 8 )
  {
    result = i;
    if ( i >= a3 )
      break;
    LODWORD(v4) = *(_DWORD *)a1;
    HIDWORD(v3) = *(_DWORD *)(i + 4);
    HIDWORD(v4) = *(_DWORD *)(a1 + 4);
    LODWORD(v3) = *(_DWORD *)i;
    if ( v3 < v4 )
      std::__pop_heap<unsigned long long *>(a1, a2, i);
  }
  return result;
}

//----- (08049495) --------------------------------------------------------
int __cdecl std::sort_heap<unsigned long long *>(int a1, int a2)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a2 - a1;
    if ( a2 - a1 <= 15 )
      break;
    a2 -= 8;
    std::__pop_heap<unsigned long long *>(a1, a2, a2);
  }
  return result;
}

//----- (080494CB) --------------------------------------------------------
int __cdecl std::__move_median_first<unsigned long long *>(int a1, int a2, int a3)
{
  unsigned __int64 v3; // rcx@1
  unsigned __int64 v4; // rax@1
  unsigned __int64 v5; // rcx@2
  unsigned __int64 v6; // rax@2
  __int64 v7; // rax@3
  unsigned __int64 v8; // rcx@7
  unsigned __int64 v9; // rax@7

  LODWORD(v4) = *(_DWORD *)a2;
  HIDWORD(v3) = *(_DWORD *)(a1 + 4);
  HIDWORD(v4) = *(_DWORD *)(a2 + 4);
  LODWORD(v3) = *(_DWORD *)a1;
  if ( v3 >= v4 )
  {
    v7 = *(_QWORD *)a3;
    if ( *(_QWORD *)a1 >= *(_QWORD *)a3 )
    {
      LODWORD(v9) = *(_DWORD *)a3;
      HIDWORD(v8) = *(_DWORD *)(a2 + 4);
      HIDWORD(v9) = *(_DWORD *)(a3 + 4);
      LODWORD(v8) = *(_DWORD *)a2;
      if ( v8 >= v9 )
        LODWORD(v7) = std::iter_swap<unsigned long long *,unsigned long long *>(a1, a2);
      else
        LODWORD(v7) = std::iter_swap<unsigned long long *,unsigned long long *>(a1, a3);
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)a3;
    HIDWORD(v5) = *(_DWORD *)(a2 + 4);
    HIDWORD(v6) = *(_DWORD *)(a3 + 4);
    LODWORD(v5) = *(_DWORD *)a2;
    if ( v5 >= v6 )
    {
      v7 = *(_QWORD *)a3;
      if ( *(_QWORD *)a1 < *(_QWORD *)a3 )
        LODWORD(v7) = std::iter_swap<unsigned long long *,unsigned long long *>(a1, a3);
    }
    else
    {
      LODWORD(v7) = std::iter_swap<unsigned long long *,unsigned long long *>(a1, a2);
    }
  }
  return v7;
}

//----- (080495B7) --------------------------------------------------------
int __cdecl std::__unguarded_partition<unsigned long long *,unsigned long long>(int a1, int a2, int a3)
{
  unsigned __int64 v3; // rcx@3
  unsigned __int64 v4; // rax@3
  unsigned __int64 v5; // rcx@6
  unsigned __int64 v6; // rax@6

  while ( 1 )
  {
    while ( 1 )
    {
      LODWORD(v4) = *(_DWORD *)a3;
      HIDWORD(v3) = *(_DWORD *)(a1 + 4);
      HIDWORD(v4) = *(_DWORD *)(a3 + 4);
      LODWORD(v3) = *(_DWORD *)a1;
      if ( v3 >= v4 )
        break;
      a1 += 8;
    }
    for ( a2 -= 8; ; a2 -= 8 )
    {
      LODWORD(v6) = *(_DWORD *)a2;
      HIDWORD(v5) = *(_DWORD *)(a3 + 4);
      HIDWORD(v6) = *(_DWORD *)(a2 + 4);
      LODWORD(v5) = *(_DWORD *)a3;
      if ( v5 >= v6 )
        break;
    }
    if ( a1 >= (unsigned int)a2 )
      break;
    std::iter_swap<unsigned long long *,unsigned long long *>(a1, a2);
    a1 += 8;
  }
  return a1;
}

//----- (08049632) --------------------------------------------------------
int __cdecl std::copy_backward<unsigned long long *,unsigned long long *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<unsigned long long *>(a2);
  v4 = std::__miter_base<unsigned long long *>(a1);
  return std::__copy_move_backward_a2<false,unsigned long long *,unsigned long long *>(v4, v3, a3);
}

//----- (0804966A) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<unsigned long long *>(int a1)
{
  int v1; // edx@2
  int result; // eax@4
  unsigned __int64 v3; // [sp+0h] [bp-10h]@1
  int i; // [sp+Ch] [bp-4h]@1

  v3 = *(_QWORD *)a1;
  for ( i = a1 - 8; *(_QWORD *)i > v3; i -= 8 )
  {
    v1 = *(_DWORD *)(i + 4);
    *(_DWORD *)a1 = *(_DWORD *)i;
    *(_DWORD *)(a1 + 4) = v1;
    a1 = i;
  }
  result = v3;
  *(_QWORD *)a1 = v3;
  return result;
}

//----- (080496CB) --------------------------------------------------------
int __cdecl std::make_heap<unsigned long long *>(int a1, int a2)
{
  int result; // eax@1
  int v3; // eax@3
  int v4; // ST24_4@3
  int i; // [sp+2Ch] [bp-Ch]@2

  result = a2 - a1;
  if ( a2 - a1 > 15 )
  {
    for ( i = (((a2 - a1) >> 3) - 2) / 2; ; --i )
    {
      v3 = 8 * i + a1;
      v4 = *(_DWORD *)(v3 + 4);
      result = std::__adjust_heap<unsigned long long *,int,unsigned long long>(a1, i, (a2 - a1) >> 3, *(_QWORD *)v3);
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (08049754) --------------------------------------------------------
int __cdecl std::__pop_heap<unsigned long long *>(int a1, int a2, int a3)
{
  unsigned __int64 v3; // ST28_8@1
  int v4; // edx@1

  v3 = *(_QWORD *)a3;
  v4 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_DWORD *)(a3 + 4) = v4;
  return std::__adjust_heap<unsigned long long *,int,unsigned long long>(a1, 0, (a2 - a1) >> 3, v3);
}

//----- (080497AE) --------------------------------------------------------
int __cdecl std::iter_swap<unsigned long long *,unsigned long long *>(int a1, int a2)
{
  return std::__iter_swap<true>::iter_swap<unsigned long long *,unsigned long long *>(a1, a2);
}

//----- (080497C8) --------------------------------------------------------
int __cdecl std::__miter_base<unsigned long long *>(int a1)
{
  return std::_Iter_base<unsigned long long *,false>::_S_base(a1);
}

//----- (080497DB) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,unsigned long long *,unsigned long long *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<unsigned long long *>(a3);
  v4 = std::__niter_base<unsigned long long *>(a2);
  v5 = std::__niter_base<unsigned long long *>(a1);
  return std::__copy_move_backward_a<false,unsigned long long *,unsigned long long *>((void *)v5, v4, v3);
}

//----- (0804981F) --------------------------------------------------------
int __cdecl std::__adjust_heap<unsigned long long *,int,unsigned long long>(int a1, int a2, int a3, unsigned __int64 a4)
{
  int v4; // ecx@4
  int v5; // eax@4
  int v6; // edx@4
  int v7; // ST2C_4@8
  int v8; // ecx@8
  int v9; // edx@8
  int v10; // eax@8
  int v11; // edx@8
  int v13; // [sp+28h] [bp-10h]@1
  int i; // [sp+2Ch] [bp-Ch]@1

  v13 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    if ( *(_QWORD *)(8 * i + a1) < *(_QWORD *)(8 * (i + 0x1FFFFFFF) + a1) )
      --i;
    v4 = 8 * a2 + a1;
    v5 = 8 * i + a1;
    v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v6;
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    v7 = 2 * (i + 1);
    v8 = 8 * a2 + a1;
    v9 = 8 * (v7 + 0x1FFFFFFF);
    v10 = v9 + a1;
    v11 = *(_DWORD *)(v9 + a1 + 4);
    *(_DWORD *)v8 = *(_DWORD *)v10;
    *(_DWORD *)(v8 + 4) = v11;
    a2 = v7 - 1;
  }
  return std::__push_heap<unsigned long long *,int,unsigned long long>(a1, a2, v13, a4);
}

//----- (08049953) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<unsigned long long *,unsigned long long *>(int a1, int a2)
{
  return std::swap<unsigned long long>(a1, a2);
}

//----- (0804996D) --------------------------------------------------------
int __cdecl std::_Iter_base<unsigned long long *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049975) --------------------------------------------------------
int __cdecl std::__niter_base<unsigned long long *>(int a1)
{
  return std::_Iter_base<unsigned long long *,false>::_S_base(a1);
}

//----- (08049988) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,unsigned long long *,unsigned long long *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<unsigned long long>(
           src,
           a2,
           a3);
}

//----- (080499AD) --------------------------------------------------------
int __cdecl std::__push_heap<unsigned long long *,int,unsigned long long>(int a1, int a2, int a3, unsigned __int64 a4)
{
  int v4; // ecx@2
  int v5; // eax@2
  int v6; // edx@2
  unsigned __int64 v7; // rax@5
  int i; // [sp+14h] [bp-4h]@1

  for ( i = (a2 - 1) / 2; a2 > a3 && *(_QWORD *)(8 * i + a1) < a4; i = (i - 1) / 2 )
  {
    v4 = 8 * a2 + a1;
    v5 = 8 * i + a1;
    v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v6;
    a2 = i;
  }
  v7 = a4;
  *(_QWORD *)(8 * a2 + a1) = a4;
  return v7;
}

//----- (08049A58) --------------------------------------------------------
int __cdecl std::swap<unsigned long long>(int a1, int a2)
{
  int v2; // ST08_4@1
  int v3; // ST0C_4@1
  int v4; // edx@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  result = v2;
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 4) = v3;
  return result;
}

//----- (08049A8C) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<unsigned long long>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 3;
  if ( v4 )
    memmove((void *)(-8 * v4 + a3), src, 8 * v4);
  return -8 * v4 + a3;
}

//----- (08049AF0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049B00) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (08049B5A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049B60) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804B190;
  v3 = (void (__cdecl *)())off_804B190;
  if ( off_804B190 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804B190: using guessed type int (*off_804B190)();

//----- (08049B88) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 42 function(s)"
