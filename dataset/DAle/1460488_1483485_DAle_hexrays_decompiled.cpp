/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD std::string::string(std::string *this); idb
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __cdecl std::getline<char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD); weak
// int __gmon_start__(void); weak
// _DWORD std::string::c_str(std::string *this); idb
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::string::size(std::string *this); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// int __cdecl std::_Rb_tree_decrement(_DWORD); weak
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::string::~string(std::string *this); idb
// int __cdecl std::string::string(_DWORD, _DWORD, _DWORD); weak
// int __cdecl std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(_DWORD); weak
// int __cdecl std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl std::operator<<<char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD); weak
// int __cdecl std::allocator<char>::~allocator(_DWORD); weak
// int __cdecl std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(_DWORD, _DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// int __cdecl std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(_DWORD, _DWORD, _DWORD); weak
// int __cdecl std::_Rb_tree_increment(_DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
// int sscanf(const char *s, const char *format, ...);
// int __cdecl std::allocator<char>::allocator(_DWORD); weak
// int __cdecl std::string::operator=(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int _tcf_0();
int _tcf_1();
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_inp();
void *__cdecl operator new(unsigned int a1, void *a2);
int __cdecl std::operator|(__int64 a1);
void __cdecl std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map(int a1);
int __cdecl std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::map(int a1);
void std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::~_Rb_tree_impl();
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::~_Rb_tree(int a1);
int __cdecl std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](int a1, int a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree(int a1);
void std::allocator<std::_Rb_tree_node<std::pair<char const,char>>>::~allocator();
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(int a1, void *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_begin(int a1);
// int __userpurge std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::lower_bound@<eax>(int a1, int a2, int a3);
int __stdcall std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::key_comp(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator*(int a1);
bool __cdecl std::less<char>::operator()(int a1, int a2, int a3);
// int __userpurge std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::end@<eax>(int a1, int a2);
bool __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator==(int a1, int a2);
int __cdecl std::pair<char const,char>::pair(int a1, int a2, int a3);
// int __userpurge std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::insert@<eax>(int a1, int a2, char a3, int a4);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::_Rb_tree_impl(int a1);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::~new_allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_left(int a1);
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_destroy_node(int a1, void *a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::lower_bound@<eax>(int a1, int a2, int a3);
int __stdcall std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::key_comp(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::end@<eax>(int a1, int a2);
int __cdecl std::_Rb_tree_const_iterator<std::pair<char const,char>>::_Rb_tree_const_iterator(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_@<eax>(int a1, int a2, char a3, int a4);
void std::allocator<std::_Rb_tree_node<std::pair<char const,char>>>::allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::_M_initialize(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::get_allocator@<eax>(int a1, int a2);
void std::allocator<std::pair<char const,char>>::~allocator();
int __cdecl std::__addressof<std::pair<char const,char>>(int a1);
void __gnu_cxx::new_allocator<std::pair<char const,char>>::destroy();
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_put_node(int a1, void *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_end(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_lower_bound@<eax>(int a1, int a2, int a3, int a4, int a5);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_hint_unique_pos@<eax>(int a1, int a2, char a3, int a4);
int __cdecl std::_Select1st<std::pair<char const,char>>::operator()(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::new_allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_Node_allocator(int a1);
void std::allocator<std::pair<char const,char>>::allocator<std::_Rb_tree_node<std::pair<char const,char>>>();
void __gnu_cxx::new_allocator<std::pair<char const,char>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::deallocate(int a1, void *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(int a1);
// int __userpurge std::_Rb_tree_const_iterator<std::pair<char const,char>>::_M_const_cast@<eax>(int a1, int *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_rightmost(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::size(int a1);
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_leftmost(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator--(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator++(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_create_node(int a1, int a2);
void __gnu_cxx::new_allocator<std::pair<char const,char>>::new_allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_value(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_value(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::begin@<eax>(int a1, int a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_node(int a1);
__int16 __cdecl __gnu_cxx::new_allocator<std::pair<char const,char>>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::allocate(int a1, unsigned int a2);
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::max_size();
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804C348)() = &GLOBAL__sub_I_inp; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char edata; // weak
_UNKNOWN unk_804C4DB; // weak
int dtor_idx_3330; // weak
_UNKNOWN inp; // weak
_UNKNOWN out; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048B98) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048C20: using guessed type int __gmon_start__(void);

//----- (08048DF0) --------------------------------------------------------
#error "8048DF3: positive sp value has been found (funcsize=2)"

//----- (08048E20) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804C4DB - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804C4DB - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048E20: could not find valid save-restore pair for ebp
// 804C4D8: using guessed type char edata;

//----- (08048E50) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048E50: could not find valid save-restore pair for ebp

//----- (08048E90) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804C350: using guessed type int _DTOR_LIST__[];
// 804C4D8: using guessed type char edata;
// 804C4DC: using guessed type int dtor_idx_3330;

//----- (08048EE0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048EE0: could not find valid save-restore pair for ebp

//----- (08048F10) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@3
  int v4; // ebx@3
  unsigned int v5; // ebx@4
  int v6; // eax@7
  const char *v7; // eax@7
  int v8; // ebx@9
  int v9; // eax@9
  unsigned int v10; // ebx@10
  int v11; // ebx@11
  int v12; // eax@11
  int v13; // eax@11
  int v14; // eax@11
  int v15; // eax@11
  int v17; // [sp+1Ch] [bp-268h]@7
  int v18; // [sp+130h] [bp-154h]@7
  int v19; // [sp+248h] [bp-3Ch]@8
  int v20; // [sp+24Ch] [bp-38h]@7
  int v21; // [sp+250h] [bp-34h]@7
  int v22; // [sp+254h] [bp-30h]@1
  char v23; // [sp+26Ch] [bp-18h]@1
  char v24; // [sp+26Dh] [bp-17h]@1
  char v25; // [sp+26Eh] [bp-16h]@1
  char v26; // [sp+26Fh] [bp-15h]@1
  unsigned int l; // [sp+270h] [bp-14h]@8
  int k; // [sp+274h] [bp-10h]@7
  unsigned int j; // [sp+278h] [bp-Ch]@2
  signed int i; // [sp+27Ch] [bp-8h]@1

  std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::map((int)&v22);
  v23 = 121;
  *(_BYTE *)std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](
              (int)&v22,
              (int)&v23) = 97;
  v24 = 101;
  *(_BYTE *)std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](
              (int)&v22,
              (int)&v24) = 111;
  v25 = 113;
  *(_BYTE *)std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](
              (int)&v22,
              (int)&v25) = 122;
  v26 = 122;
  *(_BYTE *)std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](
              (int)&v22,
              (int)&v26) = 113;
  for ( i = 0; i <= 2; ++i )
  {
    for ( j = 0; ; ++j )
    {
      v5 = j;
      if ( v5 >= std::string::size((std::string *)(4 * i + 134530272)) )
        break;
      v3 = std::string::operator[](4 * i + 134530272, j);
      v4 = std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[]((int)&v22, v3);
      *(_BYTE *)v4 = *(_BYTE *)std::string::operator[](4 * i + 134530284, j);
    }
  }
  std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(&v18, "a.in", 8);
  v6 = std::operator|(137438953488LL);
  std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(&v17, "a.out", v6);
  std::string::string((std::string *)&v21);
  std::getline<char,std::char_traits<char>,std::allocator<char>>(&v18, &v21);
  v7 = (const char *)std::string::c_str((std::string *)&v21);
  sscanf(v7, "%d", &v20);
  for ( k = 0; k < v20; ++k )
  {
    std::string::string((std::string *)&v19);
    std::getline<char,std::char_traits<char>,std::allocator<char>>(&v18, &v21);
    std::string::operator=(&v19, &v21);
    for ( l = 0; ; ++l )
    {
      v10 = l;
      if ( v10 >= std::string::size((std::string *)&v21) )
        break;
      v8 = std::string::operator[](&v19, l);
      v9 = std::string::operator[](&v21, l);
      *(_BYTE *)v8 = *(_BYTE *)std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](
                                 (int)&v22,
                                 v9);
    }
    v11 = k + 1;
    v12 = std::operator<<<std::char_traits<char>>(&v17, "Case #");
    v13 = std::ostream::operator<<(v12, v11);
    v14 = std::operator<<<std::char_traits<char>>(v13, ": ");
    v15 = std::operator<<<char,std::char_traits<char>,std::allocator<char>>(v14, &v19);
    std::ostream::operator<<(v15, (const char *)&std::endl<char,std::char_traits<char>>);
    std::string::~string((std::string *)&v19);
  }
  std::string::~string((std::string *)&v21);
  std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(&v17);
  std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(&v18);
  std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map((int)&v22);
  return 0;
}
// 8048BF0: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048C10: using guessed type int __cdecl std::getline<char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD);
// 8048C40: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 8048CB0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048CE0: using guessed type int __cdecl std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(_DWORD);
// 8048CF0: using guessed type int __cdecl std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(_DWORD);
// 8048D20: using guessed type int __cdecl std::operator<<<char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD);
// 8048D40: using guessed type int __cdecl std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(_DWORD, _DWORD, _DWORD);
// 8048D50: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 8048D60: using guessed type int __cdecl std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(_DWORD, _DWORD, _DWORD);
// 8048DE0: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804933E) --------------------------------------------------------
int _tcf_0()
{
  std::string *i; // ebx@1
  int result; // eax@3

  for ( i = (std::string *)&out; (_UNKNOWN *)i != &inp; result = std::string::~string(i) )
    i = (std::string *)((char *)i - 4);
  return result;
}

//----- (08049365) --------------------------------------------------------
int _tcf_1()
{
  std::string *i; // ebx@1
  int result; // eax@3

  for ( i = (std::string *)&std::__ioinit; (_UNKNOWN *)i != &out; result = std::string::~string(i) )
    i = (std::string *)((char *)i - 4);
  return result;
}

//----- (0804938C) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3
  char v3; // [sp+1Ah] [bp-1Eh]@3
  char v4; // [sp+1Bh] [bp-1Dh]@3
  char v5; // [sp+1Ch] [bp-1Ch]@3
  char v6; // [sp+1Dh] [bp-1Bh]@3
  char v7; // [sp+1Eh] [bp-1Ah]@3
  char v8; // [sp+1Fh] [bp-19h]@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    std::allocator<char>::allocator(&v3);
    std::string::string(&inp, "ejp mysljylc kd kxveddknmc re jsicpdrysi", &v3);
    std::allocator<char>::~allocator(&v3);
    std::allocator<char>::allocator(&v4);
    std::string::string((char *)&inp + 4, "rbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd", &v4);
    std::allocator<char>::~allocator(&v4);
    std::allocator<char>::allocator(&v5);
    std::string::string((char *)&inp + 8, "de kr kd eoya kw aej tysr re ujdr lkgc jv", &v5);
    std::allocator<char>::~allocator(&v5);
    __cxa_atexit((const char *)_tcf_0, 0, &_dso_handle);
    std::allocator<char>::allocator(&v6);
    std::string::string(&out, "our language is impossible to understand", &v6);
    std::allocator<char>::~allocator(&v6);
    std::allocator<char>::allocator(&v7);
    std::string::string((char *)&out + 4, "there are twenty six factorial possibilities", &v7);
    std::allocator<char>::~allocator(&v7);
    std::allocator<char>::allocator(&v8);
    std::string::string((char *)&out + 8, "so it is okay if you want to just give up", &v8);
    std::allocator<char>::~allocator(&v8);
    result = __cxa_atexit((const char *)_tcf_1, 0, &_dso_handle);
  }
  return result;
}
// 8048C00: using guessed type int __cxa_atexit(const char *, ...);
// 8048CD0: using guessed type int __cdecl std::string::string(_DWORD, _DWORD, _DWORD);
// 8048D30: using guessed type int __cdecl std::allocator<char>::~allocator(_DWORD);
// 8048DB0: using guessed type int __cdecl std::allocator<char>::allocator(_DWORD);

//----- (080495F9) --------------------------------------------------------
int GLOBAL__sub_I_inp()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049615) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (0804961D) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (0804962A) --------------------------------------------------------
void __cdecl std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::~map(int a1)
{
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::~_Rb_tree(a1);
}

//----- (0804963E) --------------------------------------------------------
int __cdecl std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::map(int a1)
{
  return std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree(a1);
}

//----- (08049652) --------------------------------------------------------
void std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::~_Rb_tree_impl()
{
  std::allocator<std::_Rb_tree_node<std::pair<char const,char>>>::~allocator();
}

//----- (08049666) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::~_Rb_tree(int a1)
{
  int v1; // eax@1

  v1 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_begin(a1);
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(
    a1,
    (void *)v1);
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::~_Rb_tree_impl();
}

//----- (080496B2) --------------------------------------------------------
int __cdecl std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::operator[](int a1, int a2)
{
  int v2; // edi@2
  bool v3; // al@3
  int v5; // [sp+18h] [bp-30h]@6
  char v6; // [sp+1Fh] [bp-29h]@2
  int v7; // [sp+24h] [bp-24h]@1
  char v8; // [sp+28h] [bp-20h]@1
  char v9; // [sp+2Ch] [bp-1Ch]@2
  char v10; // [sp+2Dh] [bp-1Bh]@6
  char v11; // [sp+2Fh] [bp-19h]@6

  std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::lower_bound((int)&v7, a1, a2);
  std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::end((int)&v8, a1);
  v3 = 1;
  if ( !std::_Rb_tree_iterator<std::pair<char const,char>>::operator==((int)&v7, (int)&v8) )
  {
    v2 = std::_Rb_tree_iterator<std::pair<char const,char>>::operator*((int)&v7);
    std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::key_comp((int)&v6);
    if ( !std::less<char>::operator()((int)&v9, a2, v2) )
      v3 = 0;
  }
  if ( v3 )
  {
    v11 = 0;
    std::pair<char const,char>::pair((int)&v10, a2, (int)&v11);
    std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::insert((int)&v5, a1, v7, (int)&v10);
    v7 = v5;
  }
  return std::_Rb_tree_iterator<std::pair<char const,char>>::operator*((int)&v7) + 1;
}

//----- (080497CC) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree(int a1)
{
  return std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::_Rb_tree_impl(a1);
}

//----- (080497E0) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::pair<char const,char>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::~new_allocator();
}

//----- (080497F4) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(int a1, void *a2)
{
  int v2; // eax@2
  int v3; // ST1C_4@2

  while ( a2 )
  {
    v2 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right((int)a2);
    std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_erase(
      a1,
      (void *)v2);
    v3 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_left((int)a2);
    std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_destroy_node(
      a1,
      a2);
    a2 = (void *)v3;
  }
}

//----- (08049844) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_begin(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (08049850) --------------------------------------------------------
int __userpurge std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::lower_bound@<eax>(int a1, int a2, int a3)
{
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::lower_bound(
    a1,
    a2,
    a3);
  return a1;
}

//----- (0804987A) --------------------------------------------------------
int __stdcall std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::key_comp(int a1)
{
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::key_comp(a1);
  return a1;
}

//----- (0804989C) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator*(int a1)
{
  return *(_DWORD *)a1 + 16;
}

//----- (080498AA) --------------------------------------------------------
bool __cdecl std::less<char>::operator()(int a1, int a2, int a3)
{
  return *(_BYTE *)a2 < *(_BYTE *)a3;
}

//----- (080498BE) --------------------------------------------------------
int __userpurge std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::end(
    a1,
    a2);
  return a1;
}

//----- (080498E0) --------------------------------------------------------
bool __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (080498F4) --------------------------------------------------------
int __cdecl std::pair<char const,char>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_BYTE *)a1 = *(_BYTE *)a2;
  result = a1;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)a3;
  return result;
}

//----- (0804990E) --------------------------------------------------------
int __userpurge std::map<char,char,std::less<char>,std::allocator<std::pair<char const,char>>>::insert@<eax>(int a1, int a2, char a3, int a4)
{
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::_Rb_tree_const_iterator<std::pair<char const,char>>::_Rb_tree_const_iterator((int)&v5, (int)&a3);
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_(
    a1,
    a2,
    v5,
    a4);
  return a1;
}

//----- (0804995A) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::_Rb_tree_impl(int a1)
{
  std::allocator<std::_Rb_tree_node<std::pair<char const,char>>>::allocator();
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  return std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::_M_initialize(a1);
}

//----- (080499AA) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::~new_allocator()
{
  ;
}

//----- (080499AF) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right(int a1)
{
  return *(_DWORD *)(a1 + 12);
}

//----- (080499BA) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_left(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (080499C6) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_destroy_node(int a1, void *a2)
{
  char v2; // [sp+1Fh] [bp-9h]@1

  std::__addressof<std::pair<char const,char>>((int)((char *)a2 + 16));
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::get_allocator(
    (int)&v2,
    a1);
  __gnu_cxx::new_allocator<std::pair<char const,char>>::destroy();
  std::allocator<std::pair<char const,char>>::~allocator();
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_put_node(
    a1,
    a2);
}

//----- (08049A24) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::lower_bound@<eax>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_end(a2);
  v4 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_begin(a2);
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_lower_bound(
    a1,
    a2,
    v4,
    v3,
    a3);
  return a1;
}

//----- (08049A72) --------------------------------------------------------
int __stdcall std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::key_comp(int a1)
{
  return a1;
}

//----- (08049A7E) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049AA0) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::pair<char const,char>>::_Rb_tree_const_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049AB0) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_unique_@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@1
  int v6; // [sp+24h] [bp-14h]@1
  int v7; // [sp+28h] [bp-10h]@1
  char v8; // [sp+2Fh] [bp-9h]@1

  v4 = std::_Select1st<std::pair<char const,char>>::operator()((int)&v8, a4);
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_hint_unique_pos(
    (int)&v6,
    a2,
    a3,
    v4);
  if ( v7 )
    std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_(
      a1,
      a2,
      v6,
      v7,
      a4);
  else
    std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(a1, v6);
  return a1;
}

//----- (08049B44) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::pair<char const,char>>>::allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::new_allocator();
}

//----- (08049B58) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_Rb_tree_impl<std::less<char>,false>::_M_initialize(int a1)
{
  int result; // eax@1

  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a1 + 4;
  result = a1;
  *(_DWORD *)(a1 + 16) = a1 + 4;
  return result;
}

//----- (08049B8A) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::get_allocator@<eax>(int a1, int a2)
{
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_Node_allocator(a2);
  std::allocator<std::pair<char const,char>>::allocator<std::_Rb_tree_node<std::pair<char const,char>>>();
  return a1;
}

//----- (08049BB2) --------------------------------------------------------
void std::allocator<std::pair<char const,char>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<char const,char>>::~new_allocator();
}

//----- (08049BC5) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<char const,char>>(int a1)
{
  return a1;
}

//----- (08049BCE) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char const,char>>::destroy()
{
  ;
}

//----- (08049BD4) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_put_node(int a1, void *a2)
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::deallocate(a1, a2);
}

//----- (08049BF6) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_end(int a1)
{
  return a1 + 4;
}

//----- (08049C02) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_lower_bound@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // eax@2

  while ( a3 )
  {
    v5 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(a3);
    if ( !std::less<char>::operator()(a2, v5, a5) )
    {
      a4 = a3;
      a3 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_left(a3);
    }
    else
    {
      a3 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right(a3);
    }
  }
  std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(a1, a4);
  return a1;
}

//----- (08049C76) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = a2;
  return result;
}

//----- (08049C84) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_hint_unique_pos@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // ebx@1
  int v5; // eax@3
  int v6; // eax@3
  bool v7; // al@4
  int v8; // eax@7
  int v9; // eax@9
  int v10; // ebx@10
  int v11; // ebx@11
  int v12; // eax@11
  int v13; // eax@12
  int v14; // eax@12
  int v15; // eax@17
  int v16; // ebx@18
  int v17; // eax@19
  int v18; // eax@20
  int v19; // eax@20
  int v21; // [sp+10h] [bp-28h]@18
  int v22; // [sp+14h] [bp-24h]@10
  int v23; // [sp+18h] [bp-20h]@1
  int v24; // [sp+1Ch] [bp-1Ch]@7
  int v25; // [sp+20h] [bp-18h]@14
  int v26; // [sp+24h] [bp-14h]@19
  int v27; // [sp+28h] [bp-10h]@22
  int v28; // [sp+2Ch] [bp-Ch]@25

  std::_Rb_tree_const_iterator<std::pair<char const,char>>::_M_const_cast((int)&v23, (int *)&a3);
  v4 = v23;
  if ( v4 == std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_end(a2) )
  {
    v7 = 0;
    if ( std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::size(a2) )
    {
      v5 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_rightmost(a2);
      v6 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(*(_DWORD *)v5);
      if ( std::less<char>::operator()(a2, v6, a4) )
        v7 = 1;
    }
    if ( v7 )
    {
      v8 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_rightmost(a2);
      v24 = 0;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v24, v8);
    }
    else
    {
      std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_unique_pos(
        a1,
        a2,
        a4);
    }
  }
  else
  {
    v9 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(v23);
    if ( std::less<char>::operator()(a2, a4, v9) )
    {
      v22 = v23;
      v10 = v23;
      if ( v10 == *(_DWORD *)std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_leftmost(a2) )
      {
        v11 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_leftmost(a2);
        v12 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_leftmost(a2);
        std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, v12, v11);
      }
      else
      {
        v13 = std::_Rb_tree_iterator<std::pair<char const,char>>::operator--((int)&v22);
        v14 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(*(_DWORD *)v13);
        if ( std::less<char>::operator()(a2, v14, a4) )
        {
          if ( std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right(v22) == 0 )
          {
            v25 = 0;
            std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v25, (int)&v22);
          }
          else
          {
            std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v23, (int)&v23);
          }
        }
        else
        {
          std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_unique_pos(
            a1,
            a2,
            a4);
        }
      }
    }
    else
    {
      v15 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(v23);
      if ( std::less<char>::operator()(a2, v15, a4) )
      {
        v21 = v23;
        v16 = v23;
        if ( v16 == *(_DWORD *)std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_rightmost(a2) )
        {
          v17 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_rightmost(a2);
          v26 = 0;
          std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v26, v17);
        }
        else
        {
          v18 = std::_Rb_tree_iterator<std::pair<char const,char>>::operator++((int)&v21);
          v19 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(*(_DWORD *)v18);
          if ( std::less<char>::operator()(a2, a4, v19) )
          {
            if ( std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right(v23) == 0 )
            {
              v27 = 0;
              std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v27, (int)&v23);
            }
            else
            {
              std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v21, (int)&v21);
            }
          }
          else
          {
            std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_unique_pos(
              a1,
              a2,
              a4);
          }
        }
      }
      else
      {
        v28 = 0;
        std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v23, (int)&v28);
      }
    }
  }
  return a1;
}

//----- (08049FBC) --------------------------------------------------------
int __cdecl std::_Select1st<std::pair<char const,char>>::operator()(int a1, int a2)
{
  return a2;
}

//----- (08049FC4) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // esi@3
  int v6; // eax@3
  bool v7; // al@4
  char v9; // [sp+17h] [bp-11h]@3
  int v10; // [sp+18h] [bp-10h]@6
  unsigned __int8 v11; // [sp+1Fh] [bp-9h]@6

  v7 = 1;
  if ( !a3
    && std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_end(a2) != a4 )
  {
    v5 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(a4);
    v6 = std::_Select1st<std::pair<char const,char>>::operator()((int)&v9, a5);
    if ( !std::less<char>::operator()(a2, v6, v5) )
      v7 = 0;
  }
  v11 = v7;
  v10 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_create_node(
          a2,
          a5);
  std::_Rb_tree_insert_and_rebalance(v11, v10, a4, a2 + 4);
  ++*(_DWORD *)(a2 + 20);
  std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(a1, v10);
  return a1;
}
// 8048D10: using guessed type int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0804A0A0) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::new_allocator()
{
  ;
}

//----- (0804A0A6) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_Node_allocator(int a1)
{
  return a1;
}

//----- (0804A0AE) --------------------------------------------------------
void std::allocator<std::pair<char const,char>>::allocator<std::_Rb_tree_node<std::pair<char const,char>>>()
{
  __gnu_cxx::new_allocator<std::pair<char const,char>>::new_allocator();
}

//----- (0804A0C2) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char const,char>>::~new_allocator()
{
  ;
}

//----- (0804A0C8) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A0DB) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_value(a1);
  return std::_Select1st<std::pair<char const,char>>::operator()((int)&v3, v1);
}

//----- (0804A0FE) --------------------------------------------------------
int __userpurge std::_Rb_tree_const_iterator<std::pair<char const,char>>::_M_const_cast@<eax>(int a1, int *a2)
{
  std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(a1, *a2);
  return a1;
}

//----- (0804A120) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_rightmost(int a1)
{
  return a1 + 16;
}

//----- (0804A12B) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_value(a1);
  return std::_Select1st<std::pair<char const,char>>::operator()((int)&v3, v1);
}

//----- (0804A14E) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::size(int a1)
{
  return *(_DWORD *)(a1 + 20);
}

//----- (0804A15A) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804A174) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v4; // eax@3
  int v5; // eax@11
  int v7; // [sp+18h] [bp-30h]@7
  char v8; // [sp+1Ch] [bp-2Ch]@8
  int v9; // [sp+20h] [bp-28h]@9
  int v10; // [sp+24h] [bp-24h]@9
  int v11; // [sp+28h] [bp-20h]@12
  int v12; // [sp+2Ch] [bp-1Ch]@12
  int v13; // [sp+30h] [bp-18h]@13
  bool v14; // [sp+37h] [bp-11h]@1
  int v15; // [sp+38h] [bp-10h]@1
  int v16; // [sp+3Ch] [bp-Ch]@1

  v16 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_begin(a2);
  v15 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_end(a2);
  v14 = 1;
  while ( v16 )
  {
    v15 = v16;
    v3 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(v16);
    v14 = std::less<char>::operator()(a2, a3, v3);
    if ( v14 )
      v4 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_left(v16);
    else
      v4 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_right(v16);
    v16 = v4;
  }
  std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator((int)&v7, v15);
  if ( v14 )
  {
    std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::begin(
      (int)&v8,
      a2);
    if ( std::_Rb_tree_iterator<std::pair<char const,char>>::operator==((int)&v7, (int)&v8) )
    {
      v9 = v15;
      v10 = v16;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v10, (int)&v9);
      return a1;
    }
    std::_Rb_tree_iterator<std::pair<char const,char>>::operator--((int)&v7);
  }
  v5 = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_key(v7);
  if ( std::less<char>::operator()(a2, v5, a3) )
  {
    v11 = v15;
    v12 = v16;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v12, (int)&v11);
  }
  else
  {
    v13 = 0;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v7, (int)&v13);
  }
  return a1;
}

//----- (0804A2D6) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_leftmost(int a1)
{
  return a1 + 12;
}

//----- (0804A2E2) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator--(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_decrement(*(_DWORD *)a1);
  return a1;
}
// 8048C80: using guessed type int __cdecl std::_Rb_tree_decrement(_DWORD);

//----- (0804A300) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,char>>::operator++(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_increment(*(_DWORD *)a1);
  return a1;
}
// 8048D70: using guessed type int __cdecl std::_Rb_tree_increment(_DWORD);

//----- (0804A31E) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_create_node(int a1, int a2)
{
  int v2; // ebx@1
  char v4[5]; // [sp+1Bh] [bp-Dh]@1

  *(_DWORD *)&v4[1] = std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_node(a1);
  v2 = std::__addressof<std::pair<char const,char>>(*(_DWORD *)&v4[1] + 16);
  std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::get_allocator(
    (int)v4,
    a1);
  __gnu_cxx::new_allocator<std::pair<char const,char>>::construct((int)v4, (void *)v2, a2);
  std::allocator<std::pair<char const,char>>::~allocator();
  return *(_DWORD *)&v4[1];
}

//----- (0804A382) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char const,char>>::new_allocator()
{
  ;
}

//----- (0804A387) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804A392) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804A39E) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::pair<char const,char>>::_Rb_tree_iterator(a1, *(_DWORD *)(a2 + 12));
  return a1;
}

//----- (0804A3C0) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,char>,std::_Select1st<std::pair<char const,char>>,std::less<char>,std::allocator<std::pair<char const,char>>>::_M_get_node(int a1)
{
  return __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::allocate(a1, 1u);
}

//----- (0804A3E4) --------------------------------------------------------
__int16 __cdecl __gnu_cxx::new_allocator<std::pair<char const,char>>::construct(int a1, void *a2, int a3)
{
  void *v3; // eax@1
  void *v4; // edx@1

  v3 = operator new(2u, a2);
  v4 = v3;
  if ( v3 )
  {
    LOWORD(v3) = *(_WORD *)a3;
    *(_WORD *)v4 = *(_WORD *)a3;
  }
  return (signed __int16)v3;
}

//----- (0804A40E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(20 * a2);
}

//----- (0804A446) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,char>>>::max_size()
{
  return 214748364;
}

//----- (0804A450) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804A460) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804A4BA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804A4C0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804C348;
  v3 = (void (__cdecl *)())off_804C348;
  if ( off_804C348 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804C348: using guessed type int (*off_804C348)();

//----- (0804A4E8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 82 function(s)"
