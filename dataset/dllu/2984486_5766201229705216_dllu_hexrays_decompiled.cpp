/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD __cdecl operator new[](unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl dfs(int a1, int a2, int a3);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_dp();
void *__cdecl operator new(unsigned int a1, void *a2);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
int __cdecl std::max<int>(int a1, int a2);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<int>::~allocator();
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<int *>();
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
void std::allocator<int>::allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<int *>();
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::destroy();
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804B4B0)() = &GLOBAL__sub_I_dp; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
int dp[]; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080487F4) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048870: using guessed type int __gmon_start__(void);

//----- (080489A0) --------------------------------------------------------
#error "80489A3: positive sp value has been found (funcsize=2)"

//----- (080489D0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 80489D0: could not find valid save-restore pair for ebp

//----- (08048A00) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048A00: could not find valid save-restore pair for ebp

//----- (08048A40) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804B4B8: using guessed type int _DTOR_LIST__[];
// 804B74C: using guessed type char completed_3328;
// 804B750: using guessed type int dtor_idx_3330;

//----- (08048A90) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048A90: could not find valid save-restore pair for ebp

//----- (08048AC0) --------------------------------------------------------
int __cdecl dfs(int a1, int a2, int a3)
{
  int result; // eax@2
  bool v4; // al@7
  int v5; // eax@13
  int v6; // [sp+1Ch] [bp-1Ch]@13
  int v7; // [sp+20h] [bp-18h]@11
  int v8; // [sp+24h] [bp-14h]@11
  int v9; // [sp+28h] [bp-10h]@11
  int v10; // [sp+2Ch] [bp-Ch]@11

  if ( dp[a2] == -1 )
  {
    v4 = (unsigned int)std::vector<int,std::allocator<int>>::size(12 * a2 + a1) <= 2 && a3 != -1
      || (unsigned int)std::vector<int,std::allocator<int>>::size(12 * a2 + a1) <= 1 && a3 == -1;
    if ( v4 )
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v7 = std::vector<int,std::allocator<int>>::size(12 * a2 + a1);
      while ( v8 < v7 )
      {
        if ( *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](12 * a2 + a1, v8) != a3 )
        {
          v5 = std::vector<int,std::allocator<int>>::operator[](12 * a2 + a1, v8);
          v6 = dfs(a1, *(_DWORD *)v5, a2);
          if ( v6 <= v10 )
          {
            if ( v6 > v9 )
              v9 = v6;
          }
          else
          {
            v9 = v10;
            v10 = v6;
          }
        }
        ++v8;
      }
      dp[a2] = v10 + v9 + 1;
      result = dp[a2];
    }
  }
  else
  {
    result = dp[a2];
  }
  return result;
}
// 804B760: using guessed type int dp[];

//----- (08048C3D) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  int v4; // eax@2
  unsigned int v5; // esi@2
  unsigned int v6; // eax@3
  int v7; // ebx@5
  int v8; // eax@9
  int v9; // eax@17
  int v11; // [sp+18h] [bp-44h]@5
  int v12; // [sp+1Ch] [bp-40h]@5
  int v13; // [sp+24h] [bp-38h]@15
  int v14; // [sp+28h] [bp-34h]@9
  int v15; // [sp+2Ch] [bp-30h]@9
  int v16; // [sp+30h] [bp-2Ch]@11
  unsigned int v17; // [sp+34h] [bp-28h]@2
  signed int v18; // [sp+38h] [bp-24h]@1
  int v19; // [sp+3Ch] [bp-20h]@8
  signed int l; // [sp+40h] [bp-1Ch]@12
  int k; // [sp+44h] [bp-18h]@11
  int j; // [sp+48h] [bp-14h]@8
  signed int i; // [sp+4Ch] [bp-10h]@1

  std::istream::operator>>(&std::cin, &v18);
  for ( i = 1; i <= v18; ++i )
  {
    v3 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v4 = std::ostream::operator<<(v3, i);
    std::operator<<<std::char_traits<char>>(v4, ": ");
    std::istream::operator>>(&std::cin, &v17);
    v5 = v17;
    if ( v17 > 0xAA00000 )
      v6 = -1;
    else
      v6 = 12 * v17 + 4;
    v7 = operator new[](v6);
    *(_DWORD *)v7 = v5;
    v12 = v5 - 1;
    v11 = v7 + 4;
    while ( v12 != -1 )
    {
      std::vector<int,std::allocator<int>>::vector(v11);
      v11 += 12;
      --v12;
    }
    v19 = v7 + 4;
    for ( j = 0; (signed int)(v17 - 1) > j; ++j )
    {
      v8 = std::istream::operator>>(&std::cin, &v15);
      std::istream::operator>>(v8, &v14);
      --v15;
      --v14;
      std::vector<int,std::allocator<int>>::push_back(v19 + 12 * v15, (int)&v14);
      std::vector<int,std::allocator<int>>::push_back(v19 + 12 * v14, (int)&v15);
    }
    v16 = 0;
    for ( k = 0; k < (signed int)v17; ++k )
    {
      for ( l = 0; l < (signed int)v17; ++l )
        dp[l] = -1;
      v13 = dfs(v19, k, -1);
      v16 = *(_DWORD *)std::max<int>((int)&v16, (int)&v13);
    }
    v9 = std::ostream::operator<<(&std::cout, v17 - v16);
    std::ostream::operator<<(v9, (const char *)&std::endl<char,std::char_traits<char>>);
  }
  return 0;
}
// 8048850: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 80488D0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048900: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048930: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 804B760: using guessed type int dp[];

//----- (08048ED2) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048860: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048F11) --------------------------------------------------------
int GLOBAL__sub_I_dp()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048F2D) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048F36) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (08048F50) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08048F62) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (08048F76) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08048FCE) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (08049041) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804905C) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049070) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049084) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (080490E4) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080490EC) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049106) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (08049128) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (080493C6) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (080493E8) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049418) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (0804942C) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (08049453) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804946E) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (08049494) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804949C) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (080494D4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (080494DE) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (08049582) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (080495A1) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (080495D2) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049601) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (08049629) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (08049644) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049654) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049668) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804966E) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049681) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (08049686) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (08049699) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (080496DE) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (080496F9) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049714) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (08049744) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (08049766) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804976C) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049771) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049779) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804978C) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (080497B1) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (080497C4) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080497CC) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (080497D6) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (080497F7) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804984C) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804986D) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (080498A5) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (080498E9) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804990E) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (08049960) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049970) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (080499CA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (080499D0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804B4B0;
  v3 = (void (__cdecl *)())off_804B4B0;
  if ( off_804B4B0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804B4B0: using guessed type int (*off_804B4B0)();

//----- (080499F8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 70 function(s)"
