/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int __gmon_start__(void); weak
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// FILE *freopen(const char *filename, const char *modes, FILE *stream);
// int printf(const char *format, ...);
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
char __cdecl check(int a1, int a2);
int Solved(void);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_wNaomi();
int __cdecl std::__lg(int a1);
int __cdecl std::sort<double *>(int a1, unsigned int a2);
int __cdecl std::__introsort_loop<double *,int>(int a1, unsigned int a2, int a3);
int __cdecl std::__final_insertion_sort<double *>(int a1, int a2);
int __cdecl std::partial_sort<double *>(int a1, int a2, unsigned int a3);
int __cdecl std::__unguarded_partition_pivot<double *>(int a1, int a2);
int __cdecl std::__insertion_sort<double *>(int a1, int a2);
int __cdecl std::__unguarded_insertion_sort<double *>(int a1, int a2);
int __cdecl std::__heap_select<double *>(int a1, int a2, unsigned int a3);
int __cdecl std::sort_heap<double *>(int a1, int a2);
void __cdecl std::__move_median_first<double *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_partition<double *,double>(int a1, int a2, int a3);
int __cdecl std::copy_backward<double *,double *>(int a1, int a2, int a3);
double __cdecl std::__unguarded_linear_insert<double *>(int a1);
void __cdecl std::make_heap<double *>(int a1, int a2);
void __cdecl std::__pop_heap<double *>(int a1, int a2, int a3);
int __cdecl std::iter_swap<double *,double *>(int a1, int a2);
int __cdecl std::__miter_base<double *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,double *,double *>(int a1, int a2, int a3);
void __cdecl std::__adjust_heap<double *,int,double>(int a1, int a2, int a3, double a4);
int __cdecl std::__iter_swap<true>::iter_swap<double *,double *>(int a1, int a2);
int __cdecl std::_Iter_base<double *,false>::_S_base(int a1);
int __cdecl std::__niter_base<double *>(int a1);
int __cdecl std::__copy_move_backward_a<false,double *,double *>(void *src, int, int); // idb
double __cdecl std::__push_heap<double *,int,double>(int a1, int a2, int a3, double a4);
int __cdecl std::swap<double>(int a1, int a2);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<double>(void *src, int, int); // idb
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804AA70)() = &GLOBAL__sub_I_wNaomi; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
FILE *stdin; // idb
FILE *stdout; // idb
char completed_3328; // weak
int dtor_idx_3330; // weak
double wNaomi[]; // weak
double wKen[]; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048618) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048680: using guessed type int __gmon_start__(void);

//----- (08048730) --------------------------------------------------------
#error "8048733: positive sp value has been found (funcsize=2)"

//----- (08048760) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048760: could not find valid save-restore pair for ebp

//----- (08048790) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048790: could not find valid save-restore pair for ebp

//----- (080487D0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804AA78: using guessed type int _DTOR_LIST__[];
// 804AC64: using guessed type char completed_3328;
// 804AC68: using guessed type int dtor_idx_3330;

//----- (08048820) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048820: could not find valid save-restore pair for ebp

//----- (08048850) --------------------------------------------------------
char __cdecl check(int a1, int a2)
{
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = a1; i < a2; ++i )
  {
    if ( wKen[i - a1] > (long double)wNaomi[i] )
      return 0;
  }
  return 1;
}
// 804AC80: using guessed type double wNaomi[];
// 804CC80: using guessed type double wKen[];

//----- (08048895) --------------------------------------------------------
int Solved(void)
{
  int v1; // [sp+10h] [bp-28h]@1
  int l; // [sp+14h] [bp-24h]@12
  int v3; // [sp+18h] [bp-20h]@12
  int k; // [sp+1Ch] [bp-1Ch]@7
  int v5; // [sp+20h] [bp-18h]@7
  int v6; // [sp+24h] [bp-14h]@7
  int j; // [sp+28h] [bp-10h]@4
  int i; // [sp+2Ch] [bp-Ch]@1

  std::istream::operator>>(&std::cin, &v1);
  for ( i = 0; i < v1; ++i )
    std::istream::operator>>(&std::cin, 8 * i + 134524032);
  for ( j = 0; j < v1; ++j )
    std::istream::operator>>(&std::cin, 8 * j + 134532224);
  std::sort<double *>((int)wNaomi, 8 * v1 + 134524032);
  std::sort<double *>((int)wKen, 8 * v1 + 134532224);
  v6 = 0;
  v5 = 0;
  for ( k = 0; k < v1; ++k )
  {
    if ( check(k, v1) )
    {
      v6 = v1 - k;
      break;
    }
  }
  v3 = 0;
  v5 = v1;
  for ( l = 0; l < v1 && v3 < v1; ++l )
  {
    while ( v3 < v1 && wNaomi[l] > (long double)wKen[v3] )
      ++v3;
    if ( v3 == v1 )
      break;
    ++v3;
    --v5;
  }
  return printf("%d %d\n", v6, v5);
}
// 8048670: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 80486F0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 804AC80: using guessed type double wNaomi[];
// 804CC80: using guessed type double wKen[];

//----- (08048A0E) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  signed int v4; // [sp+18h] [bp-8h]@1
  signed int i; // [sp+1Ch] [bp-4h]@1

  freopen("D-small-attempt0.in", "r", stdin);
  freopen("D-small-attempt0.out", "w", stdout);
  v4 = 1;
  scanf("%d", &v4);
  for ( i = 1; i <= v4; ++i )
  {
    printf("Case #%d: ", i);
    Solved();
  }
  return 0;
}

//----- (08048AAF) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048660: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048AEE) --------------------------------------------------------
int GLOBAL__sub_I_wNaomi()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048B0A) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048B22) --------------------------------------------------------
int __cdecl std::sort<double *>(int a1, unsigned int a2)
{
  int result; // eax@1
  int v3; // eax@2

  result = a1;
  if ( a1 != a2 )
  {
    v3 = std::__lg((signed int)(a2 - a1) >> 3);
    std::__introsort_loop<double *,int>(a1, a2, 2 * v3);
    result = std::__final_insertion_sort<double *>(a1, a2);
  }
  return result;
}

//----- (08048B71) --------------------------------------------------------
int __cdecl std::__introsort_loop<double *,int>(int a1, unsigned int a2, int a3)
{
  int result; // eax@3
  int v4; // ST1C_4@4

  while ( 1 )
  {
    result = a2 - a1;
    if ( (signed int)(a2 - a1) <= 135 )
      break;
    if ( !a3 )
      return std::partial_sort<double *>(a1, a2, a2);
    --a3;
    v4 = std::__unguarded_partition_pivot<double *>(a1, a2);
    std::__introsort_loop<double *,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (08048BE4) --------------------------------------------------------
int __cdecl std::__final_insertion_sort<double *>(int a1, int a2)
{
  int result; // eax@2

  if ( a2 - a1 <= 135 )
  {
    result = std::__insertion_sort<double *>(a1, a2);
  }
  else
  {
    std::__insertion_sort<double *>(a1, a1 + 128);
    result = std::__unguarded_insertion_sort<double *>(a1 + 128, a2);
  }
  return result;
}

//----- (08048C3E) --------------------------------------------------------
int __cdecl std::partial_sort<double *>(int a1, int a2, unsigned int a3)
{
  std::__heap_select<double *>(a1, a2, a3);
  return std::sort_heap<double *>(a1, a2);
}

//----- (08048C71) --------------------------------------------------------
int __cdecl std::__unguarded_partition_pivot<double *>(int a1, int a2)
{
  std::__move_median_first<double *>(
    a1,
    8 * ((signed int)(((unsigned int)(a2 - a1) >> 31) + ((a2 - a1) >> 3)) >> 1) + a1,
    a2 - 8);
  return std::__unguarded_partition<double *,double>(a1 + 8, a2, a1);
}

//----- (08048CD6) --------------------------------------------------------
int __cdecl std::__insertion_sort<double *>(int a1, int a2)
{
  int result; // eax@1
  int v3; // ST10_4@4
  int v4; // ST14_4@4
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a1 + 8; ; i += 8 )
    {
      result = i;
      if ( i == a2 )
        break;
      if ( *(double *)a1 <= (long double)*(double *)i )
      {
        std::__unguarded_linear_insert<double *>(i);
      }
      else
      {
        v3 = *(_DWORD *)i;
        v4 = *(_DWORD *)(i + 4);
        std::copy_backward<double *,double *>(a1, i, i + 8);
        *(_DWORD *)a1 = v3;
        *(_DWORD *)(a1 + 4) = v4;
      }
    }
  }
  return result;
}

//----- (08048D57) --------------------------------------------------------
int __cdecl std::__unguarded_insertion_sort<double *>(int a1, int a2)
{
  int result; // eax@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; i += 8 )
  {
    result = i;
    if ( i == a2 )
      break;
    std::__unguarded_linear_insert<double *>(i);
  }
  return result;
}

//----- (08048D7E) --------------------------------------------------------
int __cdecl std::__heap_select<double *>(int a1, int a2, unsigned int a3)
{
  int result; // eax@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<double *>(a1, a2);
  for ( i = a2; ; i += 8 )
  {
    result = i;
    if ( i >= a3 )
      break;
    if ( *(double *)a1 > (long double)*(double *)i )
      std::__pop_heap<double *>(a1, a2, i);
  }
  return result;
}

//----- (08048DD8) --------------------------------------------------------
int __cdecl std::sort_heap<double *>(int a1, int a2)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a2 - a1;
    if ( a2 - a1 <= 15 )
      break;
    a2 -= 8;
    std::__pop_heap<double *>(a1, a2, a2);
  }
  return result;
}

//----- (08048E0E) --------------------------------------------------------
void __cdecl std::__move_median_first<double *>(int a1, int a2, int a3)
{
  if ( *(double *)a2 <= (long double)*(double *)a1 )
  {
    if ( *(double *)a3 <= (long double)*(double *)a1 )
    {
      if ( *(double *)a3 <= (long double)*(double *)a2 )
        std::iter_swap<double *,double *>(a1, a2);
      else
        std::iter_swap<double *,double *>(a1, a3);
    }
  }
  else if ( *(double *)a3 <= (long double)*(double *)a2 )
  {
    if ( *(double *)a3 > (long double)*(double *)a1 )
      std::iter_swap<double *,double *>(a1, a3);
  }
  else
  {
    std::iter_swap<double *,double *>(a1, a2);
  }
}

//----- (08048EC5) --------------------------------------------------------
int __cdecl std::__unguarded_partition<double *,double>(int a1, int a2, int a3)
{
  while ( 1 )
  {
    while ( *(double *)a3 > (long double)*(double *)a1 )
      a1 += 8;
    for ( a2 -= 8; *(double *)a2 > (long double)*(double *)a3; a2 -= 8 )
      ;
    if ( a1 >= (unsigned int)a2 )
      break;
    std::iter_swap<double *,double *>(a1, a2);
    a1 += 8;
  }
  return a1;
}

//----- (08048F29) --------------------------------------------------------
int __cdecl std::copy_backward<double *,double *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<double *>(a2);
  v4 = std::__miter_base<double *>(a1);
  return std::__copy_move_backward_a2<false,double *,double *>(v4, v3, a3);
}

//----- (08048F61) --------------------------------------------------------
double __cdecl std::__unguarded_linear_insert<double *>(int a1)
{
  int v1; // edx@2
  double result; // rax@4
  double v3; // [sp+0h] [bp-10h]@1
  int i; // [sp+Ch] [bp-4h]@1

  v3 = *(double *)a1;
  for ( i = a1 - 8; *(double *)i > (long double)v3; i -= 8 )
  {
    v1 = *(_DWORD *)(i + 4);
    *(_DWORD *)a1 = *(_DWORD *)i;
    *(_DWORD *)(a1 + 4) = v1;
    a1 = i;
  }
  result = v3;
  *(double *)a1 = v3;
  return result;
}

//----- (08048FBE) --------------------------------------------------------
void __cdecl std::make_heap<double *>(int a1, int a2)
{
  int v2; // eax@3
  int v3; // ST24_4@3
  int i; // [sp+2Ch] [bp-Ch]@2

  if ( a2 - a1 > 15 )
  {
    for ( i = (((a2 - a1) >> 3) - 2) / 2; ; --i )
    {
      v2 = 8 * i + a1;
      v3 = *(_DWORD *)(v2 + 4);
      std::__adjust_heap<double *,int,double>(a1, i, (a2 - a1) >> 3, *(double *)v2);
      if ( !i )
        break;
    }
  }
}

//----- (08049047) --------------------------------------------------------
void __cdecl std::__pop_heap<double *>(int a1, int a2, int a3)
{
  double v3; // ST28_8@1
  int v4; // edx@1

  v3 = *(double *)a3;
  v4 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_DWORD *)(a3 + 4) = v4;
  std::__adjust_heap<double *,int,double>(a1, 0, (a2 - a1) >> 3, v3);
}

//----- (080490A1) --------------------------------------------------------
int __cdecl std::iter_swap<double *,double *>(int a1, int a2)
{
  return std::__iter_swap<true>::iter_swap<double *,double *>(a1, a2);
}

//----- (080490BB) --------------------------------------------------------
int __cdecl std::__miter_base<double *>(int a1)
{
  return std::_Iter_base<double *,false>::_S_base(a1);
}

//----- (080490CE) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,double *,double *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<double *>(a3);
  v4 = std::__niter_base<double *>(a2);
  v5 = std::__niter_base<double *>(a1);
  return std::__copy_move_backward_a<false,double *,double *>((void *)v5, v4, v3);
}

//----- (08049112) --------------------------------------------------------
void __cdecl std::__adjust_heap<double *,int,double>(int a1, int a2, int a3, double a4)
{
  int v4; // ecx@4
  int v5; // eax@4
  int v6; // edx@4
  int v7; // ST2C_4@8
  int v8; // ecx@8
  int v9; // edx@8
  int v10; // eax@8
  int v11; // edx@8
  int v12; // [sp+28h] [bp-10h]@1
  int i; // [sp+2Ch] [bp-Ch]@1

  v12 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    if ( *(double *)(8 * (i + 0x1FFFFFFF) + a1) > (long double)*(double *)(8 * i + a1) )
      --i;
    v4 = 8 * a2 + a1;
    v5 = 8 * i + a1;
    v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v6;
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    v7 = 2 * (i + 1);
    v8 = 8 * a2 + a1;
    v9 = 8 * (v7 + 0x1FFFFFFF);
    v10 = v9 + a1;
    v11 = *(_DWORD *)(v9 + a1 + 4);
    *(_DWORD *)v8 = *(_DWORD *)v10;
    *(_DWORD *)(v8 + 4) = v11;
    a2 = v7 - 1;
  }
  std::__push_heap<double *,int,double>(a1, a2, v12, a4);
}

//----- (08049234) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<double *,double *>(int a1, int a2)
{
  return std::swap<double>(a1, a2);
}

//----- (0804924E) --------------------------------------------------------
int __cdecl std::_Iter_base<double *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049256) --------------------------------------------------------
int __cdecl std::__niter_base<double *>(int a1)
{
  return std::_Iter_base<double *,false>::_S_base(a1);
}

//----- (08049269) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,double *,double *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<double>(src, a2, a3);
}

//----- (0804928E) --------------------------------------------------------
double __cdecl std::__push_heap<double *,int,double>(int a1, int a2, int a3, double a4)
{
  int v4; // ecx@2
  int v5; // eax@2
  int v6; // edx@2
  double result; // rax@5
  int i; // [sp+14h] [bp-4h]@1

  for ( i = (a2 - 1) / 2; a2 > a3 && a4 > (long double)*(double *)(8 * i + a1); i = (i - 1) / 2 )
  {
    v4 = 8 * a2 + a1;
    v5 = 8 * i + a1;
    v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v6;
    a2 = i;
  }
  result = a4;
  *(double *)(8 * a2 + a1) = a4;
  return result;
}

//----- (08049333) --------------------------------------------------------
int __cdecl std::swap<double>(int a1, int a2)
{
  int v2; // ST08_4@1
  int v3; // ST0C_4@1
  int v4; // edx@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  result = v2;
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 4) = v3;
  return result;
}

//----- (08049367) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<double>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 3;
  if ( v4 )
    memmove((void *)(-8 * v4 + a3), src, 8 * v4);
  return -8 * v4 + a3;
}

//----- (080493C0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (080493D0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804942A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049430) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804AA70;
  v3 = (void (__cdecl *)())off_804AA70;
  if ( off_804AA70 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804AA70: using guessed type int (*off_804AA70)();

//----- (08049458) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 43 function(s)"
