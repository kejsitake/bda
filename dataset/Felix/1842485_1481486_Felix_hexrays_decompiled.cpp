/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
void *__cdecl operator new(unsigned int a1, void *a2);
int __cdecl std::pair<int,int>::pair(int a1);
void std::allocator<std::pair<int,int>>::allocator();
void std::allocator<std::pair<int,int>>::~allocator();
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector(int a1);
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](int a1, int a2);
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3);
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(int a1, int a2);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::min<int>(int a1, int a2);
int __cdecl std::max<int>(int a1, int a2);
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
void __gnu_cxx::new_allocator<std::pair<int,int>>::~new_allocator();
void std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<std::pair<int,int> *,std::pair<int,int>>();
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>>(int a1, void *a2, int a3);
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end@<eax>(int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::pair<int,int> *,unsigned int,std::pair<int,int>,std::pair<int,int>>(int a1, int a2, int a3);
void std::_Destroy<std::pair<int,int> *>();
void *__cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base(int a1);
int __cdecl std::copy_backward<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::operator*(int a1);
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(int a1, int a2);
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::destroy();
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::__normal_iterator(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
void std::_Destroy<int *>();
void std::allocator<std::pair<int,int>>::allocator();
void __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::pair<int,int> *,unsigned int,std::pair<int,int>>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<std::pair<int,int> *>();
int __cdecl std::__miter_base<std::pair<int,int> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3);
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(int a1);
signed int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int>>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::pair<int,int>>::destroy();
void std::allocator<int>::allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::pair<int,int> *,unsigned int,std::pair<int,int>>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<std::pair<int,int> *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::pair<int,int> *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::max_size();
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::pair<int,int>>::max_size();
int __cdecl std::uninitialized_copy<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
signed int __gnu_cxx::new_allocator<int>::max_size();
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::pair<int,int>>(int a1);
void *__cdecl std::_Construct<std::pair<int,int>,std::pair<int,int>>(void *a1, int a2);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804B004)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048784) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048800: using guessed type int __gmon_start__(void);

//----- (08048900) --------------------------------------------------------
#error "8048903: positive sp value has been found (funcsize=2)"

//----- (08048930) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048930: could not find valid save-restore pair for ebp

//----- (08048960) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048960: could not find valid save-restore pair for ebp

//----- (080489A0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804B00C: using guessed type int _DTOR_LIST__[];
// 804B28C: using guessed type char completed_3328;
// 804B290: using guessed type int dtor_idx_3330;

//----- (080489F0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80489F0: could not find valid save-restore pair for ebp

//----- (08048A20) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // ebx@3
  int v4; // eax@3
  int v5; // eax@3
  int v6; // ebx@5
  int v7; // ebx@7
  int v8; // esi@7
  int v9; // edi@7
  int v10; // esi@7
  int v11; // eax@7
  int v12; // ebx@9
  int v13; // esi@9
  bool v14; // al@10
  int v15; // eax@15
  int v16; // eax@15
  int v17; // eax@16
  int v18; // eax@17
  int v19; // eax@19
  int v21; // [sp+1Ch] [bp-60h]@5
  int v22; // [sp+28h] [bp-54h]@5
  int v23; // [sp+2Ch] [bp-50h]@2
  unsigned int v24; // [sp+38h] [bp-44h]@2
  int v25; // [sp+3Ch] [bp-40h]@1
  int v26; // [sp+44h] [bp-38h]@2
  int v27; // [sp+4Ch] [bp-30h]@5
  int v28; // [sp+54h] [bp-28h]@5
  int v29; // [sp+5Ch] [bp-20h]@7
  int l; // [sp+60h] [bp-1Ch]@6
  int k; // [sp+64h] [bp-18h]@5
  int j; // [sp+68h] [bp-14h]@2
  signed int i; // [sp+6Ch] [bp-10h]@1

  std::istream::operator>>(&std::cin, &v25);
  for ( i = 1; ; ++i )
  {
    v19 = v25--;
    if ( v19 == 0 )
      break;
    std::istream::operator>>(&std::cin, &v24);
    std::allocator<std::pair<int,int>>::allocator();
    std::pair<int,int>::pair((int)&v26);
    std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector((int)&v23, v24, (int)&v26);
    std::allocator<std::pair<int,int>>::~allocator();
    for ( j = 0; j < (signed int)v24; ++j )
    {
      v3 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, j) + 4;
      v4 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, j);
      v5 = std::istream::operator>>(&std::cin, v4);
      std::istream::operator>>(v5, v3);
    }
    std::istream::operator>>(&std::cin, &v22);
    v28 = 0;
    std::pair<int,int>::pair((int)&v27, (int)&v22, (int)&v28);
    std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back((int)&v23, (int)&v27);
    ++v24;
    std::allocator<int>::allocator();
    std::vector<int,std::allocator<int>>::vector<int>((int)&v21, v24, -1);
    std::allocator<int>::~allocator();
    v6 = std::vector<int,std::allocator<int>>::operator[]((int)&v21, 0);
    *(_DWORD *)v6 = *(_DWORD *)std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](
                                 (int)&v23,
                                 0);
    for ( k = 0; k < (signed int)v24; ++k )
    {
      for ( l = k + 1; ; ++l )
      {
        v14 = 0;
        if ( l < (signed int)v24 )
        {
          v12 = *(_DWORD *)std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, l);
          v13 = *(_DWORD *)std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, k);
          if ( v12 <= v13 + *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v21, k) )
            v14 = 1;
        }
        if ( !v14 )
          break;
        v7 = std::vector<int,std::allocator<int>>::operator[]((int)&v21, l);
        v8 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, l) + 4;
        v9 = *(_DWORD *)std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, l);
        v29 = v9
            - *(_DWORD *)std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[]((int)&v23, k);
        v10 = std::min<int>((int)&v29, v8);
        v11 = std::vector<int,std::allocator<int>>::operator[]((int)&v21, l);
        *(_DWORD *)v7 = *(_DWORD *)std::max<int>(v11, v10);
      }
    }
    v15 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v16 = std::ostream::operator<<(v15, i);
    std::operator<<<std::char_traits<char>>(v16, ": ");
    if ( (unsigned __int8)(*(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v21, v24 - 1) >> 31) )
    {
      v17 = std::operator<<<std::char_traits<char>>(&std::cout, "NO");
      std::ostream::operator<<(v17, (const char *)&std::endl<char,std::char_traits<char>>);
    }
    else
    {
      v18 = std::operator<<<std::char_traits<char>>(&std::cout, "YES");
      std::ostream::operator<<(v18, (const char *)&std::endl<char,std::char_traits<char>>);
    }
    std::vector<int,std::allocator<int>>::~vector((int)&v21);
    std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector((int)&v23);
  }
  return 0;
}
// 80487E0: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048860: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048880: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048890: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);

//----- (08048E20) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80487F0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048E5F) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048E7B) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048E84) --------------------------------------------------------
int __cdecl std::pair<int,int>::pair(int a1)
{
  int result; // eax@1

  *(_DWORD *)a1 = 0;
  result = a1;
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (08048E9C) --------------------------------------------------------
void std::allocator<std::pair<int,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
}

//----- (08048EB0) --------------------------------------------------------
void std::allocator<std::pair<int,int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::~new_allocator();
}

//----- (08048EC4) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_base(a1, a2);
  return std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08048F1C) --------------------------------------------------------
void __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<std::pair<int,int> *,std::pair<int,int>>();
  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~_Vector_base(a1);
}

//----- (08048F74) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](int a1, int a2)
{
  return 8 * a2 + *(_DWORD *)a1;
}

//----- (08048F86) --------------------------------------------------------
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (08048FA0) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end((int)&v3, a1);
    result = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>>(
      a1,
      *(void **)(a1 + 4),
      a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 8;
  }
  return result;
}

//----- (08049014) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049028) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (0804903C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
  return std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(a1, a2, a3);
}

//----- (08049092) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (080490EA) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (080490FC) --------------------------------------------------------
int __cdecl std::min<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a2 >= *(_DWORD *)a1 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049117) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049132) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator()
{
  ;
}

//----- (08049138) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::~new_allocator()
{
  ;
}

//----- (0804913E) --------------------------------------------------------
void std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::pair<int,int>>::~allocator();
}

//----- (08049152) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_create_storage(a1, a2);
}

//----- (0804919C) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_impl::~_Vector_impl();
}

//----- (080491FC) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::pair<int,int> *,unsigned int,std::pair<int,int>,std::pair<int,int>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804923A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049242) --------------------------------------------------------
void std::_Destroy<std::pair<int,int> *,std::pair<int,int>>()
{
  std::_Destroy<std::pair<int,int> *>();
}

//----- (0804925C) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<std::pair<int,int>>::construct(a1, a2, a3);
}

//----- (0804927E) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // ST14_4@2
  int v4; // ST18_4@2
  int v5; // esi@2
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // ecx@2
  int result; // eax@2
  int v10; // eax@3
  int v11; // eax@3
  int v12; // esi@3
  int v13; // eax@3
  int v14; // ST04_4@3
  int v15; // ST00_4@3
  int v16; // ST08_4@3
  char v17; // [sp+1Ch] [bp-1Ch]@3
  void *v18; // [sp+20h] [bp-18h]@3
  int v19; // [sp+24h] [bp-14h]@3
  int v20; // [sp+28h] [bp-10h]@3
  int v21; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v20 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_check_len(
            a1,
            1,
            "vector::_M_insert_aux");
    std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin((int)&v17, a1);
    v19 = __gnu_cxx::operator-<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(
            (int)&a2,
            (int)&v17);
    v10 = std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate(a1, v20);
    v18 = (void *)v10;
    v21 = v10;
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>>(
      a1,
      (void *)(8 * v19 + v10),
      a3);
    v21 = 0;
    std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
    v11 = __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>>(
            *(_DWORD *)a1,
            *(_DWORD *)v11,
            (int)v18)
        + 8;
    std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
    v12 = *(_DWORD *)(a1 + 4);
    v13 = __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>>(
            *(_DWORD *)v13,
            v12,
            v21);
    std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
    v14 = *(_DWORD *)(a1 + 4);
    v15 = *(_DWORD *)a1;
    std::_Destroy<std::pair<int,int> *,std::pair<int,int>>();
    v16 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
    std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v18;
    *(_DWORD *)(a1 + 4) = v21;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v18 + 8 * v20;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>>(
      a1,
      *(void **)(a1 + 4),
      *(_DWORD *)(a1 + 4) - 8);
    *(_DWORD *)(a1 + 4) += 8;
    v3 = *(_DWORD *)a3;
    v4 = *(_DWORD *)(a3 + 4);
    v5 = *(_DWORD *)(a1 + 4) - 8;
    v6 = *(_DWORD *)(a1 + 4) - 16;
    v7 = __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base((int)&a2);
    std::copy_backward<std::pair<int,int> *,std::pair<int,int> *>(*(_DWORD *)v7, v6, v5);
    v8 = __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::operator*((int)&a2);
    result = v3;
    *(_DWORD *)v8 = v3;
    *(_DWORD *)(v8 + 4) = v4;
  }
  return result;
}

//----- (08049538) --------------------------------------------------------
int __userpurge std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804955A) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049560) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (08049566) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804957A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049594) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (080495F4) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3)
{
  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, (int)&a3);
}

//----- (08049640) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049648) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049662) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<int,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804969A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * a2;
  return result;
}

//----- (080496D8) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::pair<int,int>>::deallocate(a1, a2);
}

//----- (080496FF) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::pair<int,int> *,unsigned int,std::pair<int,int>,std::pair<int,int>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::pair<int,int> *,unsigned int,std::pair<int,int>>(a1, a2, a3);
}

//----- (08049720) --------------------------------------------------------
void std::_Destroy<std::pair<int,int> *>()
{
  std::_Destroy_aux<true>::__destroy<std::pair<int,int> *>();
}

//----- (0804973A) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1
  void *v4; // ecx@1
  int v5; // edx@2

  result = operator new(8u, a2);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(a3 + 4);
    result = *(void **)a3;
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *((_DWORD *)v4 + 1) = v5;
  }
  return result;
}

//----- (08049768) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base(int a1)
{
  return a1;
}

//----- (08049770) --------------------------------------------------------
int __cdecl std::copy_backward<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<int,int> *>(a2);
  v4 = std::__miter_base<std::pair<int,int> *>(a1);
  return std::__copy_move_backward_a2<false,std::pair<int,int> *,std::pair<int,int> *>(v4, v3, a3);
}

//----- (080497A8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (080497B2) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(a1);
  v4 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(a1);
  v9 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(a1);
  return result;
}

//----- (08049856) --------------------------------------------------------
int __userpurge std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (08049875) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base(a1);
  return (v2
        - *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::base(a2)) >> 3;
}

//----- (080498A6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::pair<int,int>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (080498D5) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int>>(a1, a2, a3);
}

//----- (080498FD) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::destroy()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::destroy();
}

//----- (08049918) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,int> *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049928) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049960) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (08049988) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (080499B8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080499F6) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049A10) --------------------------------------------------------
void std::allocator<std::pair<int,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
}

//----- (08049A2A) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049A3D) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::pair<int,int> *,unsigned int,std::pair<int,int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::pair<int,int> *,unsigned int,std::pair<int,int>>(
           a1,
           a2,
           a3);
}

//----- (08049A5E) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<std::pair<int,int> *>()
{
  ;
}

//----- (08049A63) --------------------------------------------------------
int __cdecl std::__miter_base<std::pair<int,int> *>(int a1)
{
  return std::_Iter_base<std::pair<int,int> *,false>::_S_base(a1);
}

//----- (08049A76) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<int,int> *>(a3);
  v4 = std::__niter_base<std::pair<int,int> *>(a2);
  v5 = std::__niter_base<std::pair<int,int> *>(a1);
  return std::__copy_move_backward_a<false,std::pair<int,int> *,std::pair<int,int> *>(v5, v4, v3);
}

//----- (08049ABA) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 3;
}

//----- (08049AD4) --------------------------------------------------------
signed int __cdecl std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(int a1)
{
  std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::max_size();
}

//----- (08049AEF) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049B0A) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::pair<int,int>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (08049B3A) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::pair<int,int> *,std::pair<int,int> *>(a1, a2, a3);
}

//----- (08049B5C) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::destroy()
{
  ;
}

//----- (08049B62) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049B7C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049B90) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (08049BC0) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (08049BE1) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (08049BE6) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator()
{
  ;
}

//----- (08049BEB) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::pair<int,int> *,unsigned int,std::pair<int,int>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::pair<int,int>>(v5);
    result = std::_Construct<std::pair<int,int>,std::pair<int,int>>((void *)v4, a3);
    --a2;
    v5 += 8;
  }
  return result;
}

//----- (08049C22) --------------------------------------------------------
int __cdecl std::_Iter_base<std::pair<int,int> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049C2A) --------------------------------------------------------
int __cdecl std::__niter_base<std::pair<int,int> *>(int a1)
{
  return std::_Iter_base<std::pair<int,int> *,false>::_S_base(a1);
}

//----- (08049C3D) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,int> *,std::pair<int,int> *>(
           a1,
           a2,
           a3);
}

//----- (08049C62) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,int>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::pair<int,int>>::max_size();
}

//----- (08049C76) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049C7E) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::pair<int,int>>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (08049C88) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::pair<int,int> *,std::pair<int,int> *>(a1, a2, a3);
}

//----- (08049CAA) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049CB0) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (08049CBA) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (08049CDB) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<int,int>>(int a1)
{
  return a1;
}

//----- (08049CE3) --------------------------------------------------------
void *__cdecl std::_Construct<std::pair<int,int>,std::pair<int,int>>(void *a1, int a2)
{
  void *result; // eax@1
  void *v3; // ecx@1
  int v4; // edx@2

  result = operator new(8u, a1);
  v3 = result;
  if ( result )
  {
    v4 = *(_DWORD *)(a2 + 4);
    result = *(void **)a2;
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *((_DWORD *)v3 + 1) = v4;
  }
  return result;
}

//----- (08049D11) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3)
{
  int v3; // edx@2
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - a1) >> 3; i > 0; --i )
  {
    a3 -= 8;
    a2 -= 8;
    v3 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_DWORD *)(a3 + 4) = v3;
  }
  return a3;
}

//----- (08049D4F) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<int,int> *,std::pair<int,int> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::pair<int,int>>(v5);
    std::_Construct<std::pair<int,int>,std::pair<int,int>>((void *)v3, a1);
    a1 += 8;
    v5 += 8;
  }
  return v5;
}

//----- (08049D8C) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (08049DAD) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (08049DD6) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (08049DE9) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (08049E19) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049E30) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049E40) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (08049E9A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049EA0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804B004;
  v3 = (void (__cdecl *)())off_804B004;
  if ( off_804B004 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804B004: using guessed type int (*off_804B004)();

//----- (08049EC8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 108 function(s)"
