/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
char __cdecl flood(int a1, int a2, char a3, int a4, int a5, int a6);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I__Z5floodRKSt6vectorIS_IiSaIiEESaIS1_EES5_iRS3_ii();
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::operator|(__int64 a1);
int __cdecl std::operator|=(int a1, int a2);
int __cdecl std::ios_base::setf(int a1, int a2);
int __cdecl std::ios_base::precision(std::ios_base *this, int a2);
int __cdecl max(char a1, char a2, char a3);
bool __cdecl inside(int a1, int a2, int a3, int a4);
void __cdecl std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::~priority_queue(int a1);
int __cdecl std::max<int>(int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::min<int>(int a1, int a2);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3);
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::vector(int a1);
void __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~vector(int a1);
// char __usercall std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::priority_queue@<al>(char a1@<bl>, char a2@<sil>, int a3, int a4, int a5);
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3);
int __cdecl std::pair<int,std::pair<int,int>>::pair(int a1, int a2, int a3);
// int __usercall std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::push@<eax>(char a1@<bl>, int a2, int a3);
bool __cdecl std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::empty(int a1);
int __cdecl std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::top(int a1);
// void __usercall std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::pop(char a1@<sil>, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3);
void std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>();
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::vector(int a1, int a2);
// int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end@<eax>(int a1, int a2);
// char __usercall std::make_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<al>(char a1@<bl>, char a2@<sil>, char a3, char a4);
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::push_back(int a1, int a2);
// int __usercall std::push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<eax>(char a1@<bl>, char a2, char a3);
bool __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::empty(int a1);
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::front(int a1);
// char __usercall std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<al>(char a1@<sil>, char a2, char a3);
void __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::pop_back(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::pair<int,std::pair<int,int>>>::~allocator();
void __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<std::pair<int,std::pair<int,int>> *>();
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end@<eax>(int a1, int a2);
int __cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*,std::pair<int,std::pair<int,int>>>(char a1, char a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(int a1, int a2);
// int __userpurge __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+@<eax>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*(int a1);
// int __usercall std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>@<eax>(char a1@<sil>, char a2, int a3, int a4, int a5, int a6, int a7, char a8);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::construct<std::pair<int,std::pair<int,int>>>(int a1, void *a2, int a3);
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator-@<eax>(int a1, int a2, int a3);
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>(char a1, int a2, int a3, int a4, int a5, int a6, char a7);
bool __cdecl __gnu_cxx::operator==<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*(int a1);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator--(int a1);
// int __usercall std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<eax>(char a1@<sil>, char a2, char a3, char a4);
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::destroy();
void std::allocator<int>::allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
void std::allocator<std::pair<int,std::pair<int,int>>>::allocator();
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<std::pair<int,std::pair<int,int>> *>();
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(int a1, int a2);
int __cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*>(char a1, char a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(int a1);
bool __cdecl std::greater<std::pair<int,std::pair<int,int>>>::operator()(int a1, int a2, int a3);
void *__cdecl __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::construct(int a1, void *a2, int a3);
int __cdecl std::copy_backward<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_check_len(int, int, char *); // idb
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::allocator<std::pair<int,std::pair<int,int>>>>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(int a1);
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::destroy();
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
signed int __gnu_cxx::new_allocator<int>::max_size();
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::new_allocator();
void std::allocator<std::pair<int,std::pair<int,int>>>::allocator();
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*>(char a1, char a2, int a3);
bool __cdecl std::operator><int,std::pair<int,int>>(int a1, int a2);
int __cdecl std::__miter_base<std::pair<int,std::pair<int,int>> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>(int a1, int a2, int a3);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::new_allocator();
bool __cdecl __gnu_cxx::operator!=<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator++(int a1);
int __cdecl std::__addressof<std::pair<int,std::pair<int,int>>>(int a1);
void *__cdecl std::_Construct<std::pair<int,std::pair<int,int>>,std::pair<int,std::pair<int,int>>>(void *a1, int a2);
bool __cdecl std::operator<<int,std::pair<int,int>>(int a1, int a2);
int __cdecl std::_Iter_base<std::pair<int,std::pair<int,int>> *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::pair<int,std::pair<int,int>> *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::max_size();
signed int __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::max_size();
int __cdecl std::uninitialized_copy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
bool __cdecl std::operator<<int,int>(int a1, int a2);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
_DWORD DY[] = { 4294967295 }; // weak
_DWORD DX[] = { 0 }; // weak
int (*off_804F044)() = &GLOBAL__sub_I__Z5floodRKSt6vectorIS_IiSaIiEESaIS1_EES5_iRS3_ii; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
_UNKNOWN unk_804F264; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080487D0) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048850: using guessed type int __gmon_start__(void);

//----- (08048960) --------------------------------------------------------
#error "8048963: positive sp value has been found (funcsize=2)"

//----- (08048990) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048990: could not find valid save-restore pair for ebp

//----- (080489C0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80489C0: could not find valid save-restore pair for ebp

//----- (08048A00) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804F04C: using guessed type int _DTOR_LIST__[];
// 804F2EC: using guessed type char completed_3328;
// 804F2F0: using guessed type int dtor_idx_3330;

//----- (08048A50) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048A50: could not find valid save-restore pair for ebp

//----- (08048A80) --------------------------------------------------------
char __cdecl flood(int a1, int a2, char a3, int a4, int a5, int a6)
{
  int v6; // eax@1
  int v7; // eax@1
  int v8; // eax@2
  int v9; // eax@3
  int v10; // ebx@3
  int v11; // eax@3
  int v12; // eax@4
  int v13; // ebx@4
  int v14; // eax@4
  int v15; // eax@4
  int v16; // edi@4
  int v17; // eax@4
  int v18; // ebx@4
  int v19; // eax@4
  int v20; // eax@4
  int v21; // edi@4
  int v23; // [sp+24h] [bp-24h]@3
  int v24; // [sp+28h] [bp-20h]@3
  signed int i; // [sp+2Ch] [bp-1Ch]@2

  v6 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
         a4,
         a5);
  LOBYTE(v7) = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v6, a6) == 0;
  if ( !(_BYTE)v7 )
  {
    v8 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
           a4,
           a5);
    v7 = std::vector<int,std::allocator<int>>::operator[](v8, a6);
    *(_DWORD *)v7 = 0;
    for ( i = 0; i <= 3; ++i )
    {
      v24 = DY[i] + a5;
      v23 = DX[i] + a6;
      v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             a4,
             0);
      v10 = std::vector<int,std::allocator<int>>::size(v9);
      v11 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a4);
      LOBYTE(v7) = inside(v24, v23, v11, v10);
      if ( (_BYTE)v7 )
      {
        v12 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                a1,
                v24);
        v13 = std::vector<int,std::allocator<int>>::operator[](v12, v23);
        v14 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                a1,
                a5);
        v15 = std::vector<int,std::allocator<int>>::operator[](v14, a6);
        v16 = *(_DWORD *)std::min<int>(v15, v13);
        v17 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                a2,
                v24);
        v18 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v17, v23);
        v19 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                a2,
                a5);
        v20 = std::vector<int,std::allocator<int>>::operator[](v19, a6);
        v21 = v16 - max(a3, *(_DWORD *)v20, v18);
        LOBYTE(v7) = v21 > 49;
        if ( v21 > 49 )
          LOBYTE(v7) = flood(a1, a2, a3, a4, v24, v23);
      }
    }
  }
  return v7;
}
// 804BE24: using guessed type _DWORD DY[];
// 804BE34: using guessed type _DWORD DX[];

//----- (08048C57) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // ebx@0
  int v4; // esi@0
  int v5; // eax@2
  int v6; // eax@2
  int v7; // eax@4
  int v8; // eax@4
  int v9; // eax@10
  int v10; // eax@10
  int v11; // ebx@16
  int v12; // eax@16
  int v13; // ebx@23
  int v14; // eax@23
  int v15; // eax@23
  int v16; // ebx@26
  int v17; // eax@26
  int v18; // ebx@26
  int v19; // esi@26
  int v20; // eax@26
  int v21; // eax@26
  int v22; // edi@26
  int v23; // ebx@26
  int v24; // eax@26
  int v25; // ebx@26
  int v26; // eax@26
  int v27; // eax@26
  bool v28; // al@27
  int v29; // esi@30
  int v30; // ebx@30
  int v31; // eax@30
  int v32; // ebx@30
  int v33; // eax@30
  int v34; // eax@30
  int v35; // ebx@30
  int v36; // eax@30
  int v37; // eax@30
  int v38; // ebx@32
  int v39; // eax@32
  int v40; // eax@32
  int v41; // ebx@32
  int v42; // eax@32
  int v43; // ebx@33
  int v44; // eax@33
  int v45; // ebx@33
  int v46; // eax@33
  int v47; // eax@33
  int v48; // ebx@33
  int v49; // eax@33
  int v50; // eax@33
  int v51; // eax@37
  double v52; // ST20_8@37
  int v53; // eax@37
  int v54; // eax@37
  int v55; // eax@37
  int v56; // eax@37
  int v57; // eax@38
  int v59; // [sp+34h] [bp-118h]@25
  int v60; // [sp+38h] [bp-114h]@25
  int ii; // [sp+3Ch] [bp-110h]@15
  int n; // [sp+40h] [bp-10Ch]@14
  int v63; // [sp+44h] [bp-108h]@14
  int v64; // [sp+54h] [bp-F8h]@14
  int v65; // [sp+60h] [bp-ECh]@2
  int v66; // [sp+6Ch] [bp-E0h]@2
  unsigned int v67; // [sp+78h] [bp-D4h]@2
  unsigned int v68; // [sp+7Ch] [bp-D0h]@2
  char v69; // [sp+80h] [bp-CCh]@2
  int v70; // [sp+84h] [bp-C8h]@1
  int v71; // [sp+8Ch] [bp-C0h]@2
  int v72; // [sp+9Ch] [bp-B0h]@2
  int v73; // [sp+A4h] [bp-A8h]@2
  int v74; // [sp+B4h] [bp-98h]@2
  int v75; // [sp+BCh] [bp-90h]@14
  int v76; // [sp+CCh] [bp-80h]@14
  char v77; // [sp+DBh] [bp-71h]@14
  int v78; // [sp+DCh] [bp-70h]@17
  int v79; // [sp+E8h] [bp-64h]@17
  int v80; // [sp+F0h] [bp-5Ch]@17
  int v81; // [sp+F4h] [bp-58h]@30
  int v82; // [sp+F8h] [bp-54h]@30
  int v83; // [sp+FCh] [bp-50h]@33
  int v84; // [sp+108h] [bp-44h]@33
  int v85; // [sp+110h] [bp-3Ch]@30
  int v86; // [sp+114h] [bp-38h]@30
  int v87; // [sp+118h] [bp-34h]@23
  int v88; // [sp+11Ch] [bp-30h]@23
  int v89; // [sp+120h] [bp-2Ch]@23
  signed int v90; // [sp+124h] [bp-28h]@30
  signed int jj; // [sp+128h] [bp-24h]@24
  int m; // [sp+12Ch] [bp-20h]@9
  int l; // [sp+130h] [bp-1Ch]@8
  int k; // [sp+134h] [bp-18h]@3
  int j; // [sp+138h] [bp-14h]@2
  signed int i; // [sp+13Ch] [bp-10h]@1

  std::ios_base::setf((int)&unk_804F264, 4);
  std::ios_base::precision((std::ios_base *)&unk_804F264, 1);
  std::istream::operator>>(&std::cin, &v70);
  for ( i = 1; ; ++i )
  {
    v57 = v70--;
    if ( v57 == 0 )
      break;
    v5 = std::istream::operator>>(&std::cin, &v69);
    v6 = std::istream::operator>>(v5, &v68);
    std::istream::operator>>(v6, &v67);
    std::allocator<std::vector<int,std::allocator<int>>>::allocator();
    std::allocator<int>::allocator();
    v72 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v71, v67, (int)&v72);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v66,
      v68,
      (int)&v71);
    std::vector<int,std::allocator<int>>::~vector((int)&v71);
    std::allocator<int>::~allocator();
    std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
    std::allocator<std::vector<int,std::allocator<int>>>::allocator();
    std::allocator<int>::allocator();
    v74 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v73, v67, (int)&v74);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v65,
      v68,
      (int)&v73);
    std::vector<int,std::allocator<int>>::~vector((int)&v73);
    std::allocator<int>::~allocator();
    std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
    for ( j = 0; j < (signed int)v68; ++j )
    {
      for ( k = 0; k < (signed int)v67; ++k )
      {
        v3 = k;
        v7 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&v66,
               j);
        v8 = std::vector<int,std::allocator<int>>::operator[](v7, v3);
        std::istream::operator>>(&std::cin, v8);
      }
    }
    for ( l = 0; l < (signed int)v68; ++l )
    {
      for ( m = 0; m < (signed int)v67; ++m )
      {
        v3 = m;
        v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&v65,
               l);
        v10 = std::vector<int,std::allocator<int>>::operator[](v9, v3);
        std::istream::operator>>(&std::cin, v10);
      }
    }
    std::allocator<std::vector<int,std::allocator<int>>>::allocator();
    std::allocator<int>::allocator();
    std::vector<int,std::allocator<int>>::vector<int>((int)&v75, v67, 0);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v64,
      v68,
      (int)&v75);
    std::vector<int,std::allocator<int>>::~vector((int)&v75);
    std::allocator<int>::~allocator();
    std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
    flood((int)&v66, (int)&v65, v69, (int)&v64, 0, 0);
    std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::vector((int)&v76);
    std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::priority_queue(
      v3,
      v4,
      (int)&v63,
      (int)&v77,
      (int)&v76);
    std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~vector((int)&v76);
    for ( n = 0; n < (signed int)v68; ++n )
    {
      for ( ii = 0; ii < (signed int)v67; ++ii )
      {
        v11 = ii;
        v12 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                (int)&v64,
                n);
        if ( *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v12, v11) == 0 )
        {
          std::pair<int,int>::pair((int)&v79, (int)&n, (int)&ii);
          v80 = 0;
          std::pair<int,std::pair<int,int>>::pair((int)&v78, (int)&v80, (int)&v79);
          std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::push(
            v11,
            (int)&v63,
            (int)&v78);
        }
      }
    }
    while ( !std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::empty((int)&v63) )
    {
      v89 = *(_DWORD *)std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::top((int)&v63);
      v88 = *(_DWORD *)(std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::top((int)&v63)
                      + 4);
      v87 = *(_DWORD *)(std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::top((int)&v63)
                      + 8);
      std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::pop(
        v4,
        (int)&v63);
      v13 = v87;
      v14 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
              (int)&v64,
              v88);
      v15 = std::vector<int,std::allocator<int>>::operator[](v14, v13);
      if ( *(_DWORD *)v15 <= v89 )
      {
        for ( jj = 0; jj <= 3; ++jj )
        {
          v60 = DY[jj] + v88;
          v59 = DX[jj] + v87;
          v28 = 1;
          if ( inside(v60, v59, v68, v67) )
          {
            v16 = v59;
            v17 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v66,
                    v60);
            v18 = std::vector<int,std::allocator<int>>::operator[](v17, v16);
            v19 = v87;
            v20 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v66,
                    v88);
            v21 = std::vector<int,std::allocator<int>>::operator[](v20, v19);
            v22 = *(_DWORD *)std::min<int>(v21, v18);
            v23 = v59;
            v24 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v65,
                    v60);
            v25 = std::vector<int,std::allocator<int>>::operator[](v24, v23);
            v4 = v87;
            v26 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v65,
                    v88);
            v27 = std::vector<int,std::allocator<int>>::operator[](v26, v4);
            if ( v22 - *(_DWORD *)std::max<int>(v27, v25) > 49 )
              v28 = 0;
          }
          if ( !v28 )
          {
            v29 = *(_DWORD *)&v69;
            v30 = v87;
            v31 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v64,
                    v88);
            v86 = v29 - *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v31, v30);
            v32 = v59;
            v33 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v66,
                    v60);
            v34 = std::vector<int,std::allocator<int>>::operator[](v33, v32);
            v81 = 50 - *(_DWORD *)v34 + v86;
            v82 = 0;
            v85 = *(_DWORD *)std::max<int>((int)&v82, (int)&v81);
            v86 -= v85;
            v90 = 10;
            v35 = v87;
            v36 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v65,
                    v88);
            v37 = std::vector<int,std::allocator<int>>::operator[](v36, v35);
            if ( *(_DWORD *)v37 + 20 > v86 )
              v90 = 100;
            v38 = v87;
            v39 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v64,
                    v88);
            v40 = std::vector<int,std::allocator<int>>::operator[](v39, v38);
            v4 = v85 + *(_DWORD *)v40 + v90;
            v41 = v59;
            v42 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v64,
                    v60);
            if ( v4 < *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v42, v41) )
            {
              v43 = v59;
              v44 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                      (int)&v64,
                      v60);
              v45 = std::vector<int,std::allocator<int>>::operator[](v44, v43);
              v4 = v87;
              v46 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                      (int)&v64,
                      v88);
              v47 = std::vector<int,std::allocator<int>>::operator[](v46, v4);
              *(_DWORD *)v45 = v85 + *(_DWORD *)v47 + v90;
              std::pair<int,int>::pair((int)&v84, (int)&v60, (int)&v59);
              v48 = v59;
              v49 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                      (int)&v64,
                      v60);
              v50 = std::vector<int,std::allocator<int>>::operator[](v49, v48);
              std::pair<int,std::pair<int,int>>::pair((int)&v83, v50, (int)&v84);
              std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::push(
                v48,
                (int)&v63,
                (int)&v83);
            }
          }
        }
      }
    }
    v3 = v67 - 1;
    v51 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
            (int)&v64,
            v68 - 1);
    v52 = (long double)*(signed int *)std::vector<int,std::allocator<int>>::operator[](v51, v3) / 10.0;
    v53 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v54 = std::ostream::operator<<(v53, i);
    v55 = std::operator<<<std::char_traits<char>>(v54, ": ");
    v56 = std::ostream::operator<<(v55, LODWORD(v52), HIDWORD(v52));
    std::ostream::operator<<(v56, (const char *)&std::endl<char,std::char_traits<char>>);
    std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::~priority_queue((int)&v63);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v64);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v65);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v66);
  }
  return 0;
}
// 8048820: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD);
// 8048830: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 80488B0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 80488D0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 80488F0: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 804BE24: using guessed type _DWORD DY[];
// 804BE34: using guessed type _DWORD DX[];

//----- (080497F4) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048840: using guessed type int __cxa_atexit(const char *, ...);

//----- (08049833) --------------------------------------------------------
int GLOBAL__sub_I__Z5floodRKSt6vectorIS_IiSaIiEESaIS1_EES5_iRS3_ii()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (0804984F) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08049857) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (0804985C) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (08049869) --------------------------------------------------------
int __cdecl std::operator|=(int a1, int a2)
{
  __int64 v2; // ST00_8@1

  HIDWORD(v2) = a2;
  LODWORD(v2) = *(_DWORD *)a1;
  *(_DWORD *)a1 = std::operator|(v2);
  return a1;
}

//----- (0804988E) --------------------------------------------------------
int __cdecl std::ios_base::setf(int a1, int a2)
{
  int v2; // ST1C_4@1

  v2 = *(_DWORD *)(a1 + 12);
  std::operator|=(a1 + 12, a2);
  return v2;
}

//----- (080498B8) --------------------------------------------------------
int __cdecl std::ios_base::precision(std::ios_base *this, int a2)
{
  int v2; // ST0C_4@1

  v2 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = a2;
  return v2;
}

//----- (080498D5) --------------------------------------------------------
int __cdecl max(char a1, char a2, char a3)
{
  int v3; // eax@1

  v3 = std::max<int>((int)&a2, (int)&a3);
  return *(_DWORD *)std::max<int>((int)&a1, v3);
}

//----- (08049900) --------------------------------------------------------
bool __cdecl inside(int a1, int a2, int a3, int a4)
{
  return a1 >= 0 && a2 >= 0 && a1 < a3 && a2 < a4;
}

//----- (08049928) --------------------------------------------------------
void __cdecl std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::~priority_queue(int a1)
{
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~vector(a1);
}

//----- (0804993B) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049956) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (0804996E) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049980) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (080499BC) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (080499D6) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (080499EE) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049A00) --------------------------------------------------------
int __cdecl std::min<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a2 >= *(_DWORD *)a1 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049A1C) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049A30) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049A44) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, a2);
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08049A9C) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08049AF4) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (08049B08) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (08049B1C) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (08049B74) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (08049BCC) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
  return std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(a1, a2, a3);
}

//----- (08049C22) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::vector(int a1)
{
  return std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_base(a1);
}

//----- (08049C36) --------------------------------------------------------
void __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>();
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~_Vector_base(a1);
}

//----- (08049C8E) --------------------------------------------------------
char __usercall std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::priority_queue@<al>(char a1@<bl>, char a2@<sil>, int a3, int a4, int a5)
{
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::vector(a3, a5);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end((int)&v6, a3);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin((int)&v7, a3);
  return std::make_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>(
           a1,
           a2,
           v7,
           v6);
}

//----- (08049D06) --------------------------------------------------------
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (08049D20) --------------------------------------------------------
int __cdecl std::pair<int,std::pair<int,int>>::pair(int a1, int a2, int a3)
{
  int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_DWORD *)(a3 + 4);
  result = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (08049D40) --------------------------------------------------------
int __usercall std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::push@<eax>(char a1@<bl>, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::push_back(a2, a3);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end((int)&v4, a2);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin((int)&v5, a2);
  return std::push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>(
           a1,
           v5,
           v4);
}

//----- (08049D9E) --------------------------------------------------------
bool __cdecl std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::empty(int a1)
{
  return std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::empty(a1);
}

//----- (08049DB2) --------------------------------------------------------
int __cdecl std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::top(int a1)
{
  return std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::front(a1);
}

//----- (08049DC6) --------------------------------------------------------
void __usercall std::priority_queue<std::pair<int,std::pair<int,int>>,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>,std::greater<std::pair<int,std::pair<int,int>>>>::pop(char a1@<sil>, int a2)
{
  int v2; // [sp+18h] [bp-10h]@1
  int v3; // [sp+1Ch] [bp-Ch]@1

  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end((int)&v2, a2);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin((int)&v3, a2);
  std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>(
    a1,
    v3,
    v2);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::pop_back(a2);
}

//----- (08049E1E) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049E24) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (08049E2A) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049E3E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (08049E88) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (08049EE8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049F26) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049F2E) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049F48) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (08049F4E) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (08049F54) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (08049F68) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (08049FB2) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A034) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804A072) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A07A) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804A094) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A0AE) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3)
{
  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, (int)&a3);
}

//----- (0804A0FA) --------------------------------------------------------
void std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::pair<int,std::pair<int,int>>>::~allocator();
}

//----- (0804A10E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A122) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A1A4) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A1AC) --------------------------------------------------------
void std::_Destroy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>()
{
  std::_Destroy<std::pair<int,std::pair<int,int>> *>();
}

//----- (0804A1C6) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  int result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::_S_select_on_copy(v2);
  v3 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(a2);
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_base(
    a1,
    v3);
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end((int)&v6, a2);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*,std::pair<int,std::pair<int,int>>>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804A27E) --------------------------------------------------------
int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804A29E) --------------------------------------------------------
int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804A2C0) --------------------------------------------------------
char __usercall std::make_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<al>(char a1@<bl>, char a2@<sil>, char a3, char a4)
{
  char result; // al@1
  int v5; // eax@3
  int i; // [sp+34h] [bp-14h]@2
  char v7; // [sp+38h] [bp-10h]@3
  int v8; // [sp+3Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
             (int)&a4,
             (int)&a3) <= 1;
  if ( !result )
  {
    v8 = __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
           (int)&a4,
           (int)&a3);
    for ( i = (v8 - 2) / 2; ; --i )
    {
      __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
        (int)&v7,
        (int)&a3,
        (int)&i);
      v5 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v7);
      std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>(
        a2,
        a3,
        i,
        v8,
        *(_DWORD *)v5,
        *(_DWORD *)(v5 + 4),
        *(_DWORD *)(v5 + 8),
        a1);
      result = i;
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (0804A398) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end((int)&v3, a1);
    result = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_insert_aux(
               a1,
               v3,
               a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::construct<std::pair<int,std::pair<int,int>>>(
      a1,
      *(void **)(a1 + 4),
      a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 12;
  }
  return result;
}

//----- (0804A40B) --------------------------------------------------------
int __usercall std::push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<eax>(char a1@<bl>, char a2, char a3)
{
  int v3; // eax@1
  int v4; // ST2C_4@1
  int v5; // ST30_4@1
  int v6; // ST34_4@1
  int v7; // eax@1
  char v9; // [sp+38h] [bp-10h]@1
  int v10; // [sp+3Ch] [bp-Ch]@1

  v10 = 1;
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator-(
    (int)&v9,
    (int)&a3,
    (int)&v10);
  v3 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v9);
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  v6 = *(_DWORD *)(v3 + 8);
  v7 = __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
         (int)&a3,
         (int)&a2);
  return std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>(
           a2,
           v7 - 1,
           0,
           v4,
           v5,
           v6,
           a1);
}

//----- (0804A4A6) --------------------------------------------------------
bool __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::empty(int a1)
{
  char v2; // [sp+18h] [bp-10h]@1
  char v3; // [sp+1Ch] [bp-Ch]@1

  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end((int)&v2, a1);
  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin((int)&v3, a1);
  return __gnu_cxx::operator==<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
           (int)&v3,
           (int)&v2);
}

//----- (0804A4F6) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::front(int a1)
{
  char v2; // [sp+1Ch] [bp-Ch]@1

  std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin((int)&v2, a1);
  return __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v2);
}

//----- (0804A51E) --------------------------------------------------------
char __usercall std::pop_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<al>(char a1@<sil>, char a2, char a3)
{
  char result; // al@1

  result = __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
             (int)&a3,
             (int)&a2) > 1;
  if ( result )
  {
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator--((int)&a3);
    result = std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>(
               a1,
               a2,
               a3,
               a3);
  }
  return result;
}

//----- (0804A570) --------------------------------------------------------
void __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::pop_back(int a1)
{
  int v1; // ST04_4@1

  *(_DWORD *)(a1 + 4) -= 12;
  v1 = *(_DWORD *)(a1 + 4);
  __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::destroy();
}

//----- (0804A59C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A5D4) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804A612) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804A639) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A65A) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804A674) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A6AC) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (0804A6F0) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (0804A717) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A738) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804A752) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A782) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<int,std::pair<int,int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A7B2) --------------------------------------------------------
void std::allocator<std::pair<int,std::pair<int,int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::~new_allocator();
}

//----- (0804A7C6) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::deallocate(a1, a2);
}

//----- (0804A7ED) --------------------------------------------------------
void std::_Destroy<std::pair<int,std::pair<int,int>> *>()
{
  std::_Destroy_aux<true>::__destroy<std::pair<int,std::pair<int,int>> *>();
}

//----- (0804A808) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (0804A843) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804A84C) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A854) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (0804A89E) --------------------------------------------------------
int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (0804A8C6) --------------------------------------------------------
int __userpurge std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (0804A8EE) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*,std::pair<int,std::pair<int,int>>>(char a1, char a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*>(
           a1,
           a2,
           a3);
}

//----- (0804A910) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A91F) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(a1);
  return -1431655765
       * ((v2
         - *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(a2)) >> 2);
}

//----- (0804A972) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 12 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(
    a1,
    (int)&v4);
  return a1;
}

//----- (0804A9AC) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A9B6) --------------------------------------------------------
int __usercall std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>@<eax>(char a1@<sil>, char a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  int v8; // ebx@2
  int v9; // eax@2
  int v10; // ebx@4
  int v11; // eax@4
  int v12; // ebx@8
  int v13; // eax@8
  int i; // [sp+28h] [bp-40h]@1
  char v16; // [sp+2Ch] [bp-3Ch]@2
  int v17; // [sp+30h] [bp-38h]@2
  char v18; // [sp+34h] [bp-34h]@2
  char v19; // [sp+38h] [bp-30h]@4
  char v20; // [sp+3Ch] [bp-2Ch]@4
  char v21; // [sp+40h] [bp-28h]@8
  char v22; // [sp+44h] [bp-24h]@8
  int v23; // [sp+48h] [bp-20h]@8
  int v24; // [sp+4Ch] [bp-1Ch]@1

  v24 = a3;
  for ( i = a3; (a4 - 1) / 2 > i; a3 = i )
  {
    i = 2 * (i + 1);
    v17 = i - 1;
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v16,
      (int)&a2,
      (int)&v17);
    v8 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v16);
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v18,
      (int)&a2,
      (int)&i);
    v9 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v18);
    if ( std::greater<std::pair<int,std::pair<int,int>>>::operator()((int)&a8, v9, v8) )
      --i;
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v19,
      (int)&a2,
      (int)&a3);
    v10 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v19);
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v20,
      (int)&a2,
      (int)&i);
    v11 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v20);
    *(_DWORD *)v10 = *(_DWORD *)v11;
    *(_DWORD *)(v10 + 4) = *(_DWORD *)(v11 + 4);
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  }
  if ( !(a4 & 1) && (a4 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v21,
      (int)&a2,
      (int)&a3);
    v12 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v21);
    v23 = i - 1;
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v22,
      (int)&a2,
      (int)&v23);
    v13 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v22);
    *(_DWORD *)v12 = *(_DWORD *)v13;
    *(_DWORD *)(v12 + 4) = *(_DWORD *)(v13 + 4);
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
    a3 = i - 1;
  }
  return std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>(
           a2,
           a3,
           v24,
           a5,
           a6,
           a7,
           a1);
}

//----- (0804ABB3) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::construct<std::pair<int,std::pair<int,int>>>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::construct(a1, a2, a3);
}

//----- (0804ABD4) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // ST10_4@2
  int v4; // ST14_4@2
  int v5; // ST18_4@2
  int v6; // esi@2
  int v7; // ebx@2
  int v8; // eax@2
  int result; // eax@2
  int v10; // eax@3
  int v11; // eax@3
  int v12; // esi@3
  int v13; // eax@3
  int v14; // ST04_4@3
  int v15; // ST00_4@3
  int v16; // ST08_4@3
  char v17; // [sp+1Ch] [bp-1Ch]@3
  void *v18; // [sp+20h] [bp-18h]@3
  int v19; // [sp+24h] [bp-14h]@3
  int v20; // [sp+28h] [bp-10h]@3
  int v21; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v20 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_check_len(
            a1,
            1,
            "vector::_M_insert_aux");
    std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::begin(
      (int)&v17,
      a1);
    v19 = __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
            (int)&a2,
            (int)&v17);
    v10 = std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_allocate(
            a1,
            v20);
    v18 = (void *)v10;
    v21 = v10;
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::construct<std::pair<int,std::pair<int,int>>>(
      a1,
      (void *)(12 * v19 + v10),
      a3);
    v21 = 0;
    std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a1);
    v11 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::allocator<std::pair<int,std::pair<int,int>>>>(
            *(_DWORD *)a1,
            *(_DWORD *)v11,
            (int)v18)
        + 12;
    std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a1);
    v12 = *(_DWORD *)(a1 + 4);
    v13 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::allocator<std::pair<int,std::pair<int,int>>>>(
            *(_DWORD *)v13,
            v12,
            v21);
    std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a1);
    v14 = *(_DWORD *)(a1 + 4);
    v15 = *(_DWORD *)a1;
    std::_Destroy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>();
    v16 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
    std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_deallocate(
      a1,
      *(void **)a1);
    *(_DWORD *)a1 = v18;
    *(_DWORD *)(a1 + 4) = v21;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v18 + 12 * v20;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::construct<std::pair<int,std::pair<int,int>>>(
      a1,
      *(void **)(a1 + 4),
      *(_DWORD *)(a1 + 4) - 12);
    *(_DWORD *)(a1 + 4) += 12;
    v3 = *(_DWORD *)a3;
    v4 = *(_DWORD *)(a3 + 4);
    v5 = *(_DWORD *)(a3 + 8);
    v6 = *(_DWORD *)(a1 + 4) - 12;
    v7 = *(_DWORD *)(a1 + 4) - 24;
    v8 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base((int)&a2);
    std::copy_backward<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(*(_DWORD *)v8, v7, v6);
    result = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&a2);
    *(_DWORD *)result = v3;
    *(_DWORD *)(result + 4) = v4;
    *(_DWORD *)(result + 8) = v5;
  }
  return result;
}

//----- (0804AEC6) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -12 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(
    a1,
    (int)&v4);
  return a1;
}

//----- (0804AF01) --------------------------------------------------------
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>(char a1, int a2, int a3, int a4, int a5, int a6, char a7)
{
  int v7; // ebx@2
  int v8; // eax@2
  int v9; // eax@4
  bool v10; // al@5
  int result; // eax@8
  int i; // [sp+1Ch] [bp-2Ch]@1
  char v13; // [sp+20h] [bp-28h]@2
  char v14; // [sp+24h] [bp-24h]@2
  char v15; // [sp+28h] [bp-20h]@4
  char v16; // [sp+2Ch] [bp-1Ch]@8

  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v10 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
        (int)&v15,
        (int)&a1,
        (int)&i);
      v9 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v15);
      if ( std::greater<std::pair<int,std::pair<int,int>>>::operator()((int)&a7, v9, (int)&a4) )
        v10 = 1;
    }
    if ( !v10 )
      break;
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v13,
      (int)&a1,
      (int)&a2);
    v7 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v13);
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
      (int)&v14,
      (int)&a1,
      (int)&i);
    v8 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v14);
    *(_DWORD *)v7 = *(_DWORD *)v8;
    *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator+(
    (int)&v16,
    (int)&a1,
    (int)&a2);
  result = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&v16);
  *(_DWORD *)result = a4;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = a6;
  return result;
}

//----- (0804B03C) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(a2);
}

//----- (0804B068) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804B072) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 12;
  return a1;
}

//----- (0804B087) --------------------------------------------------------
int __usercall std::__pop_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::greater<std::pair<int,std::pair<int,int>>>>@<eax>(char a1@<sil>, char a2, char a3, char a4)
{
  int v4; // eax@1
  int v5; // ST24_4@1
  int v6; // ST28_4@1
  int v7; // ST2C_4@1
  int v8; // ebx@1
  int v9; // eax@1
  int v10; // eax@1

  v4 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&a4);
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  v7 = *(_DWORD *)(v4 + 8);
  v8 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&a4);
  v9 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&a2);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  v10 = __gnu_cxx::operator-<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
          (int)&a3,
          (int)&a2);
  return std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,int,std::pair<int,std::pair<int,int>>,std::greater<std::pair<int,std::pair<int,int>>>>(
           a1,
           a2,
           0,
           v10,
           v5,
           v6,
           v7,
           a1);
}

//----- (0804B128) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::destroy()
{
  __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::destroy();
}

//----- (0804B142) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804B15C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B16F) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804B190) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804B196) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804B1B0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804B1E0) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B1F3) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804B214) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804B23E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804B26E) --------------------------------------------------------
void std::allocator<std::pair<int,std::pair<int,int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::new_allocator();
}

//----- (0804B282) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::~new_allocator()
{
  ;
}

//----- (0804B288) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B29B) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<std::pair<int,std::pair<int,int>> *>()
{
  ;
}

//----- (0804B2A0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<int,std::pair<int,int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B2D8) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (0804B31C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B32B) --------------------------------------------------------
int __cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*>(char a1, char a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*>(
           a1,
           a2,
           a3);
}

//----- (0804B34C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> *,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(int a1)
{
  return a1;
}

//----- (0804B354) --------------------------------------------------------
bool __cdecl std::greater<std::pair<int,std::pair<int,int>>>::operator()(int a1, int a2, int a3)
{
  return std::operator><int,std::pair<int,int>>(a2, a3);
}

//----- (0804B36E) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(0xCu, a2);
  if ( result )
  {
    *(_DWORD *)result = *(_DWORD *)a3;
    *((_DWORD *)result + 1) = *(_DWORD *)(a3 + 4);
    *((_DWORD *)result + 2) = *(_DWORD *)(a3 + 8);
  }
  return result;
}

//----- (0804B3A0) --------------------------------------------------------
int __cdecl std::copy_backward<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<int,std::pair<int,int>> *>(a2);
  v4 = std::__miter_base<std::pair<int,std::pair<int,int>> *>(a1);
  return std::__copy_move_backward_a2<false,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(
           v4,
           v3,
           a3);
}

//----- (0804B3D8) --------------------------------------------------------
int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::max_size(a1);
  v4 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(a1);
  v9 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::max_size(a1),
        v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::max_size(a1);
  return result;
}

//----- (0804B47C) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804B4AB) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::allocator<std::pair<int,std::pair<int,int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>(
           a1,
           a2,
           a3);
}

//----- (0804B4D4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(int a1)
{
  return a1;
}

//----- (0804B4DC) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::destroy()
{
  ;
}

//----- (0804B4E2) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804B4E7) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804B508) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804B50E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804B544) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804B5B2) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804B5BA) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804B5CE) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804B5D8) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::new_allocator()
{
  ;
}

//----- (0804B5DE) --------------------------------------------------------
void std::allocator<std::pair<int,std::pair<int,int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::new_allocator();
}

//----- (0804B5F8) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>,std::pair<int,std::pair<int,int>>*>(char a1, char a2, int a3)
{
  int v3; // ebx@2
  int v4; // eax@2
  int v6; // [sp+1Ch] [bp-Ch]@1

  v6 = a3;
  while ( __gnu_cxx::operator!=<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(
            (int)&a1,
            (int)&a2) )
  {
    v3 = __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator*((int)&a1);
    v4 = std::__addressof<std::pair<int,std::pair<int,int>>>(v6);
    std::_Construct<std::pair<int,std::pair<int,int>>,std::pair<int,std::pair<int,int>>>((void *)v4, v3);
    __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator++((int)&a1);
    v6 += 12;
  }
  return v6;
}

//----- (0804B659) --------------------------------------------------------
bool __cdecl std::operator><int,std::pair<int,int>>(int a1, int a2)
{
  return std::operator<<int,std::pair<int,int>>(a2, a1);
}

//----- (0804B673) --------------------------------------------------------
int __cdecl std::__miter_base<std::pair<int,std::pair<int,int>> *>(int a1)
{
  return std::_Iter_base<std::pair<int,std::pair<int,int>> *,false>::_S_base(a1);
}

//----- (0804B686) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<int,std::pair<int,int>> *>(a3);
  v4 = std::__niter_base<std::pair<int,std::pair<int,int>> *>(a2);
  v5 = std::__niter_base<std::pair<int,std::pair<int,int>> *>(a1);
  return std::__copy_move_backward_a<false,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(
           v5,
           v4,
           v3);
}

//----- (0804B6CA) --------------------------------------------------------
signed int __cdecl std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::max_size(int a1)
{
  std::_Vector_base<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::max_size();
}

//----- (0804B6E5) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804B700) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804B736) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(a1, a2, a3);
}

//----- (0804B757) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804B780) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804B78A) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804B7E0) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::new_allocator()
{
  ;
}

//----- (0804B7E5) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::base(a2);
}

//----- (0804B812) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<int,std::pair<int,int>> const*,std::vector<std::pair<int,std::pair<int,int>>,std::allocator<std::pair<int,std::pair<int,int>>>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 12;
  return a1;
}

//----- (0804B827) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<int,std::pair<int,int>>>(int a1)
{
  return a1;
}

//----- (0804B82F) --------------------------------------------------------
void *__cdecl std::_Construct<std::pair<int,std::pair<int,int>>,std::pair<int,std::pair<int,int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    *((_DWORD *)result + 1) = *(_DWORD *)(a2 + 4);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

//----- (0804B861) --------------------------------------------------------
bool __cdecl std::operator<<int,std::pair<int,int>>(int a1, int a2)
{
  return *(_DWORD *)a1 < *(_DWORD *)a2 || *(_DWORD *)a2 >= *(_DWORD *)a1 && std::operator<<int,int>(a1 + 4, a2 + 4);
}

//----- (0804B8A7) --------------------------------------------------------
int __cdecl std::_Iter_base<std::pair<int,std::pair<int,int>> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804B8AF) --------------------------------------------------------
int __cdecl std::__niter_base<std::pair<int,std::pair<int,int>> *>(int a1)
{
  return std::_Iter_base<std::pair<int,std::pair<int,int>> *,false>::_S_base(a1);
}

//----- (0804B8C2) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804B8E7) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<int,std::pair<int,int>>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::max_size();
}

//----- (0804B8FA) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::pair<int,std::pair<int,int>>>::max_size()
{
  return 357913941;
}

//----- (0804B904) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804B925) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804B938) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804B968) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804BA1F) --------------------------------------------------------
bool __cdecl std::operator<<int,int>(int a1, int a2)
{
  return *(_DWORD *)a1 < *(_DWORD *)a2 || *(_DWORD *)a2 >= *(_DWORD *)a1 && *(_DWORD *)(a1 + 4) < *(_DWORD *)(a2 + 4);
}

//----- (0804BA56) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3)
{
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = -1431655765 * ((a2 - a1) >> 2); i > 0; --i )
  {
    a3 -= 12;
    a2 -= 12;
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
  }
  return a3;
}

//----- (0804BABC) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<int,std::pair<int,int>> *,std::pair<int,std::pair<int,int>> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::pair<int,std::pair<int,int>>>(v5);
    std::_Construct<std::pair<int,std::pair<int,int>>,std::pair<int,std::pair<int,int>>>((void *)v3, a1);
    a1 += 12;
    v5 += 12;
  }
  return v5;
}

//----- (0804BAF9) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804BB01) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804BB0A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804BB12) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804BB3A) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804BB62) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804BB84) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804BB93) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804BBB4) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804BBD5) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804BC20) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804BC42) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804BC86) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804BC98) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804BCAB) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804BCD0) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804BCE5) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804BD2E) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804BD40) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804BD50) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804BDAA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804BDB0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804F044;
  v3 = (void (__cdecl *)())off_804F044;
  if ( off_804F044 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804F044: using guessed type int (*off_804F044)();

//----- (0804BDD8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 203 function(s)"
