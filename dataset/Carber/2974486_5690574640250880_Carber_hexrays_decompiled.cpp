/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// int putchar(int c);
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// void *memset(void *s, int c, size_t n);
// void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function);
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// FILE *freopen(const char *filename, const char *modes, FILE *stream);
// int printf(const char *format, ...);
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int puts(const char *s);
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
bool __cdecl isVaild(int a1, int a2);
int __cdecl getFreeCount(int a1, int a2);
void __cdecl fillFreePos(int a1, int a2);
int putResult(void);
int Solved(void);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_g();
int __cdecl std::max<int>(int a1, int a2);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

char s = '\0'; // idb
int (*off_804A134)() = &GLOBAL__sub_I_g; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
FILE *stdin; // idb
FILE *stdout; // idb
char completed_3328; // weak
int dtor_idx_3330; // weak
char g; // weak
int R; // weak
int C; // weak
int M; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048660) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80486B0: using guessed type int __gmon_start__(void);

//----- (08048790) --------------------------------------------------------
#error "8048793: positive sp value has been found (funcsize=2)"

//----- (080487C0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 80487C0: could not find valid save-restore pair for ebp

//----- (080487F0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80487F0: could not find valid save-restore pair for ebp

//----- (08048830) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804A13C: using guessed type int _DTOR_LIST__[];
// 804A324: using guessed type char completed_3328;
// 804A328: using guessed type int dtor_idx_3330;

//----- (08048880) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048880: could not find valid save-restore pair for ebp

//----- (080488B0) --------------------------------------------------------
bool __cdecl isVaild(int a1, int a2)
{
  return a1 >= 0 && a1 < R && a2 >= 0 && a2 < C && *(_BYTE *)(a2 + 52 * a1 + 134521664) == 42;
}
// 804ADD0: using guessed type int R;
// 804ADD4: using guessed type int C;

//----- (080488FC) --------------------------------------------------------
int __cdecl getFreeCount(int a1, int a2)
{
  signed int j; // [sp+1Ch] [bp-Ch]@2
  signed int i; // [sp+20h] [bp-8h]@1
  int v5; // [sp+24h] [bp-4h]@1

  v5 = 0;
  for ( i = -1; i <= 1; ++i )
  {
    for ( j = -1; j <= 1; ++j )
    {
      if ( isVaild(a1 + i, a2 + j) )
        ++v5;
    }
  }
  return v5;
}

//----- (08048961) --------------------------------------------------------
void __cdecl fillFreePos(int a1, int a2)
{
  signed int j; // [sp+10h] [bp-8h]@2
  signed int i; // [sp+14h] [bp-4h]@1

  for ( i = -1; i <= 1; ++i )
  {
    for ( j = -1; j <= 1; ++j )
    {
      if ( isVaild(a1 + i, a2 + j) )
        *(_BYTE *)(a2 + j + 52 * (a1 + i) + 134521664) = 46;
    }
  }
}

//----- (080489D7) --------------------------------------------------------
int putResult(void)
{
  int result; // eax@6
  int j; // [sp+18h] [bp-10h]@2
  int i; // [sp+1Ch] [bp-Ch]@1

  g = 99;
  for ( i = 0; ; ++i )
  {
    result = R;
    if ( i >= R )
      break;
    for ( j = 0; j < C; ++j )
      putchar(*(_BYTE *)(j + 52 * i + 134521664));
    puts(&s);
  }
  return result;
}
// 804A340: using guessed type char g;
// 804ADD0: using guessed type int R;
// 804ADD4: using guessed type int C;

//----- (08048A46) --------------------------------------------------------
int Solved(void)
{
  int v0; // eax@1
  int v1; // eax@1
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-2Ch]@23
  int v4; // [sp+20h] [bp-28h]@11
  int v5; // [sp+24h] [bp-24h]@7
  int v6; // [sp+28h] [bp-20h]@5
  signed int k; // [sp+2Ch] [bp-1Ch]@22
  signed int j; // [sp+30h] [bp-18h]@21
  int i; // [sp+34h] [bp-14h]@5
  char v10; // [sp+3Ah] [bp-Eh]@5
  char v11; // [sp+3Bh] [bp-Dh]@5
  int v12; // [sp+3Ch] [bp-Ch]@3

  v0 = std::istream::operator>>(&std::cin, &R);
  v1 = std::istream::operator>>(v0, &C);
  std::istream::operator>>(v1, &M);
  memset(&g, 42, 0xA90u);
  M = C * R - M;
  if ( M == 1 )
  {
    result = putResult();
  }
  else
  {
    v12 = getFreeCount(0, 0);
    fillFreePos(0, 0);
    if ( v12 <= M )
    {
      v6 = *(_DWORD *)std::max<int>((int)&C, (int)&R);
      v11 = 0;
      v10 = 0;
      for ( i = 1; ; ++i )
      {
        if ( i < v6 )
        {
          if ( R - 1 > i )
          {
            v5 = getFreeCount(i, 0);
            if ( v5 + v12 > M )
              break;
            v12 += v5;
            fillFreePos(i, 0);
            v11 = 1;
          }
          if ( C - 1 > i )
          {
            v4 = getFreeCount(0, i);
            if ( v4 + v12 > M )
              break;
            v12 += v4;
            fillFreePos(0, i);
            v10 = 1;
          }
          if ( v12 != M )
            continue;
        }
        break;
      }
      if ( v12 == M )
      {
        result = putResult();
      }
      else if ( v11 && v10 )
      {
        for ( j = 1; ; ++j )
        {
          result = R;
          if ( j >= R )
            break;
          for ( k = 1; k < C; ++k )
          {
            v3 = getFreeCount(j, k);
            if ( v3 > 1 )
              __assert_fail("cnt <= 1", "./Carber/2974486_5690574640250880_Carber.cpp", 0x80u, "void Solved()");
            v12 += v3;
            fillFreePos(j, k);
            if ( v12 == M )
              return putResult();
          }
        }
      }
      else
      {
        result = puts("Impossible");
      }
    }
    else
    {
      result = puts("Impossible");
    }
  }
  return result;
}
// 8048750: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 804A340: using guessed type char g;
// 804ADD0: using guessed type int R;
// 804ADD4: using guessed type int C;
// 804ADD8: using guessed type int M;

//----- (08048CD3) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  signed int v4; // [sp+18h] [bp-8h]@1
  signed int i; // [sp+1Ch] [bp-4h]@1

  freopen("C-small-attempt2.in", "r", stdin);
  freopen("C-small-attempt2.out", "w", stdout);
  v4 = 1;
  scanf("%d", &v4);
  for ( i = 1; i <= v4; ++i )
  {
    printf("Case #%d:\n", i);
    Solved();
  }
  return 0;
}

//----- (08048D74) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80486A0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048DB3) --------------------------------------------------------
int GLOBAL__sub_I_g()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048DCF) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08048DF0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08048E00) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (08048E5A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08048E60) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804A134;
  v3 = (void (__cdecl *)())off_804A134;
  if ( off_804A134 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804A134: using guessed type int (*off_804A134)();

//----- (08048E88) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 20 function(s)"
