/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <math.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int getchar(void);
// int __gmon_start__(void); weak
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl __muldc3(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl cabs(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int printf(const char *format, ...);
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int nextInt(void);
bool __cdecl crossCC(char a1, int a2, int a3, int a4, double a5, char a6, int a7, int a8, int a9, double a10);
bool __cdecl put(int a1, int a2, int a3);
int solve(void);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_EPS();
int __cdecl std::__lg(int a1);
long double __cdecl std::abs(double a1);
int __cdecl std::__complex_abs(int a1, int a2, int a3, int a4);
int __cdecl std::complex<double>::complex(int a1, int a2, int a3, int a4, int a5);
int __cdecl std::complex<double>::real(int a1);
int __cdecl std::complex<double>::real(int a1);
int __cdecl std::complex<double>::imag(int a1);
int __cdecl std::complex<double>::imag(int a1);
int __cdecl std::complex<double>::operator*=(int a1, double a2);
// int __userpurge std::complex<double>::__rep@<eax>(int a1, int a2);
// int __userpurge std::operator-<double>@<eax>(int a1, int a2, int a3);
double __cdecl std::abs<double>(_DWORD); // weak
// int __userpurge std::operator+<double>@<eax>(int a1, int a2, int a3);
// int __userpurge std::operator*<double>@<eax>(int a1, int a2, double *a3);
// int __userpurge std::operator*<double>@<eax>(int a1, int a2, int a3);
int __cdecl std::swap<double>(int a1, int a2);
int __cdecl std::sort<int *>(int a1, unsigned int a2);
int __cdecl std::reverse<int *>(int a1, int a2);
int __cdecl std::complex<double>::operator-=<double>(int a1, int a2);
int __cdecl std::complex<double>::operator+=<double>(int a1, int a2);
int __cdecl std::complex<double>::operator*=<double>(int a1, int a2);
int __cdecl std::__introsort_loop<int *,int>(int a1, unsigned int a2, int a3);
int __cdecl std::__final_insertion_sort<int *>(int a1, int a2);
int __stdcall std::__iterator_category<int *>(int a1);
int __cdecl std::__reverse<int *>(int a1, int a2);
int __cdecl std::partial_sort<int *>(int a1, int a2, unsigned int a3);
int __cdecl std::__unguarded_partition_pivot<int *>(int a1, int a2);
int __cdecl std::__insertion_sort<int *>(int a1, int a2);
int __cdecl std::__unguarded_insertion_sort<int *>(int a1, int a2);
int __cdecl std::iter_swap<int *,int *>(int a1, int a2);
int *__cdecl std::__heap_select<int *>(int a1, int a2, unsigned int a3);
int __cdecl std::sort_heap<int *>(int a1, int a2);
int __cdecl std::__move_median_first<int *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_partition<int *,int>(int a1, int a2, int a3);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__unguarded_linear_insert<int *>(int a1);
int __cdecl std::__iter_swap<true>::iter_swap<int *,int *>(int a1, int a2);
int __cdecl std::make_heap<int *>(int a1, int a2);
int __cdecl std::__pop_heap<int *>(int a1, int a2, int *a3);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
int __cdecl std::swap<int>(int a1, int a2);
int __cdecl std::__adjust_heap<int *,int,int>(int a1, int a2, int a3, int a4);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
int __cdecl std::__push_heap<int *,int,int>(int a1, int a2, int a3, int a4);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804B004)() = &GLOBAL__sub_I_EPS; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
double EPS =  0.00001; // weak
_UNKNOWN edata; // weak
_UNKNOWN unk_804B163; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
int N; // weak
double W; // weak
double L; // weak
int r[]; // weak
int dword_804B2C4; // weak
int c[]; // weak
int dword_804C424; // weak
int dword_804C428; // weak
int dword_804C42C; // weak
int dword_804C430; // weak
int dword_804C434; // weak
int dword_804C438; // weak
int dword_804C43C; // weak
int nc; // weak
int dword_8050994; // weak
int dword_8050998; // weak
int dword_805099C; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048764) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80487F0: using guessed type int __gmon_start__(void);

//----- (080488D0) --------------------------------------------------------
#error "80488D3: positive sp value has been found (funcsize=2)"

//----- (08048900) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804B163 - &edata;
  if ( (unsigned int)(&unk_804B163 - &edata) > 6 )
    result = 0;
  return result;
}
// 8048900: could not find valid save-restore pair for ebp

//----- (08048930) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048930: could not find valid save-restore pair for ebp

//----- (08048970) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804B00C: using guessed type int _DTOR_LIST__[];
// 804B28C: using guessed type char completed_3328;
// 804B290: using guessed type int dtor_idx_3330;

//----- (080489C0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80489C0: could not find valid save-restore pair for ebp

//----- (080489F0) --------------------------------------------------------
int nextInt(void)
{
  int v1; // [sp+8h] [bp-10h]@1
  char v2; // [sp+Fh] [bp-9h]@2

  v1 = 0;
  do
    v2 = getchar();
  while ( (unsigned int)(v2 - 48) > 9 );
  do
  {
    v1 = 10 * v1 + v2 - 48;
    v2 = getchar();
  }
  while ( (unsigned int)(v2 - 48) <= 9 );
  return v1;
}

//----- (08048A4F) --------------------------------------------------------
bool __cdecl crossCC(char a1, int a2, int a3, int a4, double a5, char a6, int a7, int a8, int a9, double a10)
{
  long double v10; // fst7@2
  bool result; // al@3
  double v12; // [sp+10h] [bp-38h]@1
  double v13; // [sp+18h] [bp-30h]@1
  char v14; // [sp+28h] [bp-20h]@1
  double v15; // [sp+38h] [bp-10h]@1

  v13 = a5;
  v12 = a10;
  std::operator-<double>((int)&v14, (int)&a6, (int)&a1);
  v15 = std::abs<double>(&v14);
  result = 0;
  if ( v13 + v12 + EPS > (long double)v15 )
  {
    v10 = std::abs(v13 - v12);
    if ( EPS + v15 > v10 )
      result = 1;
  }
  return result;
}
// 8049523: using guessed type double __cdecl std::abs<double>(_DWORD);
// 804B158: using guessed type double EPS;

//----- (08048ADB) --------------------------------------------------------
bool __cdecl put(int a1, int a2, int a3)
{
  bool v3; // al@4
  bool v4; // al@15
  int v6; // [sp+40h] [bp-B8h]@2
  int v7; // [sp+44h] [bp-B4h]@2
  int v8; // [sp+48h] [bp-B0h]@2
  int v9; // [sp+4Ch] [bp-ACh]@2
  double v10; // [sp+58h] [bp-A0h]@2
  char v11; // [sp+60h] [bp-98h]@1
  char v12; // [sp+70h] [bp-88h]@1
  int v13; // [sp+80h] [bp-78h]@1
  int v14; // [sp+84h] [bp-74h]@1
  char v15; // [sp+8Ch] [bp-6Ch]@1
  char v16; // [sp+9Ch] [bp-5Ch]@1
  char v17; // [sp+ACh] [bp-4Ch]@1
  int v18; // [sp+BCh] [bp-3Ch]@1
  int v19; // [sp+C0h] [bp-38h]@1
  int v20; // [sp+C4h] [bp-34h]@1
  int v21; // [sp+C8h] [bp-30h]@1
  char v22; // [sp+CCh] [bp-2Ch]@2
  int i; // [sp+DCh] [bp-1Ch]@1
  double v24; // [sp+E0h] [bp-18h]@1
  double v25; // [sp+E8h] [bp-10h]@1

  v13 = 0;
  v14 = 1071644672;
  std::operator+<double>((int)&v15, (int)&c[4 * a1], (int)&c[4 * a2]);
  std::operator*<double>((int)&v12, (int)&v15, (double *)&v13);
  std::complex<double>::complex((int)&v16, 0, 0, 0, 1072693248);
  std::operator-<double>((int)&v17, (int)&c[4 * a1], (int)&c[4 * a2]);
  std::operator*<double>((int)&v11, (int)&v17, (int)&v16);
  v25 = 1000000000.0;
  v24 = 0.0;
  std::complex<double>::complex((int)&v18, 0, -1074790400, 0, -1074790400);
  nc = v18;
  dword_8050994 = v19;
  dword_8050998 = v20;
  dword_805099C = v21;
  for ( i = 0; i <= 199; ++i )
  {
    v10 = (v25 + v24) / 2.0;
    std::operator*<double>((int)&v22, (int)&v11, &v10);
    std::operator+<double>((int)&v6, (int)&v12, (int)&v22);
    nc = v6;
    dword_8050994 = v7;
    dword_8050998 = v8;
    dword_805099C = v9;
    v3 = !crossCC(
            c[4 * a1],
            c[4 * a1 + 1],
            c[4 * a1 + 2],
            c[4 * a1 + 3],
            (long double)r[a1],
            v6,
            v7,
            v8,
            v9,
            (long double)r[a3])
      && !crossCC(
            c[4 * a2],
            c[4 * a2 + 1],
            c[4 * a2 + 2],
            c[4 * a2 + 3],
            (long double)r[a2],
            nc,
            dword_8050994,
            dword_8050998,
            dword_805099C,
            (long double)r[a3]);
    if ( v3 )
      v25 = v10;
    else
      v24 = v10;
  }
  v4 = *(double *)std::complex<double>::real((int)&nc) >= 0.0
    && W >= (long double)*(double *)std::complex<double>::real((int)&nc)
    && *(double *)std::complex<double>::imag((int)&nc) >= 0.0
    && L >= (long double)*(double *)std::complex<double>::imag((int)&nc);
  return v4 != 0;
}
// 804B2A8: using guessed type double W;
// 804B2B0: using guessed type double L;
// 804B2C0: using guessed type int r[];
// 804C420: using guessed type int c[];
// 8050990: using guessed type int nc;
// 8050994: using guessed type int dword_8050994;
// 8050998: using guessed type int dword_8050998;
// 805099C: using guessed type int dword_805099C;

//----- (08048EB4) --------------------------------------------------------
int solve(void)
{
  int *v0; // ecx@6
  int v1; // edx@6
  int v2; // edx@6
  int v3; // eax@13
  int v4; // ebx@13
  int v5; // esi@13
  int v6; // eax@13
  long double v7; // fst7@13
  int *v8; // ecx@13
  int v9; // edx@13
  int v10; // edx@13
  int result; // eax@15
  int v12; // [sp+20h] [bp-28h]@13
  int v13; // [sp+24h] [bp-24h]@13
  int v14; // [sp+28h] [bp-20h]@13
  int v15; // [sp+2Ch] [bp-1Ch]@13
  unsigned __int8 v16; // [sp+33h] [bp-15h]@2
  int k; // [sp+34h] [bp-14h]@3
  int j; // [sp+38h] [bp-10h]@2
  int i; // [sp+3Ch] [bp-Ch]@1

  for ( i = 2; ; ++i )
  {
    result = N;
    if ( i >= N )
      break;
    v16 = 0;
    for ( j = 0; ; ++j )
    {
      if ( j < i )
      {
        for ( k = 0; k < i; ++k )
        {
          if ( j != k && put(j, k, i) )
          {
            v0 = &c[4 * i];
            v1 = dword_8050994;
            *v0 = nc;
            v0[1] = v1;
            v2 = dword_805099C;
            v0[2] = dword_8050998;
            v0[3] = v2;
            break;
          }
        }
        if ( !v16 )
          continue;
      }
      break;
    }
    if ( v16 ^ 1 )
    {
      v3 = std::complex<double>::imag(16 * (i - 1) + 134530080);
      v4 = *(_DWORD *)v3;
      v5 = *(_DWORD *)(v3 + 4);
      v6 = std::complex<double>::real(16 * (i - 1) + 134530080);
      v7 = *(double *)v6 + (long double)(r[i] + r[i - 1]) / 2.0;
      std::complex<double>::complex((int)&v12, COERCE_UNSIGNED_INT64(v7), COERCE_UNSIGNED_INT64(v7) >> 32, v4, v5);
      v8 = &c[4 * i];
      v9 = v13;
      *v8 = v12;
      v8[1] = v9;
      v10 = v15;
      v8[2] = v14;
      v8[3] = v10;
    }
  }
  return result;
}
// 804B2A0: using guessed type int N;
// 804B2C0: using guessed type int r[];
// 804C420: using guessed type int c[];
// 8050990: using guessed type int nc;
// 8050994: using guessed type int dword_8050994;
// 8050998: using guessed type int dword_8050998;
// 805099C: using guessed type int dword_805099C;

//----- (08049008) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  int v4; // eax@2
  int v5; // eax@10
  int v6; // ebx@10
  int v7; // esi@10
  int v8; // eax@10
  int v9; // eax@10
  int v10; // eax@10
  int v12; // [sp+20h] [bp-38h]@7
  int v13; // [sp+24h] [bp-34h]@7
  int v14; // [sp+28h] [bp-30h]@7
  int v15; // [sp+2Ch] [bp-2Ch]@7
  int v16; // [sp+30h] [bp-28h]@8
  int v17; // [sp+34h] [bp-24h]@8
  int v18; // [sp+38h] [bp-20h]@8
  int v19; // [sp+3Ch] [bp-1Ch]@8
  int v20; // [sp+40h] [bp-18h]@1
  int k; // [sp+44h] [bp-14h]@9
  int j; // [sp+48h] [bp-10h]@2
  signed int i; // [sp+4Ch] [bp-Ch]@1

  v20 = nextInt();
  for ( i = 1; i <= v20; ++i )
  {
    v3 = std::istream::operator>>(&edata, &N);
    v4 = std::istream::operator>>(v3, &W);
    std::istream::operator>>(v4, &L);
    for ( j = 0; j < N; ++j )
      std::istream::operator>>(&edata, 4 * j + 134525632);
    if ( L > (long double)W )
      std::swap<double>((int)&W, (int)&L);
    std::sort<int *>((int)r, 4 * N + 134525632);
    std::reverse<int *>((int)r, 4 * N + 134525632);
    std::complex<double>::complex((int)&v12, 0, 0, 0, 0);
    c[0] = v12;
    dword_804C424 = v13;
    dword_804C428 = v14;
    dword_804C42C = v15;
    if ( N > 0 )
    {
      std::complex<double>::complex(
        (int)&v16,
        COERCE_UNSIGNED_INT64((long double)(r[0] + dword_804B2C4) / 2.0),
        COERCE_UNSIGNED_INT64((long double)(r[0] + dword_804B2C4) / 2.0) >> 32,
        0,
        0);
      dword_804C430 = v16;
      dword_804C434 = v17;
      dword_804C438 = v18;
      dword_804C43C = v19;
      solve();
    }
    printf("Case #%d:", i);
    for ( k = 0; k < N; ++k )
    {
      std::operator<<<std::char_traits<char>>(&std::cout, 32);
      v5 = std::complex<double>::imag(16 * k + 134530080);
      v6 = *(_DWORD *)v5;
      v7 = *(_DWORD *)(v5 + 4);
      v8 = std::complex<double>::real(16 * k + 134530080);
      v9 = std::ostream::operator<<(&std::cout, *(_DWORD *)v8, *(_DWORD *)(v8 + 4));
      v10 = std::operator<<<std::char_traits<char>>(v9, 32);
      std::ostream::operator<<(v10, v6, v7);
    }
    std::ostream::operator<<(&std::cout, (const char *)&std::endl<char,std::char_traits<char>>);
  }
  return 0;
}
// 3: found interdependent unknown calls
// 80487B0: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD);
// 80487D0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048820: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048870: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048890: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 804B2A0: using guessed type int N;
// 804B2A8: using guessed type double W;
// 804B2B0: using guessed type double L;
// 804B2C0: using guessed type int r[];
// 804B2C4: using guessed type int dword_804B2C4;
// 804C420: using guessed type int c[];
// 804C424: using guessed type int dword_804C424;
// 804C428: using guessed type int dword_804C428;
// 804C42C: using guessed type int dword_804C42C;
// 804C430: using guessed type int dword_804C430;
// 804C434: using guessed type int dword_804C434;
// 804C438: using guessed type int dword_804C438;
// 804C43C: using guessed type int dword_804C43C;

//----- (0804929B) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  signed int v2; // esi@3
  int v3; // ebx@3
  int result; // eax@6

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    v2 = 1110;
    v3 = (int)c;
    while ( v2 != -1 )
    {
      std::complex<double>::complex(v3, 0, 0, 0, 0);
      v3 += 16;
      --v2;
    }
    result = std::complex<double>::complex((int)&nc, 0, 0, 0, 0);
  }
  return result;
}
// 80487C0: using guessed type int __cxa_atexit(const char *, ...);
// 804C420: using guessed type int c[];
// 8050990: using guessed type int nc;

//----- (0804935C) --------------------------------------------------------
int GLOBAL__sub_I_EPS()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049378) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08049390) --------------------------------------------------------
long double __cdecl std::abs(double a1)
{
  return fabs(a1);
}

//----- (080493A9) --------------------------------------------------------
int __cdecl std::__complex_abs(int a1, int a2, int a3, int a4)
{
  return cabs(a1, a2, a3, a4, a1, a2, a3, a4);
}
// 8048850: using guessed type int __cdecl cabs(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (080493EA) --------------------------------------------------------
int __cdecl std::complex<double>::complex(int a1, int a2, int a3, int a4, int a5)
{
  int result; // eax@1

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  result = a4;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  return result;
}

//----- (08049428) --------------------------------------------------------
int __cdecl std::complex<double>::real(int a1)
{
  return a1;
}

//----- (08049430) --------------------------------------------------------
int __cdecl std::complex<double>::real(int a1)
{
  return a1;
}

//----- (08049438) --------------------------------------------------------
int __cdecl std::complex<double>::imag(int a1)
{
  return a1 + 8;
}

//----- (08049444) --------------------------------------------------------
int __cdecl std::complex<double>::imag(int a1)
{
  return a1 + 8;
}

//----- (08049450) --------------------------------------------------------
int __cdecl std::complex<double>::operator*=(int a1, double a2)
{
  long double v2; // fst7@1

  v2 = a2 * *(double *)(a1 + 8);
  *(double *)a1 = *(double *)a1 * a2;
  *(double *)(a1 + 8) = v2;
  return a1;
}

//----- (080494B8) --------------------------------------------------------
int __userpurge std::complex<double>::__rep@<eax>(int a1, int a2)
{
  int v2; // ebx@1
  int v3; // edx@1
  int v4; // eax@1

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return a1;
}

//----- (080494E2) --------------------------------------------------------
int __userpurge std::operator-<double>@<eax>(int a1, int a2, int a3)
{
  int v3; // edx@1
  int v4; // edx@1

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  std::complex<double>::operator-=<double>(a1, a3);
  return a1;
}

//----- (08049523) --------------------------------------------------------
int __cdecl std::abs<double>(int a1)
{
  int v2; // [sp+10h] [bp-18h]@1
  int v3; // [sp+14h] [bp-14h]@1
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::complex<double>::__rep((int)&v2, a1);
  return std::__complex_abs(v2, v3, v4, v5);
}

//----- (08049564) --------------------------------------------------------
int __userpurge std::operator+<double>@<eax>(int a1, int a2, int a3)
{
  int v3; // edx@1
  int v4; // edx@1

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  std::complex<double>::operator+=<double>(a1, a3);
  return a1;
}

//----- (080495A5) --------------------------------------------------------
int __userpurge std::operator*<double>@<eax>(int a1, int a2, double *a3)
{
  int v3; // edx@1
  int v4; // edx@1

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  std::complex<double>::operator*=(a1, *a3);
  return a1;
}

//----- (080495EF) --------------------------------------------------------
int __userpurge std::operator*<double>@<eax>(int a1, int a2, int a3)
{
  int v3; // edx@1
  int v4; // edx@1

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  std::complex<double>::operator*=<double>(a1, a3);
  return a1;
}

//----- (08049630) --------------------------------------------------------
int __cdecl std::swap<double>(int a1, int a2)
{
  int v2; // ST08_4@1
  int v3; // ST0C_4@1
  int v4; // edx@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  result = v2;
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 4) = v3;
  return result;
}

//----- (08049664) --------------------------------------------------------
int __cdecl std::sort<int *>(int a1, unsigned int a2)
{
  int result; // eax@1
  int v3; // eax@2

  result = a1;
  if ( a1 != a2 )
  {
    v3 = std::__lg((signed int)(a2 - a1) >> 2);
    std::__introsort_loop<int *,int>(a1, a2, 2 * v3);
    result = std::__final_insertion_sort<int *>(a1, a2);
  }
  return result;
}

//----- (080496B3) --------------------------------------------------------
int __cdecl std::reverse<int *>(int a1, int a2)
{
  char v3; // [sp+Fh] [bp-19h]@1

  std::__iterator_category<int *>((int)&v3);
  return std::__reverse<int *>(a1, a2);
}

//----- (080496F4) --------------------------------------------------------
int __cdecl std::complex<double>::operator-=<double>(int a1, int a2)
{
  *(double *)a1 = *(double *)a1 - *(double *)std::complex<double>::real(a2);
  *(double *)(a1 + 8) = *(double *)(a1 + 8) - *(double *)std::complex<double>::imag(a2);
  return a1;
}

//----- (08049734) --------------------------------------------------------
int __cdecl std::complex<double>::operator+=<double>(int a1, int a2)
{
  *(double *)a1 = *(double *)std::complex<double>::real(a2) + *(double *)a1;
  *(double *)(a1 + 8) = *(double *)std::complex<double>::imag(a2) + *(double *)(a1 + 8);
  return a1;
}

//----- (08049774) --------------------------------------------------------
int __cdecl std::complex<double>::operator*=<double>(int a1, int a2)
{
  int v2; // eax@1
  int v3; // edx@1
  int v4; // eax@1
  int v5; // edx@1
  int v6; // ebx@1
  int v7; // eax@1
  int v8; // edx@1
  int v10; // [sp+30h] [bp-48h]@1
  int v11; // [sp+34h] [bp-44h]@1
  int v12; // [sp+38h] [bp-40h]@1
  int v13; // [sp+3Ch] [bp-3Ch]@1
  int v14; // [sp+40h] [bp-38h]@1
  int v15; // [sp+44h] [bp-34h]@1
  int v16; // [sp+48h] [bp-30h]@1
  int v17; // [sp+4Ch] [bp-2Ch]@1
  int v18; // [sp+50h] [bp-28h]@1
  int v19; // [sp+54h] [bp-24h]@1
  int v20; // [sp+58h] [bp-20h]@1
  int v21; // [sp+5Ch] [bp-1Ch]@1

  v2 = std::complex<double>::real(a2);
  v3 = *(_DWORD *)(v2 + 4);
  v20 = *(_DWORD *)v2;
  v21 = v3;
  v14 = v20;
  v15 = v3;
  v16 = v18;
  v17 = v19;
  v4 = std::complex<double>::imag(a2);
  v5 = *(_DWORD *)(v4 + 4);
  v18 = *(_DWORD *)v4;
  v19 = v5;
  v14 = v20;
  v15 = v21;
  v16 = v18;
  v17 = v5;
  __muldc3(&v10, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), v20, v21, v18, v5);
  v6 = v11;
  v7 = v12;
  v8 = v13;
  *(_DWORD *)a1 = v10;
  *(_DWORD *)(a1 + 4) = v6;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  return a1;
}
// 8048840: using guessed type int __cdecl __muldc3(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (08049852) --------------------------------------------------------
int __cdecl std::__introsort_loop<int *,int>(int a1, unsigned int a2, int a3)
{
  int result; // eax@3
  int v4; // ST1C_4@4

  while ( 1 )
  {
    result = a2 - a1;
    if ( (signed int)(a2 - a1) <= 67 )
      break;
    if ( !a3 )
      return std::partial_sort<int *>(a1, a2, a2);
    --a3;
    v4 = std::__unguarded_partition_pivot<int *>(a1, a2);
    std::__introsort_loop<int *,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (080498C3) --------------------------------------------------------
int __cdecl std::__final_insertion_sort<int *>(int a1, int a2)
{
  int result; // eax@2

  if ( a2 - a1 <= 67 )
  {
    result = std::__insertion_sort<int *>(a1, a2);
  }
  else
  {
    std::__insertion_sort<int *>(a1, a1 + 64);
    result = std::__unguarded_insertion_sort<int *>(a1 + 64, a2);
  }
  return result;
}

//----- (08049918) --------------------------------------------------------
int __stdcall std::__iterator_category<int *>(int a1)
{
  return a1;
}

//----- (08049923) --------------------------------------------------------
int __cdecl std::__reverse<int *>(int a1, int a2)
{
  int result; // eax@1
  int i; // [sp+24h] [bp+Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a2 - 4; ; i -= 4 )
    {
      result = a1;
      if ( a1 >= (unsigned int)i )
        break;
      std::iter_swap<int *,int *>(a1, i);
      a1 += 4;
    }
  }
  return result;
}

//----- (0804995D) --------------------------------------------------------
int __cdecl std::partial_sort<int *>(int a1, int a2, unsigned int a3)
{
  std::__heap_select<int *>(a1, a2, a3);
  return std::sort_heap<int *>(a1, a2);
}

//----- (08049990) --------------------------------------------------------
int __cdecl std::__unguarded_partition_pivot<int *>(int a1, int a2)
{
  std::__move_median_first<int *>(
    a1,
    4 * ((signed int)(((unsigned int)(a2 - a1) >> 31) + ((a2 - a1) >> 2)) >> 1) + a1,
    a2 - 4);
  return std::__unguarded_partition<int *,int>(a1 + 4, a2, a1);
}

//----- (080499F5) --------------------------------------------------------
int __cdecl std::__insertion_sort<int *>(int a1, int a2)
{
  int result; // eax@1
  int v3; // ST18_4@4
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a1 + 4; ; i += 4 )
    {
      result = i;
      if ( i == a2 )
        break;
      if ( *(_DWORD *)i >= *(_DWORD *)a1 )
      {
        std::__unguarded_linear_insert<int *>(i);
      }
      else
      {
        v3 = *(_DWORD *)i;
        std::copy_backward<int *,int *>(a1, i, i + 4);
        *(_DWORD *)a1 = v3;
      }
    }
  }
  return result;
}

//----- (08049A65) --------------------------------------------------------
int __cdecl std::__unguarded_insertion_sort<int *>(int a1, int a2)
{
  int result; // eax@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; i += 4 )
  {
    result = i;
    if ( i == a2 )
      break;
    std::__unguarded_linear_insert<int *>(i);
  }
  return result;
}

//----- (08049A8C) --------------------------------------------------------
int __cdecl std::iter_swap<int *,int *>(int a1, int a2)
{
  return std::__iter_swap<true>::iter_swap<int *,int *>(a1, a2);
}

//----- (08049AA6) --------------------------------------------------------
int *__cdecl std::__heap_select<int *>(int a1, int a2, unsigned int a3)
{
  int *result; // eax@5
  int *i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<int *>(a1, a2);
  for ( i = (int *)a2; ; ++i )
  {
    result = i;
    if ( (unsigned int)i >= a3 )
      break;
    if ( *i < *(_DWORD *)a1 )
      std::__pop_heap<int *>(a1, a2, i);
  }
  return result;
}

//----- (08049AFB) --------------------------------------------------------
int __cdecl std::sort_heap<int *>(int a1, int a2)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a2 - a1;
    if ( a2 - a1 <= 7 )
      break;
    a2 -= 4;
    std::__pop_heap<int *>(a1, a2, (int *)a2);
  }
  return result;
}

//----- (08049B31) --------------------------------------------------------
int __cdecl std::__move_median_first<int *>(int a1, int a2, int a3)
{
  int result; // eax@3

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
  {
    result = *(_DWORD *)a3;
    if ( *(_DWORD *)a1 >= *(_DWORD *)a3 )
    {
      if ( *(_DWORD *)a2 >= *(_DWORD *)a3 )
        result = std::iter_swap<int *,int *>(a1, a2);
      else
        result = std::iter_swap<int *,int *>(a1, a3);
    }
  }
  else if ( *(_DWORD *)a2 >= *(_DWORD *)a3 )
  {
    result = *(_DWORD *)a3;
    if ( *(_DWORD *)a1 < *(_DWORD *)a3 )
      result = std::iter_swap<int *,int *>(a1, a3);
  }
  else
  {
    result = std::iter_swap<int *,int *>(a1, a2);
  }
  return result;
}

//----- (08049BCF) --------------------------------------------------------
int __cdecl std::__unguarded_partition<int *,int>(int a1, int a2, int a3)
{
  while ( 1 )
  {
    while ( *(_DWORD *)a1 < *(_DWORD *)a3 )
      a1 += 4;
    for ( a2 -= 4; *(_DWORD *)a3 < *(_DWORD *)a2; a2 -= 4 )
      ;
    if ( a1 >= (unsigned int)a2 )
      break;
    std::iter_swap<int *,int *>(a1, a2);
    a1 += 4;
  }
  return a1;
}

//----- (08049C29) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (08049C61) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<int *>(int a1)
{
  int result; // eax@4
  int v2; // [sp+8h] [bp-8h]@1
  int i; // [sp+Ch] [bp-4h]@1

  v2 = *(_DWORD *)a1;
  for ( i = a1 - 4; *(_DWORD *)i > v2; i -= 4 )
  {
    *(_DWORD *)a1 = *(_DWORD *)i;
    a1 = i;
  }
  result = a1;
  *(_DWORD *)a1 = v2;
  return result;
}

//----- (08049CA3) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<int *,int *>(int a1, int a2)
{
  return std::swap<int>(a1, a2);
}

//----- (08049CBD) --------------------------------------------------------
int __cdecl std::make_heap<int *>(int a1, int a2)
{
  int result; // eax@1
  int i; // [sp+1Ch] [bp-Ch]@2

  result = a2 - a1;
  if ( a2 - a1 > 7 )
  {
    for ( i = (((a2 - a1) >> 2) - 2) / 2; ; --i )
    {
      result = std::__adjust_heap<int *,int,int>(a1, i, (a2 - a1) >> 2, *(_DWORD *)(4 * i + a1));
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (08049D39) --------------------------------------------------------
int __cdecl std::__pop_heap<int *>(int a1, int a2, int *a3)
{
  int v3; // ST1C_4@1

  v3 = *a3;
  *a3 = *(_DWORD *)a1;
  return std::__adjust_heap<int *,int,int>(a1, 0, (a2 - a1) >> 2, v3);
}

//----- (08049D7E) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (08049D91) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (08049DD5) --------------------------------------------------------
int __cdecl std::swap<int>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (08049DF7) --------------------------------------------------------
int __cdecl std::__adjust_heap<int *,int,int>(int a1, int a2, int a3, int a4)
{
  int v4; // ST1C_4@8
  int v6; // [sp+18h] [bp-10h]@1
  int i; // [sp+1Ch] [bp-Ch]@1

  v6 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    if ( *(_DWORD *)(4 * i + a1) < *(_DWORD *)(4 * (i + 0x3FFFFFFF) + a1) )
      --i;
    *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * i + a1);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    v4 = 2 * (i + 1);
    *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * (v4 + 0x3FFFFFFF) + a1);
    a2 = v4 - 1;
  }
  return std::__push_heap<int *,int,int>(a1, a2, v6, a4);
}

//----- (08049EF3) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049EFB) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (08049F0E) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (08049F33) --------------------------------------------------------
int __cdecl std::__push_heap<int *,int,int>(int a1, int a2, int a3, int a4)
{
  int result; // eax@5
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - 1) / 2; a2 > a3 && *(_DWORD *)(4 * i + a1) < a4; i = (i - 1) / 2 )
  {
    *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * i + a1);
    a2 = i;
  }
  result = a4;
  *(_DWORD *)(a1 + 4 * a2) = a4;
  return result;
}

//----- (08049FB7) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804A010) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804A020) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804A07A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804A080) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804B004;
  v3 = (void (__cdecl *)())off_804B004;
  if ( off_804B004 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804B004: using guessed type int (*off_804B004)();

//----- (0804A0A8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 66 function(s)"
