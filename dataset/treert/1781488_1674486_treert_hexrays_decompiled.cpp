/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// FILE *freopen(const char *filename, const char *modes, FILE *stream);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// int puts(const char *s);
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int init(void);
char __cdecl gao2(int a1);
char gao(void);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_adj();
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
std::_Bit_reference *__cdecl std::_Bit_reference::_Bit_reference(std::_Bit_reference *this, unsigned __int32 *a2, unsigned __int32 a3);
bool __cdecl std::_Bit_reference::operator bool(int a1);
int __cdecl std::_Bit_reference::operator=(int a1, char a2);
int __cdecl std::_Bit_reference::operator=(int a1, int a2);
void std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator();
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_iterator_base *this, unsigned __int32 *a2, unsigned int a3);
bool __cdecl std::_Bit_iterator_base::_M_bump_up(std::_Bit_iterator_base *this);
bool __cdecl std::_Bit_iterator_base::_M_bump_down(std::_Bit_iterator_base *this);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_M_incr(std::_Bit_iterator_base *this, int a2);
bool __cdecl std::_Bit_iterator_base::operator==(int a1, int a2);
int __cdecl std::_Bit_iterator_base::operator!=(int a1, int a2);
int __cdecl std::operator-(int a1, int a2);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this, unsigned __int32 *a2, unsigned int a3);
std::_Bit_reference *__stdcall std::_Bit_iterator::operator*(std::_Bit_reference *a1, int a2);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator++(std::_Bit_iterator_base *a1);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator--(std::_Bit_iterator_base *a1);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator+=(std::_Bit_iterator_base *a1, int a2);
// int __userpurge std::_Bit_iterator::operator+@<eax>(int a1, int a2, int a3);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, unsigned __int32 *a2, unsigned int a3);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, const std::_Bit_iterator *a2);
bool __cdecl std::_Bit_const_iterator::operator*(int a1);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::operator++(std::_Bit_iterator_base *a1);
int __cdecl std::__fill_bvector(char a1, int a2, char a3, int a4, char a5);
int __cdecl std::fill(int, int, unsigned __int32 *, int, int); // idb
int __cdecl std::fill<unsigned long *,int>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1);
std::_Bit_iterator *__cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::assign(int a1, unsigned int a2, int a3);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::assign(int a1, int a2, char *a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
std::_Bit_reference *__stdcall std::vector<bool,std::allocator<bool>>::operator[](std::_Bit_reference *a1, int a2, unsigned int a3);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::__niter_base<unsigned long *>(int a1);
int __cdecl std::__fill_a<unsigned long *,int>(int a1, int a2, int a3);
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
void std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl();
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1);
void __cdecl std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(int a1);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_assign(int a1, unsigned int a2, int a3);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::_M_fill_assign(int a1, int a2, char a3);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::_Iter_base<unsigned long *,false>::_S_base(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1);
void std::allocator<unsigned long>::~allocator();
void __cdecl std::_Bvector_base<std::allocator<bool>>::_M_deallocate(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<int>::~allocator();
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<int *>();
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::capacity(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::swap(int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1);
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2);
int __cdecl std::fill<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>,std::vector<int,std::allocator<int>>>(char a1, char a2, int a3);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2);
int __cdecl std::fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::vector<bool,std::allocator<bool>>::size(int a1);
// int __userpurge std::vector<bool,std::allocator<bool>>::end@<eax>(int a1, int a2);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::insert(int a1, int a2, int a3, unsigned int a4, int a5);
int __cdecl std::vector<bool,std::allocator<bool>>::_M_erase_at_end(int a1, int a2, int a3);
// int __userpurge std::vector<bool,std::allocator<bool>>::begin@<eax>(int a1, int a2);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void std::allocator<unsigned long>::allocator();
void __gnu_cxx::new_allocator<unsigned long>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<unsigned long>::deallocate(int a1, void *a2);
void std::allocator<int>::allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<int *>();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_M_swap_data(int a1, int a2);
void __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::_S_on_swap();
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>>(char a1);
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::begin(std::_Bit_const_iterator *a1, std::_Bit_iterator *a2);
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::end(std::_Bit_const_iterator *a1, int a2);
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::_M_fill_insert(int a1, int a2, int a3, unsigned int a4, std::_Bit_iterator_base *a5);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::destroy();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<unsigned long>::new_allocator();
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl std::swap<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void std::__alloc_swap<std::allocator<std::vector<int,std::allocator<int>>>,true>::_S_do_it();
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>,true>::_S_base(char a1);
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1);
int __cdecl std::vector<bool,std::allocator<bool>>::capacity(int a1);
// int __userpurge std::copy_backward<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::vector<bool,std::allocator<bool>>::_M_check_len(int, int, char *); // idb
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_allocate(int a1, int a2);
// int __userpurge std::vector<bool,std::allocator<bool>>::_M_copy_aligned@<eax>(int a1, int a2, int a3, int a4, unsigned __int32 *a5, int a6, int a7);
// int __userpurge std::copy<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
unsigned int __cdecl std::_Bvector_base<std::allocator<bool>>::_S_nword(int a1);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4);
// int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
// int __userpurge std::__miter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_backward_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::vector<bool,std::allocator<bool>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<unsigned long>::allocate(int a1, unsigned int a2);
char *__cdecl std::copy<unsigned long *,unsigned long *>(int a1, int a2, int a3);
// int __userpurge std::copy<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
// int __userpurge std::__copy_move_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
// int __userpurge std::_Iter_base<std::_Bit_iterator,false>::_S_base@<eax>(int a1, int a2, int a3);
// int __userpurge std::__niter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_backward_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(int a1);
signed int __gnu_cxx::new_allocator<unsigned long>::max_size();
int __cdecl std::__miter_base<unsigned long *>(int a1);
char *__cdecl std::__copy_move_a2<false,unsigned long *,unsigned long *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
// int __userpurge std::__copy_move_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
char *__cdecl std::__copy_move_a<false,unsigned long *,unsigned long *>(void *src, int a2, void *dest);
// int __userpurge std::_Iter_base<std::_Bit_const_iterator,false>::_S_base@<eax>(int a1, int a2, int a3);
// int __userpurge std::__niter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, int a2, void *dest);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void std::allocator<int>::allocator();
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __cdecl std::vector<bool,std::allocator<bool>>::~vector(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804F80C)() = &GLOBAL__sub_I_adj; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
FILE *stdin; // idb
FILE *stdout; // idb
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN adj; // weak
_UNKNOWN in; // weak
_UNKNOWN vis; // weak
int n; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048708) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048770: using guessed type int __gmon_start__(void);

//----- (08048880) --------------------------------------------------------
#error "8048883: positive sp value has been found (funcsize=2)"

//----- (080488B0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 80488B0: could not find valid save-restore pair for ebp

//----- (080488E0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80488E0: could not find valid save-restore pair for ebp

//----- (08048920) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804F814: using guessed type int _DTOR_LIST__[];
// 804F9A4: using guessed type char completed_3328;
// 804F9A8: using guessed type int dtor_idx_3330;

//----- (08048970) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048970: could not find valid save-restore pair for ebp

//----- (080489A0) --------------------------------------------------------
int init(void)
{
  int v0; // eax@3
  int result; // eax@6
  unsigned int v2; // [sp+18h] [bp-30h]@3
  int v3; // [sp+1Ch] [bp-2Ch]@2
  char v4; // [sp+20h] [bp-28h]@1
  char v5; // [sp+2Fh] [bp-19h]@1
  char v6; // [sp+30h] [bp-18h]@3
  int j; // [sp+38h] [bp-10h]@2
  int i; // [sp+3Ch] [bp-Ch]@1

  scanf("%d", &n);
  std::vector<int,std::allocator<int>>::vector((int)&v4);
  std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::assign(
    (int)&adj,
    n + 1,
    (int)&v4);
  std::vector<int,std::allocator<int>>::~vector((int)&v4);
  v5 = 1;
  std::vector<bool,std::allocator<bool>>::assign((int)&in, n + 1, &v5);
  for ( i = 1; ; ++i )
  {
    result = n;
    if ( i > n )
      break;
    scanf("%d", &v3);
    for ( j = 0; j < v3; ++j )
    {
      scanf("%d", &v2);
      v0 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&adj,
             i);
      std::vector<int,std::allocator<int>>::push_back(v0, (int)&v2);
      std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v6, (int)&in, v2);
      std::_Bit_reference::operator=((int)&v6, 0);
    }
  }
  return result;
}
// 804F9E0: using guessed type int n;

//----- (08048ADC) --------------------------------------------------------
char __cdecl gao2(int a1)
{
  char result; // al@2
  int v2; // ebx@4
  int v3; // eax@4
  unsigned int v4; // ebx@7
  int v5; // eax@7
  char v6; // [sp+18h] [bp-20h]@1
  char v7; // [sp+20h] [bp-18h]@3
  int v8; // [sp+28h] [bp-10h]@4
  unsigned int i; // [sp+2Ch] [bp-Ch]@3

  std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v6, (int)&vis, a1);
  if ( std::_Bit_reference::operator bool((int)&v6) )
  {
    result = 1;
  }
  else
  {
    std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v7, (int)&vis, a1);
    std::_Bit_reference::operator=((int)&v7, 1);
    for ( i = 0; ; ++i )
    {
      v4 = i;
      v5 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&adj,
             a1);
      if ( v4 >= std::vector<int,std::allocator<int>>::size(v5) )
        break;
      v2 = i;
      v3 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&adj,
             a1);
      v8 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v3, v2);
      if ( (unsigned __int8)gao2(v8) )
        return 1;
    }
    result = 0;
  }
  return result;
}

//----- (08048BBA) --------------------------------------------------------
char gao(void)
{
  char v1; // [sp+10h] [bp-18h]@2
  char v2; // [sp+1Bh] [bp-Dh]@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = 1; i <= n; ++i )
  {
    std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v1, (int)&in, i);
    if ( std::_Bit_reference::operator bool((int)&v1) )
    {
      v2 = 0;
      std::vector<bool,std::allocator<bool>>::assign((int)&vis, n + 1, &v2);
      if ( gao2(i) )
        return 1;
    }
  }
  return 0;
}
// 804F9E0: using guessed type int n;

//----- (08048C44) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@5
  int v5; // [sp+18h] [bp-8h]@1
  int v6; // [sp+1Ch] [bp-4h]@1

  freopen("A-small-attempt0.in", "r", stdin);
  freopen("A.out", "w", stdout);
  scanf("%d", &v5);
  v6 = 0;
  while ( 1 )
  {
    v3 = v5--;
    if ( v3 == 0 )
      break;
    ++v6;
    printf("Case #%d: ", v6);
    init();
    if ( gao() )
      puts("Yes");
    else
      puts("No");
  }
  return 0;
}

//----- (08048D0A) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector((int)&adj);
    __cxa_atexit(
      (const char *)std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector,
      &adj,
      &_dso_handle);
    std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&in);
    __cxa_atexit((const char *)std::vector<bool,std::allocator<bool>>::~vector, &in, &_dso_handle);
    std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&vis);
    result = __cxa_atexit((const char *)std::vector<bool,std::allocator<bool>>::~vector, &vis, &_dso_handle);
  }
  return result;
}
// 8048760: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048DC9) --------------------------------------------------------
int GLOBAL__sub_I_adj()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048DE5) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048DED) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08048DF2) --------------------------------------------------------
std::_Bit_reference *__cdecl std::_Bit_reference::_Bit_reference(std::_Bit_reference *this, unsigned __int32 *a2, unsigned __int32 a3)
{
  std::_Bit_reference *result; // eax@1

  *(_DWORD *)this = a2;
  result = this;
  *((_DWORD *)this + 1) = a3;
  return result;
}

//----- (08048E08) --------------------------------------------------------
bool __cdecl std::_Bit_reference::operator bool(int a1)
{
  return (**(_DWORD **)a1 & *(_DWORD *)(a1 + 4)) != 0;
}

//----- (08048E22) --------------------------------------------------------
int __cdecl std::_Bit_reference::operator=(int a1, char a2)
{
  if ( a2 )
    **(_DWORD **)a1 |= *(_DWORD *)(a1 + 4);
  else
    **(_DWORD **)a1 &= ~*(_DWORD *)(a1 + 4);
  return a1;
}

//----- (08048E6A) --------------------------------------------------------
int __cdecl std::_Bit_reference::operator=(int a1, int a2)
{
  bool v2; // al@1

  v2 = std::_Bit_reference::operator bool(a2);
  return std::_Bit_reference::operator=(a1, v2);
}

//----- (08048E92) --------------------------------------------------------
void std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator()
{
  ;
}

//----- (08048E98) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_iterator_base *this, unsigned __int32 *a2, unsigned int a3)
{
  std::_Bit_iterator_base *result; // eax@1

  std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator();
  *(_DWORD *)this = a2;
  result = this;
  *((_DWORD *)this + 1) = a3;
  return result;
}

//----- (08048EBC) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::_M_bump_up(std::_Bit_iterator_base *this)
{
  int v1; // eax@1
  bool result; // al@1

  v1 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = v1 + 1;
  result = v1 == 31;
  if ( result )
  {
    *((_DWORD *)this + 1) = 0;
    result = (char)this;
    *(_DWORD *)this += 4;
  }
  return result;
}

//----- (08048EF2) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::_M_bump_down(std::_Bit_iterator_base *this)
{
  int v1; // eax@1
  bool result; // al@1

  v1 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = v1 - 1;
  result = v1 == 0;
  if ( result )
  {
    *((_DWORD *)this + 1) = 31;
    result = (char)this;
    *(_DWORD *)this -= 4;
  }
  return result;
}

//----- (08048F26) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_M_incr(std::_Bit_iterator_base *this, int a2)
{
  signed int v2; // ST0C_4@1
  std::_Bit_iterator_base *result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v2 = *((_DWORD *)this + 1) + a2;
  *(_DWORD *)this += 4 * (v2 / 32);
  v4 = ((((unsigned int)(v2 >> 31) >> 27) + (_BYTE)v2) & 0x1F) - ((unsigned int)(v2 >> 31) >> 27);
  if ( v4 < 0 )
  {
    v4 += 32;
    *(_DWORD *)this -= 4;
  }
  result = this;
  *((_DWORD *)this + 1) = v4;
  return result;
}

//----- (08048F90) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
}

//----- (08048FBA) --------------------------------------------------------
int __cdecl std::_Bit_iterator_base::operator!=(int a1, int a2)
{
  int v2; // eax@1

  LOBYTE(v2) = std::_Bit_iterator_base::operator==(a1, a2);
  return v2 ^ 1;
}

//----- (08048FD7) --------------------------------------------------------
int __cdecl std::operator-(int a1, int a2)
{
  return *(_DWORD *)(a1 + 4) + 32 * ((*(_DWORD *)a1 - *(_DWORD *)a2) >> 2) - *(_DWORD *)(a2 + 4);
}

//----- (08049006) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, 0, 0);
}

//----- (0804902A) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this, unsigned __int32 *a2, unsigned int a3)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, a2, a3);
}

//----- (0804904C) --------------------------------------------------------
std::_Bit_reference *__stdcall std::_Bit_iterator::operator*(std::_Bit_reference *a1, int a2)
{
  std::_Bit_reference::_Bit_reference(a1, *(unsigned __int32 **)a2, 1 << *(_DWORD *)(a2 + 4));
  return a1;
}

//----- (08049080) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator++(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_up(a1);
  return a1;
}

//----- (08049096) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator--(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_down(a1);
  return a1;
}

//----- (080490AC) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator+=(std::_Bit_iterator_base *a1, int a2)
{
  std::_Bit_iterator_base::_M_incr(a1, a2);
  return a1;
}

//----- (080490CA) --------------------------------------------------------
int __userpurge std::_Bit_iterator::operator+@<eax>(int a1, int a2, int a3)
{
  int v3; // edx@1
  std::_Bit_iterator_base *v4; // eax@1
  int v5; // edx@1
  int v7; // [sp+18h] [bp-10h]@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  v7 = *(_DWORD *)a2;
  v8 = v3;
  v4 = std::_Bit_iterator::operator+=((std::_Bit_iterator_base *)&v7, a3);
  v5 = *((_DWORD *)v4 + 1);
  *(_DWORD *)a1 = *(_DWORD *)v4;
  *(_DWORD *)(a1 + 4) = v5;
  return a1;
}

//----- (08049104) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, unsigned __int32 *a2, unsigned int a3)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, a2, a3);
}

//----- (08049126) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, const std::_Bit_iterator *a2)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, *(unsigned __int32 **)a2, *((_DWORD *)a2 + 1));
}

//----- (0804914C) --------------------------------------------------------
bool __cdecl std::_Bit_const_iterator::operator*(int a1)
{
  char v2; // [sp+18h] [bp-10h]@1

  std::_Bit_reference::_Bit_reference((std::_Bit_reference *)&v2, *(unsigned __int32 **)a1, 1 << *(_DWORD *)(a1 + 4));
  return std::_Bit_reference::operator bool((int)&v2);
}

//----- (08049186) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::operator++(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_up(a1);
  return a1;
}

//----- (0804919C) --------------------------------------------------------
int __cdecl std::__fill_bvector(char a1, int a2, char a3, int a4, char a5)
{
  int result; // eax@3
  char v6; // [sp+Ch] [bp-1Ch]@1
  char v7; // [sp+18h] [bp-10h]@2

  v6 = a5;
  while ( 1 )
  {
    result = std::_Bit_iterator_base::operator!=((int)&a1, (int)&a3);
    if ( !(_BYTE)result )
      break;
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v7, (int)&a1);
    std::_Bit_reference::operator=((int)&v7, v6);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a1);
  }
  return result;
}

//----- (080491FC) --------------------------------------------------------
int __cdecl std::fill(int a1, int a2, unsigned __int32 *a3, int a4, int a5)
{
  signed int v5; // eax@3
  char v6; // bl@5
  char v7; // bl@5
  int result; // eax@5
  int v9; // [sp+2Ch] [bp-1Ch]@5
  int v10; // [sp+30h] [bp-18h]@5
  int v11; // [sp+34h] [bp-14h]@5
  int v12; // [sp+38h] [bp-10h]@5
  int v13; // [sp+3Ch] [bp-Ch]@5

  if ( (unsigned __int32 *)a1 == a3 )
  {
    result = std::__fill_bvector(a1, a2, (char)a3, a4, *(_BYTE *)a5);
  }
  else
  {
    if ( *(_BYTE *)a5 )
      v5 = -1;
    else
      v5 = 0;
    v9 = v5;
    std::fill<unsigned long *,int>(a1 + 4, (int)a3, (int)&v9);
    v6 = *(_BYTE *)a5;
    std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v10, (unsigned __int32 *)(a1 + 4), 0);
    std::__fill_bvector(a1, a2, v10, v11, v6);
    v7 = *(_BYTE *)a5;
    std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v12, a3, 0);
    result = std::__fill_bvector(v12, v13, (char)a3, a4, v7);
  }
  return result;
}

//----- (08049316) --------------------------------------------------------
int __cdecl std::fill<unsigned long *,int>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<unsigned long *>(a2);
  v4 = std::__niter_base<unsigned long *>(a1);
  return std::__fill_a<unsigned long *,int>(v4, v3, a3);
}

//----- (0804934E) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(a1);
}

//----- (08049362) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1)
{
  return std::_Bvector_base<std::allocator<bool>>::_Bvector_base(a1);
}

//----- (08049376) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (0804938A) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (080493E2) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::assign(int a1, unsigned int a2, int a3)
{
  std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_assign(
    a1,
    a2,
    a3);
}

//----- (08049404) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::assign(int a1, int a2, char *a3)
{
  return std::vector<bool,std::allocator<bool>>::_M_fill_assign(a1, a2, *a3);
}

//----- (0804942C) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (08049444) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (080494B8) --------------------------------------------------------
std::_Bit_reference *__stdcall std::vector<bool,std::allocator<bool>>::operator[](std::_Bit_reference *a1, int a2, unsigned int a3)
{
  char v4; // [sp+18h] [bp-10h]@1

  std::_Bit_iterator::_Bit_iterator(
    (std::_Bit_iterator *)&v4,
    (unsigned __int32 *)(4 * (a3 >> 5) + *(_DWORD *)a2),
    a3 & 0x1F);
  std::_Bit_iterator::operator*(a1, (int)&v4);
  return a1;
}

//----- (08049506) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (08049520) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049532) --------------------------------------------------------
int __cdecl std::__niter_base<unsigned long *>(int a1)
{
  return std::_Iter_base<unsigned long *,false>::_S_base(a1);
}

//----- (08049545) --------------------------------------------------------
int __cdecl std::__fill_a<unsigned long *,int>(int a1, int a2, int a3)
{
  int result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    *(_DWORD *)a1 = v4;
    a1 += 4;
  }
  return result;
}

//----- (0804956C) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (08049580) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049594) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (08049616) --------------------------------------------------------
void std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl()
{
  std::allocator<unsigned long>::~allocator();
}

//----- (0804962A) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1)
{
  return std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(a1);
}

//----- (0804963E) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(int a1)
{
  std::_Bvector_base<std::allocator<bool>>::_M_deallocate(a1);
  std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl();
}

//----- (0804967A) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804968E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (080496A2) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (08049702) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804970A) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049724) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_assign(int a1, unsigned int a2, int a3)
{
  int v3; // eax@4
  int v4; // eax@5
  char v5; // [sp+1Ch] [bp-1Ch]@2
  int v6; // [sp+28h] [bp-10h]@4
  int v7; // [sp+2Ch] [bp-Ch]@4

  if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::capacity(a1) < a2 )
  {
    std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v5,
      a2,
      a3);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::swap(
      (int)&v5,
      a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v5);
  }
  else if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) < a2 )
  {
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
      (int)&v6,
      a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin(
      (int)&v7,
      a1);
    std::fill<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>,std::vector<int,std::allocator<int>>>(
      v7,
      v6,
      a3);
    std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
    v3 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
    std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
      *(_DWORD *)(a1 + 4),
      a2 - v3,
      a3);
    *(_DWORD *)(a1 + 4) += 12
                         * (a2
                          - std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1));
  }
  else
  {
    v4 = std::fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           *(_DWORD *)a1,
           a2,
           a3);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
      a1,
      v4);
  }
}

//----- (08049898) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::_M_fill_assign(int a1, int a2, char a3)
{
  signed int v3; // eax@3
  unsigned int v4; // ebx@5
  std::_Bit_iterator_base *result; // eax@5
  signed int v6; // eax@7
  char v7; // [sp+1Ch] [bp-2Ch]@1
  int v8; // [sp+20h] [bp-28h]@5
  int v9; // [sp+24h] [bp-24h]@5
  int v10; // [sp+28h] [bp-20h]@5
  char v11; // [sp+2Ch] [bp-1Ch]@6
  int v12; // [sp+34h] [bp-14h]@6
  int v13; // [sp+38h] [bp-10h]@6
  int v14; // [sp+3Ch] [bp-Ch]@9

  v7 = a3;
  if ( std::vector<bool,std::allocator<bool>>::size(a1) < (unsigned int)a2 )
  {
    if ( v7 )
      v3 = -1;
    else
      v3 = 0;
    v8 = v3;
    std::fill<unsigned long *,int>(*(_DWORD *)a1, *(_DWORD *)(a1 + 16), (int)&v8);
    v4 = a2 - std::vector<bool,std::allocator<bool>>::size(a1);
    std::vector<bool,std::allocator<bool>>::end((int)&v9, a1);
    result = std::vector<bool,std::allocator<bool>>::insert(a1, v9, v10, v4, (int)&v7);
  }
  else
  {
    std::vector<bool,std::allocator<bool>>::begin((int)&v11, a1);
    std::_Bit_iterator::operator+((int)&v12, (int)&v11, a2);
    std::vector<bool,std::allocator<bool>>::_M_erase_at_end(a1, v12, v13);
    if ( v7 )
      v6 = -1;
    else
      v6 = 0;
    v14 = v6;
    result = (std::_Bit_iterator_base *)std::fill<unsigned long *,int>(*(_DWORD *)a1, *(_DWORD *)(a1 + 16), (int)&v14);
  }
  return result;
}

//----- (080499D7) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (080499F8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (08049C96) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049CB8) --------------------------------------------------------
int __cdecl std::_Iter_base<unsigned long *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049CC0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049CF0) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (08049D04) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (08049D2C) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1)
{
  std::_Bit_iterator *result; // eax@1

  std::allocator<unsigned long>::allocator();
  std::_Bit_iterator::_Bit_iterator(a1);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)((char *)a1 + 8));
  result = a1;
  *((_DWORD *)a1 + 4) = 0;
  return result;
}

//----- (08049D62) --------------------------------------------------------
void std::allocator<unsigned long>::~allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::~new_allocator();
}

//----- (08049D76) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::_M_deallocate(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    v1 = (*(_DWORD *)(a1 + 16) - *(_DWORD *)a1) >> 2;
    __gnu_cxx::new_allocator<unsigned long>::deallocate(a1, *(void **)a1);
  }
}

//----- (08049DB6) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049DE6) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049DFA) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (08049E21) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049E3C) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::capacity(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
}

//----- (08049E78) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049E80) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (08049ED8) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (08049F30) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::swap(int a1, int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_M_swap_data(
    a1,
    a2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::_S_on_swap();
}

//----- (08049F74) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (08049FB0) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (08049FD0) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (08049FF2) --------------------------------------------------------
int __cdecl std::fill<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>,std::vector<int,std::allocator<int>>>(char a1, char a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>>(a2);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>>(a1);
  return std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(v4, v3, a3);
}

//----- (0804A02A) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A04C) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(a2, *(_DWORD *)(a1 + 4));
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (0804A081) --------------------------------------------------------
int __cdecl std::fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           v3,
           a2,
           a3);
}

//----- (0804A0AA) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::size(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1
  char v3; // [sp+18h] [bp-10h]@1

  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v2, (std::_Bit_iterator *)a1);
  std::vector<bool,std::allocator<bool>>::end((std::_Bit_const_iterator *)&v3, a1);
  return std::operator-((int)&v3, (int)&v2);
}

//----- (0804A0EE) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::end@<eax>(int a1, int a2)
{
  int v2; // edx@1

  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v2;
  return a1;
}

//----- (0804A10A) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::insert(int a1, int a2, int a3, unsigned int a4, int a5)
{
  return std::vector<bool,std::allocator<bool>>::_M_fill_insert(a1, a2, a3, a4, (std::_Bit_iterator_base *)*(_BYTE *)a5);
}

//----- (0804A140) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::_M_erase_at_end(int a1, int a2, int a3)
{
  int result; // eax@1

  result = a2;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  return result;
}

//----- (0804A154) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::begin@<eax>(int a1, int a2)
{
  int v2; // edx@1

  v2 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v2;
  return a1;
}

//----- (0804A16E) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804A194) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804A19C) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804A1D4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A1DE) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (0804A282) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (0804A2A1) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (0804A2D2) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A301) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804A329) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (0804A344) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A354) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804A368) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (0804A36E) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A382) --------------------------------------------------------
void std::allocator<unsigned long>::allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::new_allocator();
}

//----- (0804A396) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::~new_allocator()
{
  ;
}

//----- (0804A39C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<unsigned long>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A3B0) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A3C4) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804A3CA) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A3DD) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804A3E2) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (0804A42C) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804A46A) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804A484) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_M_swap_data(int a1, int a2)
{
  std::swap<std::vector<int,std::allocator<int>> *>(a1, a2);
  std::swap<std::vector<int,std::allocator<int>> *>(a1 + 4, a2 + 4);
  return std::swap<std::vector<int,std::allocator<int>> *>(a1 + 8, a2 + 8);
}

//----- (0804A4CE) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::_S_on_swap()
{
  std::__alloc_swap<std::allocator<std::vector<int,std::allocator<int>>>,true>::_S_do_it();
}

//----- (0804A4E8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A4F7) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>,true>::_S_base(a1);
}

//----- (0804A50A) --------------------------------------------------------
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    std::vector<int,std::allocator<int>>::operator=(a1, a3);
    a1 += 12;
  }
  return result;
}

//----- (0804A532) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A553) --------------------------------------------------------
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804A566) --------------------------------------------------------
int __cdecl std::__fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = a2;
  while ( v4 )
  {
    std::vector<int,std::allocator<int>>::operator=(a1, a3);
    --v4;
    a1 += 12;
  }
  return a1;
}

//----- (0804A598) --------------------------------------------------------
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::begin(std::_Bit_const_iterator *a1, std::_Bit_iterator *a2)
{
  std::_Bit_const_iterator::_Bit_const_iterator(a1, a2);
  return a1;
}

//----- (0804A5B8) --------------------------------------------------------
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::end(std::_Bit_const_iterator *a1, int a2)
{
  std::_Bit_const_iterator::_Bit_const_iterator(a1, (const std::_Bit_iterator *)(a2 + 8));
  return a1;
}

//----- (0804A5DA) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::vector<bool,std::allocator<bool>>::_M_fill_insert(int a1, int a2, int a3, unsigned int a4, std::_Bit_iterator_base *a5)
{
  std::_Bit_iterator_base *result; // eax@1
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // edx@4
  unsigned int v9; // eax@4
  int v10; // edx@4
  int v11; // [sp+20h] [bp-88h]@4
  int v12; // [sp+24h] [bp-84h]@4
  int v13; // [sp+2Ch] [bp-7Ch]@1
  int v14; // [sp+30h] [bp-78h]@4
  int v15; // [sp+34h] [bp-74h]@4
  char v16; // [sp+38h] [bp-70h]@3
  int v17; // [sp+40h] [bp-68h]@3
  int v18; // [sp+44h] [bp-64h]@3
  int v19; // [sp+48h] [bp-60h]@3
  int v20; // [sp+4Ch] [bp-5Ch]@3
  unsigned __int32 *v21; // [sp+50h] [bp-58h]@3
  int v22; // [sp+54h] [bp-54h]@3
  int v23; // [sp+58h] [bp-50h]@4
  unsigned __int32 *v24; // [sp+60h] [bp-48h]@4
  int v25; // [sp+64h] [bp-44h]@4
  int v26; // [sp+68h] [bp-40h]@4
  int v27; // [sp+6Ch] [bp-3Ch]@4
  char v28; // [sp+70h] [bp-38h]@4
  unsigned __int32 *v29; // [sp+78h] [bp-30h]@4
  int v30; // [sp+7Ch] [bp-2Ch]@4
  int v31; // [sp+80h] [bp-28h]@4
  int v32; // [sp+84h] [bp-24h]@4
  int v33; // [sp+88h] [bp-20h]@4
  int v34; // [sp+8Ch] [bp-1Ch]@4
  std::_Bit_iterator_base *v35; // [sp+90h] [bp-18h]@4
  int v36; // [sp+94h] [bp-14h]@4
  unsigned __int32 *v37; // [sp+98h] [bp-10h]@4
  int v38; // [sp+9Ch] [bp-Ch]@4

  result = a5;
  LOBYTE(v13) = (_BYTE)a5;
  if ( a4 )
  {
    v6 = std::vector<bool,std::allocator<bool>>::capacity(a1);
    v7 = std::vector<bool,std::allocator<bool>>::size(a1);
    if ( v6 - v7 < a4 )
    {
      v38 = std::vector<bool,std::allocator<bool>>::_M_check_len(a1, a4, "vector<bool>::_M_fill_insert");
      v37 = (unsigned __int32 *)std::_Bvector_base<std::allocator<bool>>::_M_allocate(a1, v38);
      std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v23, v37, 0);
      std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v24, (const std::_Bit_iterator *)&a2);
      std::vector<bool,std::allocator<bool>>::begin((int)&v28, a1);
      std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v26, (const std::_Bit_iterator *)&v28);
      std::vector<bool,std::allocator<bool>>::_M_copy_aligned((int)&v14, a1, v26, v27, v24, v25, v23);
      std::_Bit_iterator::operator+((int)&v29, (int)&v14, a4);
      std::fill(v14, v15, v29, v30, (int)&v13);
      std::_Bit_iterator::operator+((int)&v31, (int)&v14, a4);
      std::vector<bool,std::allocator<bool>>::end((int)&v33, a1);
      std::copy<std::_Bit_iterator,std::_Bit_iterator>((int)&v11, a2, a3, v33, v34, v31, v32);
      v8 = v12;
      *(_DWORD *)(a1 + 8) = v11;
      *(_DWORD *)(a1 + 12) = v8;
      std::_Bvector_base<std::allocator<bool>>::_M_deallocate(a1);
      v9 = std::_Bvector_base<std::allocator<bool>>::_S_nword(v38);
      *(_DWORD *)(a1 + 16) = &v37[v9];
      std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v35, v37, 0);
      result = v35;
      v10 = v36;
      *(_DWORD *)a1 = v35;
      *(_DWORD *)(a1 + 4) = v10;
    }
    else
    {
      std::_Bit_iterator::operator+((int)&v17, a1 + 8, a4);
      std::vector<bool,std::allocator<bool>>::end((int)&v19, a1);
      std::copy_backward<std::_Bit_iterator,std::_Bit_iterator>((int)&v16, a2, a3, v19, v20, v17, v18);
      std::_Bit_iterator::operator+((int)&v21, (int)&a2, a4);
      std::fill(a2, a3, v21, v22, (int)&v13);
      result = std::_Bit_iterator::operator+=((std::_Bit_iterator_base *)(a1 + 8), a4);
    }
  }
  return result;
}

//----- (0804A8D1) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804A8E4) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804A928) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804A943) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804A95E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804A98E) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804A9B0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804A9B6) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804A9BC) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::new_allocator()
{
  ;
}

//----- (0804A9C2) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804A9C8) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804AA00) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (0804AA44) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804AA5E) --------------------------------------------------------
int __cdecl std::swap<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (0804AA80) --------------------------------------------------------
void std::__alloc_swap<std::allocator<std::vector<int,std::allocator<int>>>,true>::_S_do_it()
{
  ;
}

//----- (0804AA85) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a1);
}

//----- (0804AA9A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2)
{
  int v2; // ST04_4@3
  void *v3; // ST00_4@3
  int v4; // ST08_4@3
  void *v5; // ebx@6
  int v6; // esi@6
  int v7; // eax@6
  int v8; // edi@6
  int v9; // esi@6
  int v10; // ST1C_4@6
  int v11; // eax@6
  int v13; // [sp+2Ch] [bp-3Ch]@3
  int v14; // [sp+30h] [bp-38h]@3
  int v15; // [sp+34h] [bp-34h]@5
  int v16; // [sp+38h] [bp-30h]@5
  int v17; // [sp+3Ch] [bp-2Ch]@5
  int v18; // [sp+40h] [bp-28h]@5
  int v19; // [sp+44h] [bp-24h]@5
  int v20; // [sp+48h] [bp-20h]@3
  unsigned int v21; // [sp+4Ch] [bp-1Ch]@2

  if ( a2 != a1 )
  {
    v21 = std::vector<int,std::allocator<int>>::size(a2);
    if ( std::vector<int,std::allocator<int>>::capacity(a1) < v21 )
    {
      std::vector<int,std::allocator<int>>::end((int)&v13, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v14, a2);
      v20 = std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(
              a1,
              v21,
              v14,
              v13);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v2 = *(_DWORD *)(a1 + 4);
      v3 = *(void **)a1;
      std::_Destroy<int *,int>();
      v4 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * v21;
    }
    else if ( std::vector<int,std::allocator<int>>::size(a1) >= v21 )
    {
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      std::vector<int,std::allocator<int>>::end((int)&v15, a1);
      std::vector<int,std::allocator<int>>::begin((int)&v16, a1);
      std::vector<int,std::allocator<int>>::end((int)&v17, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v18, a2);
      std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
        (int)&v19,
        v18,
        v17,
        v16);
      std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
    }
    else
    {
      v5 = *(void **)a1;
      v6 = *(_DWORD *)a2;
      v7 = std::vector<int,std::allocator<int>>::size(a1);
      std::copy<int *,int *>(*(_DWORD *)a2, v6 + 4 * v7, (int)v5);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v8 = *(_DWORD *)(a1 + 4);
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)a2;
      v11 = std::vector<int,std::allocator<int>>::size(a1);
      std::__uninitialized_copy_a<int *,int *,int>(v10 + 4 * v11, v9, v8);
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)a1 + 4 * v21;
  }
  return a1;
}

//----- (0804ACE0) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804AD4E) --------------------------------------------------------
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AD56) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::capacity(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1
  char v3; // [sp+18h] [bp-10h]@1

  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v2, (std::_Bit_iterator *)a1);
  std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v3, *(unsigned __int32 **)(a1 + 16), 0);
  return std::operator-((int)&v3, (int)&v2);
}

//----- (0804ADA2) --------------------------------------------------------
int __userpurge std::copy_backward<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_iterator>((int)&v10, a2, a3);
  std::__copy_move_backward_a2<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804AE20) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::_M_check_len(int a1, int a2, char *a3)
{
  int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<bool,std::allocator<bool>>::max_size(a1);
  v4 = std::vector<bool,std::allocator<bool>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<bool,std::allocator<bool>>::size(a1);
  v9 = std::vector<bool,std::allocator<bool>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<bool,std::allocator<bool>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<bool,std::allocator<bool>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<bool,std::allocator<bool>>::max_size(a1);
  return result;
}

//----- (0804AEC4) --------------------------------------------------------
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_allocate(int a1, int a2)
{
  unsigned int v2; // eax@1

  v2 = std::_Bvector_base<std::allocator<bool>>::_S_nword(a2);
  return __gnu_cxx::new_allocator<unsigned long>::allocate(a1, v2);
}

//----- (0804AEEE) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::_M_copy_aligned@<eax>(int a1, int a2, int a3, int a4, unsigned __int32 *a5, int a6, int a7)
{
  int v8; // [sp+2Ch] [bp-1Ch]@1
  int v9; // [sp+30h] [bp-18h]@1
  int v10; // [sp+34h] [bp-14h]@1
  int v11; // [sp+38h] [bp-10h]@1
  unsigned __int32 *v12; // [sp+3Ch] [bp-Ch]@1

  v12 = (unsigned __int32 *)std::copy<unsigned long *,unsigned long *>(a3, (int)a5, a7);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v8, v12, 0);
  std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v10, a5, 0);
  std::copy<std::_Bit_const_iterator,std::_Bit_iterator>(a1, v10, v11, (int)a5, a6, v8, v9);
  return a1;
}

//----- (0804AF8D) --------------------------------------------------------
int __userpurge std::copy<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_iterator>((int)&v10, a2, a3);
  std::__copy_move_a2<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804B00A) --------------------------------------------------------
unsigned int __cdecl std::_Bvector_base<std::allocator<bool>>::_S_nword(int a1)
{
  return (unsigned int)(a1 + 31) >> 5;
}

//----- (0804B018) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804B020) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804B033) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804B058) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804B06C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804B074) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804B07E) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804B0A0) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804B0BA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804B0E9) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804B112) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1)
{
  return a1;
}

//----- (0804B11A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
}

//----- (0804B134) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804B15C) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804B184) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4)
{
  int v4; // ST1C_4@1

  v4 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
    a3,
    a4,
    v4);
  return v4;
}

//----- (0804B20A) --------------------------------------------------------
int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804B264) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>()
{
  std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804B27E) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804B2B6) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804B2BE) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804B313) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804B33C) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_iterator>((int)&v12, a2, a3);
  std::__copy_move_backward_a<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804B3D6) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::max_size(int a1)
{
  int result; // eax@2
  signed int v2; // [sp+18h] [bp-10h]@1

  std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(a1);
  v2 = __gnu_cxx::new_allocator<unsigned long>::max_size();
  if ( (unsigned int)v2 > 0x3FFFFFF )
    result = 2147483616;
  else
    result = 32 * v2;
  return result;
}

//----- (0804B412) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<unsigned long>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<unsigned long>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804B442) --------------------------------------------------------
char *__cdecl std::copy<unsigned long *,unsigned long *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<unsigned long *>(a2);
  v4 = std::__miter_base<unsigned long *>(a1);
  return std::__copy_move_a2<false,unsigned long *,unsigned long *>(v4, v3, a3);
}

//----- (0804B47A) --------------------------------------------------------
int __userpurge std::copy<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_const_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_const_iterator>((int)&v10, a2, a3);
  std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804B4F7) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_iterator>((int)&v12, a2, a3);
  std::__copy_move_a<false,std::_Bit_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804B590) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804B5E5) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804B606) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804B60C) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804B642) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804B656) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B665) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B686) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804B6A8) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  char *v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_a<false,int const*,int *>((void *)v6, v5, (void *)v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804B706) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804B720) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804B764) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804B81B) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Bit_iterator,false>::_S_base@<eax>(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  return a1;
}

//----- (0804B833) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804B85C) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::_Bit_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804B8A6) --------------------------------------------------------
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(int a1)
{
  return a1;
}

//----- (0804B8AE) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<unsigned long>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804B8B8) --------------------------------------------------------
int __cdecl std::__miter_base<unsigned long *>(int a1)
{
  return std::_Iter_base<unsigned long *,false>::_S_base(a1);
}

//----- (0804B8CB) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,unsigned long *,unsigned long *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<unsigned long *>(a3);
  v4 = std::__niter_base<unsigned long *>(a2);
  v5 = std::__niter_base<unsigned long *>(a1);
  return std::__copy_move_a<false,unsigned long *,unsigned long *>((void *)v5, v4, (void *)v3);
}

//----- (0804B90F) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_const_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804B938) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_const_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_const_iterator>((int)&v12, a2, a3);
  std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804B9D1) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804BA1A) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804BA24) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804BA45) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804BA57) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804BA6A) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804BA7D) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804BAA2) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  ;
}

//----- (0804BAA7) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804BACC) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804BAD4) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (0804BB1E) --------------------------------------------------------
int __userpurge std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  int v7; // eax@2
  int v8; // eax@2
  int v9; // edx@4
  char v11; // [sp+1Ch] [bp-1Ch]@2
  char v12; // [sp+24h] [bp-14h]@2
  int i; // [sp+2Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    v7 = (int)std::_Bit_iterator::operator--((std::_Bit_iterator_base *)&a4);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v11, v7);
    v8 = (int)std::_Bit_iterator::operator--((std::_Bit_iterator_base *)&a6);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v12, v8);
    std::_Bit_reference::operator=((int)&v12, (int)&v11);
  }
  v9 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v9;
  return a1;
}

//----- (0804BBA5) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,unsigned long *,unsigned long *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(src, a2, dest);
}

//----- (0804BBCA) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Bit_const_iterator,false>::_S_base@<eax>(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  return a1;
}

//----- (0804BBE2) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_const_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804BC0B) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804BC54) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  int v7; // edx@4
  char v9; // [sp+1Ch] [bp-1Ch]@2
  char v10; // [sp+24h] [bp-14h]@2
  int i; // [sp+2Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v9, (int)&a2);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v10, (int)&a6);
    std::_Bit_reference::operator=((int)&v10, (int)&v9);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a2);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a6);
  }
  v7 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v7;
  return a1;
}

//----- (0804BCE1) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804BD02) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804BD17) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804BD2C) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804BD76) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804BDAE) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804BDEB) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804BE34) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  bool v7; // bl@2
  int v8; // edx@4
  char v10; // [sp+14h] [bp-14h]@2
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    v7 = std::_Bit_const_iterator::operator*((int)&a2);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v10, (int)&a6);
    std::_Bit_reference::operator=((int)&v10, v7);
    std::_Bit_const_iterator::operator++((std::_Bit_iterator_base *)&a2);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a6);
  }
  v8 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v8;
  return a1;
}

//----- (0804BEBC) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804BF08) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804BF10) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804BF2A) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804BF6E) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804BF74) --------------------------------------------------------
void __cdecl std::vector<bool,std::allocator<bool>>::~vector(int a1)
{
  std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(a1);
}

//----- (0804BF90) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804BFA0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804BFFA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804C000) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804F80C;
  v3 = (void (__cdecl *)())off_804F80C;
  if ( off_804F80C != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804F80C: using guessed type int (*off_804F80C)();

//----- (0804C028) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 242 function(s)"
