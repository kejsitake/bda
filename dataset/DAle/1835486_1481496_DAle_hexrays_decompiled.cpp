/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD std::string::string(std::string *this); idb
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::string::size(std::string *this); idb
// int __cdecl std::_Rb_tree_decrement(_DWORD); weak
// _DWORD __cdecl std::string::compare(std::string *this, const std::string *); idb
// _DWORD __cdecl std::string::string(std::string *this, const std::string *); idb
// _DWORD __cdecl std::string::~string(std::string *this); idb
// _DWORD __cdecl std::string::append(std::string *this, unsigned int, char); idb
// int __cdecl std::_Rb_tree_increment(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD __cdecl std::string::substr(std::string *this, unsigned int, unsigned int); idb
// int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl std::_Rb_tree_increment(_DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
char __cdecl change(char a1);
int __cdecl main(int argc, const char **argv, const char **envp);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::operator|(__int64 a1);
void __cdecl std::set<std::string,std::less<std::string>,std::allocator<std::string>>::~set(int a1);
void __cdecl std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::~map(int a1);
int __cdecl std::set<std::string,std::less<std::string>,std::allocator<std::string>>::set(int a1);
void std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::~_Rb_tree_impl();
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::~_Rb_tree(int a1);
// int __userpurge std::set<std::string,std::less<std::string>,std::allocator<std::string>>::insert@<eax>(int a1, int a2, int a3);
std::string *__stdcall std::operator+<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char a3);
int __cdecl std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::map(int a1);
void std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::~_Rb_tree_impl();
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::~_Rb_tree(int a1);
// int __userpurge std::set<std::string,std::less<std::string>,std::allocator<std::string>>::begin@<eax>(int a1, int a2);
// int __userpurge std::set<std::string,std::less<std::string>,std::allocator<std::string>>::end@<eax>(int a1, int a2);
bool __cdecl std::_Rb_tree_const_iterator<std::string>::operator!=(int a1, int a2);
int __cdecl std::_Rb_tree_const_iterator<std::string>::operator++(int a1);
int __cdecl std::_Rb_tree_const_iterator<std::string>::operator*(int a1);
int __cdecl std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::operator[](int a1, int a2);
// int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::end@<eax>(int a1, int a2);
bool __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator!=(int a1, int a2);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator++(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator->(int a1);
int __cdecl std::set<std::string,std::less<std::string>,std::allocator<std::string>>::size(int a1);
int __cdecl std::max<int>(int a1, int a2);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree(int a1);
void std::allocator<std::_Rb_tree_node<std::string>>::~allocator();
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_erase(int a1, void *a2);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_begin(int a1);
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_insert_unique@<eax>(int a1, int a2, int a3);
int __cdecl std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator(int a1, int a2);
int __cdecl std::pair<std::_Rb_tree_const_iterator<std::string>,bool>::pair(int a1, int a2, int a3);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree(int a1);
void std::allocator<std::_Rb_tree_node<std::pair<char const,int>>>::~allocator();
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_erase(int a1, void *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_begin(int a1);
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::begin@<eax>(int a1, int a2);
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::end@<eax>(int a1, int a2);
// int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::lower_bound@<eax>(int a1, int a2, int a3);
int __stdcall std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::key_comp(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator*(int a1);
bool __cdecl std::less<char>::operator()(int a1, int a2, int a3);
bool __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator==(int a1, int a2);
int __cdecl std::pair<char const,int>::pair(int a1, int a2, int a3);
// int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::insert@<eax>(int a1, int a2, char a3, int a4);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::end@<eax>(int a1, int a2);
int __cdecl std::__addressof<std::pair<char const,int>>(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::size(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::_Rb_tree_impl(int a1);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::~new_allocator();
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_right(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_left(int a1);
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_destroy_node(int a1, void *a2);
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, std::string *a3);
int __cdecl std::_Identity<std::string>::operator()(int a1, int a2);
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, std::string *a5);
int __cdecl std::pair<std::_Rb_tree_iterator<std::string>,bool>::pair(int a1, int a2, int a3);
int __cdecl std::_Rb_tree_iterator<std::string>::_Rb_tree_iterator(int a1, int a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::_Rb_tree_impl(int a1);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::~new_allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_left(int a1);
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_destroy_node(int a1, void *a2);
int __cdecl std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::lower_bound@<eax>(int a1, int a2, int a3);
int __stdcall std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::key_comp(int a1);
int __cdecl std::_Rb_tree_const_iterator<std::pair<char const,int>>::_Rb_tree_const_iterator(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_insert_unique_@<eax>(int a1, int a2, char a3, int a4);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(int a1, int a2);
void std::allocator<std::_Rb_tree_node<std::string>>::allocator();
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::_M_initialize(int a1);
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::get_allocator@<eax>(int a1, int a2);
void std::allocator<std::string>::~allocator();
int __cdecl std::__addressof<std::string>(int a1);
int __cdecl __gnu_cxx::new_allocator<std::string>::destroy(int, std::string *); // idb
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_put_node(int a1, void *a2);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_end(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(int a1);
int __cdecl std::less<std::string>::operator()(int, std::string *, std::string *); // idb
// int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::begin@<eax>(int a1, int a2);
bool __cdecl std::_Rb_tree_iterator<std::string>::operator==(int a1, int a2);
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3);
int __cdecl std::_Rb_tree_iterator<std::string>::operator--(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_create_node(int, std::string *); // idb
void std::allocator<std::_Rb_tree_node<std::pair<char const,int>>>::allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::_M_initialize(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::get_allocator@<eax>(int a1, int a2);
void std::allocator<std::pair<char const,int>>::~allocator();
void __gnu_cxx::new_allocator<std::pair<char const,int>>::destroy();
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_put_node(int a1, void *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_end(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_lower_bound@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_hint_unique_pos@<eax>(int a1, int a2, char a3, int a4);
int __cdecl std::_Select1st<std::pair<char const,int>>::operator()(int a1, int a2);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::new_allocator();
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_Node_allocator(int a1);
void std::allocator<std::string>::allocator<std::_Rb_tree_node<std::string>>();
void __gnu_cxx::new_allocator<std::string>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::deallocate(int a1, void *a2);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_value(int a1);
int __cdecl std::operator<<char,std::char_traits<char>,std::allocator<char>>(std::string *, std::string *); // idb
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_value(int a1);
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_node(int a1);
std::string *__cdecl __gnu_cxx::new_allocator<std::string>::construct(int a1, void *a2, std::string *a3);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::new_allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_Node_allocator(int a1);
void std::allocator<std::pair<char const,int>>::allocator<std::_Rb_tree_node<std::pair<char const,int>>>();
void __gnu_cxx::new_allocator<std::pair<char const,int>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::deallocate(int a1, void *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(int a1);
// int __userpurge std::_Rb_tree_const_iterator<std::pair<char const,int>>::_M_const_cast@<eax>(int a1, int *a2);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_rightmost(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::size(int a1);
// int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_leftmost(int a1);
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator--(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_create_node(int a1, int a2);
void __gnu_cxx::new_allocator<std::string>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::allocate(int a1, unsigned int a2);
void __gnu_cxx::new_allocator<std::pair<char const,int>>::new_allocator();
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_value(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_value(int a1);
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_node(int a1);
void *__cdecl __gnu_cxx::new_allocator<std::pair<char const,int>>::construct(int a1, void *a2, int a3);
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::max_size();
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::allocate(int a1, unsigned int a2);
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::max_size();
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int _CTOR_LIST__ = 4294967295; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
char edata; // weak
_UNKNOWN unk_804DD67; // weak
int dtor_idx_3330; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048C04) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048C70: using guessed type int __gmon_start__(void);

//----- (08048EA0) --------------------------------------------------------
#error "8048EA3: positive sp value has been found (funcsize=2)"

//----- (08048ED0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804DD67 - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804DD67 - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048ED0: could not find valid save-restore pair for ebp
// 804DD64: using guessed type char edata;

//----- (08048F00) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048F00: could not find valid save-restore pair for ebp

//----- (08048F40) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804DBCC: using guessed type int _DTOR_LIST__[];
// 804DD64: using guessed type char edata;
// 804DD68: using guessed type int dtor_idx_3330;

//----- (08048F90) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048F90: could not find valid save-restore pair for ebp

//----- (08048FC0) --------------------------------------------------------
char __cdecl change(char a1)
{
  char result; // al@2

  switch ( a1 )
  {
    case 111:
      result = 48;
      break;
    case 105:
      result = 49;
      break;
    case 101:
      result = 51;
      break;
    case 97:
      result = 52;
      break;
    case 115:
      result = 53;
      break;
    case 116:
      result = 55;
      break;
    case 98:
      result = 56;
      break;
    case 103:
      result = 57;
      break;
    default:
      result = a1;
      break;
  }
  return result;
}

//----- (08049006) --------------------------------------------------------
#error "8049035: call analysis failed (funcsize=495)"

//----- (08049951) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08049959) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (0804995E) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (0804996C) --------------------------------------------------------
void __cdecl std::set<std::string,std::less<std::string>,std::allocator<std::string>>::~set(int a1)
{
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::~_Rb_tree(a1);
}

//----- (08049980) --------------------------------------------------------
void __cdecl std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::~map(int a1)
{
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::~_Rb_tree(a1);
}

//----- (08049994) --------------------------------------------------------
int __cdecl std::set<std::string,std::less<std::string>,std::allocator<std::string>>::set(int a1)
{
  return std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree(a1);
}

//----- (080499A8) --------------------------------------------------------
void std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::~_Rb_tree_impl()
{
  std::allocator<std::_Rb_tree_node<std::string>>::~allocator();
}

//----- (080499BC) --------------------------------------------------------
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::~_Rb_tree(int a1)
{
  int v1; // eax@1

  v1 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_begin(a1);
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_erase(
    a1,
    (void *)v1);
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::~_Rb_tree_impl();
}

//----- (08049A08) --------------------------------------------------------
int __userpurge std::set<std::string,std::less<std::string>,std::allocator<std::string>>::insert@<eax>(int a1, int a2, int a3)
{
  char v4; // [sp+14h] [bp-14h]@1
  int v5; // [sp+18h] [bp-10h]@1
  char v6; // [sp+1Ch] [bp-Ch]@1

  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_insert_unique(
    (int)&v4,
    a2,
    a3);
  std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator((int)&v6, (int)&v4);
  std::pair<std::_Rb_tree_const_iterator<std::string>,bool>::pair(a1, (int)&v6, (int)&v5);
  return a1;
}

//----- (08049A69) --------------------------------------------------------
std::string *__stdcall std::operator+<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char a3)
{
  std::string::string(a1, a2);
  std::string::append(a1, 1u, a3);
  return a1;
}

//----- (08049AC8) --------------------------------------------------------
int __cdecl std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::map(int a1)
{
  return std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree(a1);
}

//----- (08049ADC) --------------------------------------------------------
void std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::~_Rb_tree_impl()
{
  std::allocator<std::_Rb_tree_node<std::pair<char const,int>>>::~allocator();
}

//----- (08049AF0) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::~_Rb_tree(int a1)
{
  int v1; // eax@1

  v1 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_begin(a1);
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_erase(
    a1,
    (void *)v1);
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::~_Rb_tree_impl();
}

//----- (08049B3C) --------------------------------------------------------
int __userpurge std::set<std::string,std::less<std::string>,std::allocator<std::string>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::begin(
    a1,
    a2);
  return a1;
}

//----- (08049B5E) --------------------------------------------------------
int __userpurge std::set<std::string,std::less<std::string>,std::allocator<std::string>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::end(
    a1,
    a2);
  return a1;
}

//----- (08049B80) --------------------------------------------------------
bool __cdecl std::_Rb_tree_const_iterator<std::string>::operator!=(int a1, int a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2;
}

//----- (08049B94) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::string>::operator++(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_increment(*(_DWORD *)a1);
  return a1;
}
// 8048D60: using guessed type int __cdecl std::_Rb_tree_increment(_DWORD);

//----- (08049BB2) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::string>::operator*(int a1)
{
  return *(_DWORD *)a1 + 16;
}

//----- (08049BC0) --------------------------------------------------------
int __cdecl std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::operator[](int a1, int a2)
{
  int v2; // edi@2
  bool v3; // al@3
  int v5; // [sp+18h] [bp-40h]@6
  char v6; // [sp+1Fh] [bp-39h]@2
  int v7; // [sp+28h] [bp-30h]@1
  char v8; // [sp+2Ch] [bp-2Ch]@1
  char v9; // [sp+33h] [bp-25h]@2
  char v10; // [sp+34h] [bp-24h]@6
  int v11; // [sp+3Ch] [bp-1Ch]@6

  std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::lower_bound((int)&v7, a1, a2);
  std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::end((int)&v8, a1);
  v3 = 1;
  if ( !std::_Rb_tree_iterator<std::pair<char const,int>>::operator==((int)&v7, (int)&v8) )
  {
    v2 = std::_Rb_tree_iterator<std::pair<char const,int>>::operator*((int)&v7);
    std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::key_comp((int)&v6);
    if ( !std::less<char>::operator()((int)&v9, a2, v2) )
      v3 = 0;
  }
  if ( v3 )
  {
    v11 = 0;
    std::pair<char const,int>::pair((int)&v10, a2, (int)&v11);
    std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::insert((int)&v5, a1, v7, (int)&v10);
    v7 = v5;
  }
  return std::_Rb_tree_iterator<std::pair<char const,int>>::operator*((int)&v7) + 4;
}

//----- (08049CDE) --------------------------------------------------------
int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::begin(
    a1,
    a2);
  return a1;
}

//----- (08049D00) --------------------------------------------------------
int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::end(
    a1,
    a2);
  return a1;
}

//----- (08049D22) --------------------------------------------------------
bool __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator!=(int a1, int a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2;
}

//----- (08049D36) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator++(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_increment(*(_DWORD *)a1);
  return a1;
}
// 8048E20: using guessed type int __cdecl std::_Rb_tree_increment(_DWORD);

//----- (08049D54) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator->(int a1)
{
  return std::__addressof<std::pair<char const,int>>(*(_DWORD *)a1 + 16);
}

//----- (08049D6C) --------------------------------------------------------
int __cdecl std::set<std::string,std::less<std::string>,std::allocator<std::string>>::size(int a1)
{
  return std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::size(a1);
}

//----- (08049D7F) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049D9A) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree(int a1)
{
  return std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::_Rb_tree_impl(a1);
}

//----- (08049DAE) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::string>>::~allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::~new_allocator();
}

//----- (08049DC2) --------------------------------------------------------
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_erase(int a1, void *a2)
{
  int v2; // eax@2
  int v3; // ST1C_4@2

  while ( a2 )
  {
    v2 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_right((int)a2);
    std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_erase(
      a1,
      (void *)v2);
    v3 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_left((int)a2);
    std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_destroy_node(
      a1,
      a2);
    a2 = (void *)v3;
  }
}

//----- (08049E12) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_begin(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (08049E1E) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_insert_unique@<eax>(int a1, int a2, int a3)
{
  int v3; // eax@1
  int v5; // [sp+28h] [bp-20h]@1
  int v6; // [sp+2Ch] [bp-1Ch]@1
  char v7; // [sp+32h] [bp-16h]@1
  char v8; // [sp+33h] [bp-15h]@2
  char v9; // [sp+34h] [bp-14h]@2
  char v10; // [sp+3Bh] [bp-Dh]@3
  char v11; // [sp+3Ch] [bp-Ch]@3

  v3 = std::_Identity<std::string>::operator()((int)&v7, a3);
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_insert_unique_pos(
    (int)&v5,
    a2,
    (std::string *)v3);
  if ( v6 )
  {
    v8 = 1;
    std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_insert_(
      (int)&v9,
      a2,
      v5,
      v6,
      (std::string *)a3);
    std::pair<std::_Rb_tree_iterator<std::string>,bool>::pair(a1, (int)&v9, (int)&v8);
  }
  else
  {
    v10 = 0;
    std::_Rb_tree_iterator<std::string>::_Rb_tree_iterator((int)&v11, v5);
    std::pair<std::_Rb_tree_iterator<std::string>,bool>::pair(a1, (int)&v11, (int)&v10);
  }
  return a1;
}

//----- (08049EE6) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049EF6) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_const_iterator<std::string>,bool>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)a3;
  return result;
}

//----- (08049F10) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree(int a1)
{
  return std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::_Rb_tree_impl(a1);
}

//----- (08049F24) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::pair<char const,int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::~new_allocator();
}

//----- (08049F38) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_erase(int a1, void *a2)
{
  int v2; // eax@2
  int v3; // ST1C_4@2

  while ( a2 )
  {
    v2 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right((int)a2);
    std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_erase(
      a1,
      (void *)v2);
    v3 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_left((int)a2);
    std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_destroy_node(
      a1,
      a2);
    a2 = (void *)v3;
  }
}

//----- (08049F88) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_begin(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (08049F94) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator(a1, *(_DWORD *)(a2 + 12));
  return a1;
}

//----- (08049FB6) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049FD8) --------------------------------------------------------
int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::lower_bound@<eax>(int a1, int a2, int a3)
{
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::lower_bound(
    a1,
    a2,
    a3);
  return a1;
}

//----- (0804A002) --------------------------------------------------------
int __stdcall std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::key_comp(int a1)
{
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::key_comp(a1);
  return a1;
}

//----- (0804A024) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator*(int a1)
{
  return *(_DWORD *)a1 + 16;
}

//----- (0804A032) --------------------------------------------------------
bool __cdecl std::less<char>::operator()(int a1, int a2, int a3)
{
  return *(_BYTE *)a2 < *(_BYTE *)a3;
}

//----- (0804A046) --------------------------------------------------------
bool __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (0804A05A) --------------------------------------------------------
int __cdecl std::pair<char const,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_BYTE *)a1 = *(_BYTE *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804A074) --------------------------------------------------------
int __userpurge std::map<char,int,std::less<char>,std::allocator<std::pair<char const,int>>>::insert@<eax>(int a1, int a2, char a3, int a4)
{
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::_Rb_tree_const_iterator<std::pair<char const,int>>::_Rb_tree_const_iterator((int)&v5, (int)&a3);
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_insert_unique_(
    a1,
    a2,
    v5,
    a4);
  return a1;
}

//----- (0804A0C0) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(a1, *(_DWORD *)(a2 + 12));
  return a1;
}

//----- (0804A0E2) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::end@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(a1, a2 + 4);
  return a1;
}

//----- (0804A104) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<char const,int>>(int a1)
{
  return a1;
}

//----- (0804A10C) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::size(int a1)
{
  return *(_DWORD *)(a1 + 20);
}

//----- (0804A118) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::_Rb_tree_impl(int a1)
{
  std::allocator<std::_Rb_tree_node<std::string>>::allocator();
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  return std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::_M_initialize(a1);
}

//----- (0804A168) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::~new_allocator()
{
  ;
}

//----- (0804A16D) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_right(int a1)
{
  return *(_DWORD *)(a1 + 12);
}

//----- (0804A178) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_left(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (0804A184) --------------------------------------------------------
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_destroy_node(int a1, void *a2)
{
  int v2; // ebx@1
  int v3; // [sp+1Fh] [bp-9h]@1

  v2 = std::__addressof<std::string>((int)((char *)a2 + 16));
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::get_allocator(
    (int)&v3,
    a1);
  __gnu_cxx::new_allocator<std::string>::destroy((int)&v3, (std::string *)v2);
  std::allocator<std::string>::~allocator();
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_put_node(
    a1,
    a2);
}

//----- (0804A1FA) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, std::string *a3)
{
  int v3; // eax@2
  int v4; // eax@3
  int v5; // eax@11
  int v7; // [sp+18h] [bp-30h]@7
  char v8; // [sp+1Ch] [bp-2Ch]@8
  int v9; // [sp+20h] [bp-28h]@9
  int v10; // [sp+24h] [bp-24h]@9
  int v11; // [sp+28h] [bp-20h]@12
  int v12; // [sp+2Ch] [bp-1Ch]@12
  int v13; // [sp+30h] [bp-18h]@13
  char v14; // [sp+37h] [bp-11h]@1
  int v15; // [sp+38h] [bp-10h]@1
  int v16; // [sp+3Ch] [bp-Ch]@1

  v16 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_begin(a2);
  v15 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_end(a2);
  v14 = 1;
  while ( v16 )
  {
    v15 = v16;
    v3 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(v16);
    v14 = std::less<std::string>::operator()(a2, a3, (std::string *)v3);
    if ( v14 )
      v4 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_left(v16);
    else
      v4 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_right(v16);
    v16 = v4;
  }
  std::_Rb_tree_iterator<std::string>::_Rb_tree_iterator((int)&v7, v15);
  if ( v14 )
  {
    std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::begin(
      (int)&v8,
      a2);
    if ( std::_Rb_tree_iterator<std::string>::operator==((int)&v7, (int)&v8) )
    {
      v9 = v15;
      v10 = v16;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v10, (int)&v9);
      return a1;
    }
    std::_Rb_tree_iterator<std::string>::operator--((int)&v7);
  }
  v5 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(v7);
  if ( (unsigned __int8)std::less<std::string>::operator()(a2, (std::string *)v5, a3) )
  {
    v11 = v15;
    v12 = v16;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v12, (int)&v11);
  }
  else
  {
    v13 = 0;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v7, (int)&v13);
  }
  return a1;
}

//----- (0804A368) --------------------------------------------------------
int __cdecl std::_Identity<std::string>::operator()(int a1, int a2)
{
  return a2;
}

//----- (0804A370) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, std::string *a5)
{
  int v5; // esi@3
  int v6; // eax@3
  bool v7; // al@4
  char v9; // [sp+17h] [bp-11h]@3
  int v10; // [sp+18h] [bp-10h]@6
  unsigned __int8 v11; // [sp+1Fh] [bp-9h]@6

  v7 = 1;
  if ( !a3
    && std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_end(a2) != a4 )
  {
    v5 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(a4);
    v6 = std::_Identity<std::string>::operator()((int)&v9, (int)a5);
    if ( !(unsigned __int8)std::less<std::string>::operator()(a2, (std::string *)v6, (std::string *)v5) )
      v7 = 0;
  }
  v11 = v7;
  v10 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_create_node(
          a2,
          a5);
  std::_Rb_tree_insert_and_rebalance(v11, v10, a4, a2 + 4);
  ++*(_DWORD *)(a2 + 20);
  std::_Rb_tree_iterator<std::string>::_Rb_tree_iterator(a1, v10);
  return a1;
}
// 8048DC0: using guessed type int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0804A44C) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_iterator<std::string>,bool>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)a3;
  return result;
}

//----- (0804A466) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::string>::_Rb_tree_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = a2;
  return result;
}

//----- (0804A474) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::_Rb_tree_impl(int a1)
{
  std::allocator<std::_Rb_tree_node<std::pair<char const,int>>>::allocator();
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  return std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::_M_initialize(a1);
}

//----- (0804A4C4) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::~new_allocator()
{
  ;
}

//----- (0804A4C9) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right(int a1)
{
  return *(_DWORD *)(a1 + 12);
}

//----- (0804A4D4) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_left(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (0804A4E0) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_destroy_node(int a1, void *a2)
{
  char v2; // [sp+1Fh] [bp-9h]@1

  std::__addressof<std::pair<char const,int>>((int)((char *)a2 + 16));
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::get_allocator(
    (int)&v2,
    a1);
  __gnu_cxx::new_allocator<std::pair<char const,int>>::destroy();
  std::allocator<std::pair<char const,int>>::~allocator();
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_put_node(
    a1,
    a2);
}

//----- (0804A53E) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::string>::_Rb_tree_const_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = a2;
  return result;
}

//----- (0804A54C) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::lower_bound@<eax>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_end(a2);
  v4 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_begin(a2);
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_lower_bound(
    a1,
    a2,
    v4,
    v3,
    a3);
  return a1;
}

//----- (0804A59A) --------------------------------------------------------
int __stdcall std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::key_comp(int a1)
{
  return a1;
}

//----- (0804A5A6) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<std::pair<char const,int>>::_Rb_tree_const_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A5B6) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_insert_unique_@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@1
  int v6; // [sp+24h] [bp-14h]@1
  int v7; // [sp+28h] [bp-10h]@1
  char v8; // [sp+2Fh] [bp-9h]@1

  v4 = std::_Select1st<std::pair<char const,int>>::operator()((int)&v8, a4);
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_hint_unique_pos(
    (int)&v6,
    a2,
    a3,
    v4);
  if ( v7 )
    std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_insert_(
      a1,
      a2,
      v6,
      v7,
      a4);
  else
    std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(a1, v6);
  return a1;
}

//----- (0804A64A) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = a2;
  return result;
}

//----- (0804A658) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::string>>::allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::new_allocator();
}

//----- (0804A66C) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_Rb_tree_impl<std::less<std::string>,false>::_M_initialize(int a1)
{
  int result; // eax@1

  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a1 + 4;
  result = a1;
  *(_DWORD *)(a1 + 16) = a1 + 4;
  return result;
}

//----- (0804A69E) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::get_allocator@<eax>(int a1, int a2)
{
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_Node_allocator(a2);
  std::allocator<std::string>::allocator<std::_Rb_tree_node<std::string>>();
  return a1;
}

//----- (0804A6C6) --------------------------------------------------------
void std::allocator<std::string>::~allocator()
{
  __gnu_cxx::new_allocator<std::string>::~new_allocator();
}

//----- (0804A6D9) --------------------------------------------------------
int __cdecl std::__addressof<std::string>(int a1)
{
  return a1;
}

//----- (0804A6E2) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::string>::destroy(int a1, std::string *a2)
{
  return std::string::~string(a2);
}

//----- (0804A6F6) --------------------------------------------------------
void __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_put_node(int a1, void *a2)
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::deallocate(a1, a2);
}

//----- (0804A718) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_end(int a1)
{
  return a1 + 4;
}

//----- (0804A723) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_value(a1);
  return std::_Identity<std::string>::operator()((int)&v3, v1);
}

//----- (0804A746) --------------------------------------------------------
int __cdecl std::less<std::string>::operator()(int a1, std::string *a2, std::string *a3)
{
  return std::operator<<char,std::char_traits<char>,std::allocator<char>>(a2, a3);
}

//----- (0804A760) --------------------------------------------------------
int __userpurge std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<std::string>::_Rb_tree_iterator(a1, *(_DWORD *)(a2 + 12));
  return a1;
}

//----- (0804A782) --------------------------------------------------------
bool __cdecl std::_Rb_tree_iterator<std::string>::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (0804A796) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804A7B0) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::string>::operator--(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_decrement(*(_DWORD *)a1);
  return a1;
}
// 8048CD0: using guessed type int __cdecl std::_Rb_tree_decrement(_DWORD);

//----- (0804A7CD) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_value(a1);
  return std::_Identity<std::string>::operator()((int)&v3, v1);
}

//----- (0804A7F0) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_create_node(int a1, std::string *a2)
{
  int v2; // ebx@1
  char v4[5]; // [sp+1Bh] [bp-Dh]@1

  *(_DWORD *)&v4[1] = std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_node(a1);
  v2 = std::__addressof<std::string>(*(_DWORD *)&v4[1] + 16);
  std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::get_allocator(
    (int)v4,
    a1);
  __gnu_cxx::new_allocator<std::string>::construct((int)v4, (void *)v2, a2);
  std::allocator<std::string>::~allocator();
  return *(_DWORD *)&v4[1];
}

//----- (0804A894) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<std::pair<char const,int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::new_allocator();
}

//----- (0804A8A8) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_Rb_tree_impl<std::less<char>,false>::_M_initialize(int a1)
{
  int result; // eax@1

  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a1 + 4;
  result = a1;
  *(_DWORD *)(a1 + 16) = a1 + 4;
  return result;
}

//----- (0804A8DA) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::get_allocator@<eax>(int a1, int a2)
{
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_Node_allocator(a2);
  std::allocator<std::pair<char const,int>>::allocator<std::_Rb_tree_node<std::pair<char const,int>>>();
  return a1;
}

//----- (0804A902) --------------------------------------------------------
void std::allocator<std::pair<char const,int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<char const,int>>::~new_allocator();
}

//----- (0804A916) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char const,int>>::destroy()
{
  ;
}

//----- (0804A91C) --------------------------------------------------------
void __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_put_node(int a1, void *a2)
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::deallocate(a1, a2);
}

//----- (0804A93E) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_end(int a1)
{
  return a1 + 4;
}

//----- (0804A94A) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_lower_bound@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // eax@2

  while ( a3 )
  {
    v5 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(a3);
    if ( !std::less<char>::operator()(a2, v5, a5) )
    {
      a4 = a3;
      a3 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_left(a3);
    }
    else
    {
      a3 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right(a3);
    }
  }
  std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(a1, a4);
  return a1;
}

//----- (0804A9BE) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_hint_unique_pos@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // ebx@1
  int v5; // eax@3
  int v6; // eax@3
  bool v7; // al@4
  int v8; // eax@7
  int v9; // eax@9
  int v10; // ebx@10
  int v11; // ebx@11
  int v12; // eax@11
  int v13; // eax@12
  int v14; // eax@12
  int v15; // eax@17
  int v16; // ebx@18
  int v17; // eax@19
  int v18; // eax@20
  int v19; // eax@20
  int v21; // [sp+10h] [bp-28h]@18
  int v22; // [sp+14h] [bp-24h]@10
  int v23; // [sp+18h] [bp-20h]@1
  int v24; // [sp+1Ch] [bp-1Ch]@7
  int v25; // [sp+20h] [bp-18h]@14
  int v26; // [sp+24h] [bp-14h]@19
  int v27; // [sp+28h] [bp-10h]@22
  int v28; // [sp+2Ch] [bp-Ch]@25

  std::_Rb_tree_const_iterator<std::pair<char const,int>>::_M_const_cast((int)&v23, (int *)&a3);
  v4 = v23;
  if ( v4 == std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_end(a2) )
  {
    v7 = 0;
    if ( std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::size(a2) )
    {
      v5 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_rightmost(a2);
      v6 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(*(_DWORD *)v5);
      if ( std::less<char>::operator()(a2, v6, a4) )
        v7 = 1;
    }
    if ( v7 )
    {
      v8 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_rightmost(a2);
      v24 = 0;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v24, v8);
    }
    else
    {
      std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_unique_pos(
        a1,
        a2,
        a4);
    }
  }
  else
  {
    v9 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(v23);
    if ( std::less<char>::operator()(a2, a4, v9) )
    {
      v22 = v23;
      v10 = v23;
      if ( v10 == *(_DWORD *)std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_leftmost(a2) )
      {
        v11 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_leftmost(a2);
        v12 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_leftmost(a2);
        std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, v12, v11);
      }
      else
      {
        v13 = std::_Rb_tree_iterator<std::pair<char const,int>>::operator--((int)&v22);
        v14 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(*(_DWORD *)v13);
        if ( std::less<char>::operator()(a2, v14, a4) )
        {
          if ( std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right(v22) == 0 )
          {
            v25 = 0;
            std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v25, (int)&v22);
          }
          else
          {
            std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v23, (int)&v23);
          }
        }
        else
        {
          std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_unique_pos(
            a1,
            a2,
            a4);
        }
      }
    }
    else
    {
      v15 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(v23);
      if ( std::less<char>::operator()(a2, v15, a4) )
      {
        v21 = v23;
        v16 = v23;
        if ( v16 == *(_DWORD *)std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_rightmost(a2) )
        {
          v17 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_rightmost(a2);
          v26 = 0;
          std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v26, v17);
        }
        else
        {
          v18 = std::_Rb_tree_iterator<std::pair<char const,int>>::operator++((int)&v21);
          v19 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(*(_DWORD *)v18);
          if ( std::less<char>::operator()(a2, a4, v19) )
          {
            if ( std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right(v23) == 0 )
            {
              v27 = 0;
              std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v27, (int)&v23);
            }
            else
            {
              std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v21, (int)&v21);
            }
          }
          else
          {
            std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_unique_pos(
              a1,
              a2,
              a4);
          }
        }
      }
      else
      {
        v28 = 0;
        std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v23, (int)&v28);
      }
    }
  }
  return a1;
}

//----- (0804ACF6) --------------------------------------------------------
int __cdecl std::_Select1st<std::pair<char const,int>>::operator()(int a1, int a2)
{
  return a2;
}

//----- (0804ACFE) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // esi@3
  int v6; // eax@3
  bool v7; // al@4
  char v9; // [sp+17h] [bp-11h]@3
  int v10; // [sp+18h] [bp-10h]@6
  unsigned __int8 v11; // [sp+1Fh] [bp-9h]@6

  v7 = 1;
  if ( !a3
    && std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_end(a2) != a4 )
  {
    v5 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(a4);
    v6 = std::_Select1st<std::pair<char const,int>>::operator()((int)&v9, a5);
    if ( !std::less<char>::operator()(a2, v6, v5) )
      v7 = 0;
  }
  v11 = v7;
  v10 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_create_node(
          a2,
          a5);
  std::_Rb_tree_insert_and_rebalance(v11, v10, a4, a2 + 4);
  ++*(_DWORD *)(a2 + 20);
  std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(a1, v10);
  return a1;
}
// 8048DC0: using guessed type int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0804ADDA) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::new_allocator()
{
  ;
}

//----- (0804ADE0) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_Node_allocator(int a1)
{
  return a1;
}

//----- (0804ADE8) --------------------------------------------------------
void std::allocator<std::string>::allocator<std::_Rb_tree_node<std::string>>()
{
  __gnu_cxx::new_allocator<std::string>::new_allocator();
}

//----- (0804ADFC) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::~new_allocator()
{
  ;
}

//----- (0804AE02) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804AE15) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804AE20) --------------------------------------------------------
int __cdecl std::operator<<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2)
{
  return std::string::compare(a1, a2) >> 31;
}

//----- (0804AE3D) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804AE48) --------------------------------------------------------
int __cdecl std::_Rb_tree<std::string,std::string,std::_Identity<std::string>,std::less<std::string>,std::allocator<std::string>>::_M_get_node(int a1)
{
  return __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::allocate(a1, 1u);
}

//----- (0804AE6C) --------------------------------------------------------
std::string *__cdecl __gnu_cxx::new_allocator<std::string>::construct(int a1, void *a2, std::string *a3)
{
  std::string *result; // eax@1

  result = (std::string *)operator new(4u, a2);
  if ( result )
    result = (std::string *)std::string::string(result, a3);
  return result;
}

//----- (0804AEC2) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::new_allocator()
{
  ;
}

//----- (0804AEC8) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_Node_allocator(int a1)
{
  return a1;
}

//----- (0804AED0) --------------------------------------------------------
void std::allocator<std::pair<char const,int>>::allocator<std::_Rb_tree_node<std::pair<char const,int>>>()
{
  __gnu_cxx::new_allocator<std::pair<char const,int>>::new_allocator();
}

//----- (0804AEE4) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char const,int>>::~new_allocator()
{
  ;
}

//----- (0804AEEA) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804AEFD) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_value(a1);
  return std::_Select1st<std::pair<char const,int>>::operator()((int)&v3, v1);
}

//----- (0804AF20) --------------------------------------------------------
int __userpurge std::_Rb_tree_const_iterator<std::pair<char const,int>>::_M_const_cast@<eax>(int a1, int *a2)
{
  std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator(a1, *a2);
  return a1;
}

//----- (0804AF42) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_rightmost(int a1)
{
  return a1 + 16;
}

//----- (0804AF4D) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_value(a1);
  return std::_Select1st<std::pair<char const,int>>::operator()((int)&v3, v1);
}

//----- (0804AF70) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::size(int a1)
{
  return *(_DWORD *)(a1 + 20);
}

//----- (0804AF7C) --------------------------------------------------------
int __userpurge std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v4; // eax@3
  int v5; // eax@11
  int v7; // [sp+18h] [bp-30h]@7
  char v8; // [sp+1Ch] [bp-2Ch]@8
  int v9; // [sp+20h] [bp-28h]@9
  int v10; // [sp+24h] [bp-24h]@9
  int v11; // [sp+28h] [bp-20h]@12
  int v12; // [sp+2Ch] [bp-1Ch]@12
  int v13; // [sp+30h] [bp-18h]@13
  bool v14; // [sp+37h] [bp-11h]@1
  int v15; // [sp+38h] [bp-10h]@1
  int v16; // [sp+3Ch] [bp-Ch]@1

  v16 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_begin(a2);
  v15 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_end(a2);
  v14 = 1;
  while ( v16 )
  {
    v15 = v16;
    v3 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(v16);
    v14 = std::less<char>::operator()(a2, a3, v3);
    if ( v14 )
      v4 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_left(v16);
    else
      v4 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_right(v16);
    v16 = v4;
  }
  std::_Rb_tree_iterator<std::pair<char const,int>>::_Rb_tree_iterator((int)&v7, v15);
  if ( v14 )
  {
    std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::begin(
      (int)&v8,
      a2);
    if ( std::_Rb_tree_iterator<std::pair<char const,int>>::operator==((int)&v7, (int)&v8) )
    {
      v9 = v15;
      v10 = v16;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v10, (int)&v9);
      return a1;
    }
    std::_Rb_tree_iterator<std::pair<char const,int>>::operator--((int)&v7);
  }
  v5 = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_key(v7);
  if ( std::less<char>::operator()(a2, v5, a3) )
  {
    v11 = v15;
    v12 = v16;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v12, (int)&v11);
  }
  else
  {
    v13 = 0;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v7, (int)&v13);
  }
  return a1;
}

//----- (0804B0DE) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_leftmost(int a1)
{
  return a1 + 12;
}

//----- (0804B0EA) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<std::pair<char const,int>>::operator--(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_decrement(*(_DWORD *)a1);
  return a1;
}
// 8048CD0: using guessed type int __cdecl std::_Rb_tree_decrement(_DWORD);

//----- (0804B108) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_create_node(int a1, int a2)
{
  int v2; // ebx@1
  char v4[5]; // [sp+1Bh] [bp-Dh]@1

  *(_DWORD *)&v4[1] = std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_node(a1);
  v2 = std::__addressof<std::pair<char const,int>>(*(_DWORD *)&v4[1] + 16);
  std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::get_allocator(
    (int)v4,
    a1);
  __gnu_cxx::new_allocator<std::pair<char const,int>>::construct((int)v4, (void *)v2, a2);
  std::allocator<std::pair<char const,int>>::~allocator();
  return *(_DWORD *)&v4[1];
}

//----- (0804B16C) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::new_allocator()
{
  ;
}

//----- (0804B172) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(20 * a2);
}

//----- (0804B1AA) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char const,int>>::new_allocator()
{
  ;
}

//----- (0804B1AF) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804B1BA) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (0804B1C6) --------------------------------------------------------
int __cdecl std::_Rb_tree<char,std::pair<char const,int>,std::_Select1st<std::pair<char const,int>>,std::less<char>,std::allocator<std::pair<char const,int>>>::_M_get_node(int a1)
{
  return __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::allocate(a1, 1u);
}

//----- (0804B1EA) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<char const,int>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1
  void *v4; // ecx@1
  int v5; // edx@2

  result = operator new(8u, a2);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(a3 + 4);
    result = *(void **)a3;
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *((_DWORD *)v4 + 1) = v5;
  }
  return result;
}

//----- (0804B218) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::string>>::max_size()
{
  return 214748364;
}

//----- (0804B222) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(24 * a2);
}

//----- (0804B258) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<char const,int>>>::max_size()
{
  return 178956970;
}

//----- (0804B270) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804B280) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804B2DA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804B2E0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int *v2; // ebx@1
  void (*v3)(void); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &_CTOR_LIST__;
  v3 = (void (*)(void))_CTOR_LIST__;
  if ( _CTOR_LIST__ != -1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (*)(void))*v2;
    }
    while ( *v2 != -1 );
  }
  return v5;
}
// 804DBC4: using guessed type int _CTOR_LIST__;

//----- (0804B308) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 2 decompilation failure(s) on 145 function(s)"
