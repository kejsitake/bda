/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_histogram();
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804A380)() = &GLOBAL__sub_I_histogram; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
long double histogram[1000000]; // idb
long double histogram2[1000000]; // idb
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (0804863C) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80486A0: using guessed type int __gmon_start__(void);

//----- (08048740) --------------------------------------------------------
#error "8048743: positive sp value has been found (funcsize=2)"

//----- (08048770) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048770: could not find valid save-restore pair for ebp

//----- (080487A0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80487A0: could not find valid save-restore pair for ebp

//----- (080487E0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804A388: using guessed type int _DTOR_LIST__[];
// 804A5EC: using guessed type char completed_3328;
// 804A5F0: using guessed type int dtor_idx_3330;

//----- (08048830) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048830: could not find valid save-restore pair for ebp

//----- (08048860) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  char *v3; // ebx@3
  char *v4; // ebx@5
  int v5; // ecx@9
  int v6; // edx@9
  int *v7; // ebx@9
  int *v8; // ebx@9
  int *v9; // eax@21
  int v10; // ecx@21
  int v11; // edx@21
  int v12; // ebx@21
  int v13; // eax@26
  int v14; // eax@26
  __int16 v15; // ax@26
  int v16; // ecx@28
  int v17; // edx@28
  int v18; // ebx@28
  char *v19; // ebx@37
  int v20; // eax@42
  int v21; // eax@43
  int v23; // [sp+5DDCh] [bp-70h]@33
  int v24; // [sp+5DE0h] [bp-6Ch]@26
  signed int v25; // [sp+5DE4h] [bp-68h]@1
  signed int i2; // [sp+5DE8h] [bp-64h]@36
  signed int i1; // [sp+5DECh] [bp-60h]@33
  int v28; // [sp+5DF0h] [bp-5Ch]@33
  int v29; // [sp+5DF4h] [bp-58h]@33
  int v30; // [sp+5DF8h] [bp-54h]@33
  signed int nn; // [sp+5E00h] [bp-4Ch]@32
  signed int mm; // [sp+5E04h] [bp-48h]@27
  signed int ll; // [sp+5E08h] [bp-44h]@26
  signed int v34; // [sp+5E0Ch] [bp-40h]@26
  int v35; // [sp+5E10h] [bp-3Ch]@26
  unsigned int v36; // [sp+5E14h] [bp-38h]@26
  signed int v37; // [sp+5E18h] [bp-34h]@26
  signed int kk; // [sp+5E1Ch] [bp-30h]@25
  signed int jj; // [sp+5E20h] [bp-2Ch]@20
  signed int ii; // [sp+5E24h] [bp-28h]@15
  signed int n; // [sp+5E28h] [bp-24h]@14
  signed int m; // [sp+5E2Ch] [bp-20h]@9
  signed int l; // [sp+5E30h] [bp-1Ch]@8
  signed int k; // [sp+5E34h] [bp-18h]@7
  signed int j; // [sp+5E38h] [bp-14h]@2
  signed int i; // [sp+5E3Ch] [bp-10h]@1
  int v47; // [sp+5E40h] [bp-Ch]@9

  std::istream::operator>>(&std::cin, &v25);
  for ( i = 0; i <= 999; ++i )
  {
    for ( j = 0; j <= 999; ++j )
    {
      v3 = (char *)(&histogram[1000 * i] + j);
      *(_DWORD *)v3 = 0;
      *((_DWORD *)v3 + 1) = 0;
      *((_DWORD *)v3 + 2) = 0;
    }
    v4 = (char *)&histogram[1001 * i];
    *(_DWORD *)v4 = 0;
    *((_DWORD *)v4 + 1) = 2147483648;
    *((_DWORD *)v4 + 2) = 0x3FFF;
  }
  for ( k = 0; k <= 999; ++k )
  {
    for ( l = 0; l <= 999; ++l )
    {
      v5 = *((_DWORD *)&histogram[1000 * k] + 3 * l + 2);
      v6 = *((_DWORD *)&histogram[1000 * k] + 3 * l + 1);
      v7 = &v47 + 3 * l - 6028;
      *v7 = *((_DWORD *)&histogram[1000 * k] + 3 * l);
      v7[1] = v6;
      v7[2] = v5;
      v8 = &v47 + 3 * l - 3028;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      for ( m = 0; m <= 999; ++m )
        *(long double *)(&v47 + 3 * l - 3028) = *(long double *)(&v47 + 3 * l - 3028) + *(&histogram[1000 * m] + l);
      *(long double *)(&v47 + 3 * l - 3028) = *(long double *)(&v47 + 3 * l - 3028) / 1000.0;
    }
    for ( n = 0; n <= 999; ++n )
    {
      for ( ii = 0; ii <= 999; ++ii )
        *(&histogram[1000 * n] + ii) = (*(&histogram[1000 * n] + ii) * 999.0 + *(long double *)(&v47 + 3 * ii - 6028))
                                     / 1000.0;
    }
    for ( jj = 0; jj <= 999; ++jj )
    {
      v9 = &v47 + 3 * jj - 3028;
      v10 = v9[2];
      v11 = v9[1];
      v12 = 12 * jj + 12000 * k + 134522368;
      *(_DWORD *)v12 = *v9;
      *(_DWORD *)(v12 + 4) = v11;
      *(_DWORD *)(v12 + 8) = v10;
    }
  }
  for ( kk = 1; kk <= v25; ++kk )
  {
    v13 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v14 = std::ostream::operator<<(v13, kk);
    std::operator<<<std::char_traits<char>>(v14, ": ");
    v15 = std::istream::operator>>(&std::cin, &v24);
    v35 = 0;
    v36 = 2147483648;
    v37 = 0x3FFF;
    v34 = 1000;
    for ( ll = 0; ll <= 999; ++ll )
    {
      for ( mm = 0; mm <= 999; ++mm )
      {
        v16 = *((_DWORD *)&histogram[1000 * ll] + 3 * mm + 2);
        v17 = *((_DWORD *)&histogram[1000 * ll] + 3 * mm + 1);
        v18 = 12 * mm + 12000 * ll + 146522368;
        *(_DWORD *)v18 = *((_DWORD *)&histogram[1000 * ll] + 3 * mm);
        *(_DWORD *)(v18 + 4) = v17;
        *(_DWORD *)(v18 + 8) = v16;
      }
    }
    for ( nn = 0; nn <= 999; ++nn )
    {
      std::istream::operator>>(&std::cin, &v23);
      v28 = 0;
      v29 = 0;
      v30 = 0;
      for ( i1 = 0; i1 <= 999; ++i1 )
        *(long double *)&v28 = *(&histogram2[1000 * nn] + i1) + *(long double *)&v28;
      *(long double *)&v35 = *(&histogram2[1000 * nn] + v23)
                           / *(long double *)&v28
                           * (long double)v34
                           * *(long double *)&v35;
      for ( i2 = nn; i2 <= 999; ++i2 )
      {
        v19 = (char *)(&histogram2[1000 * i2] + v23);
        *(_DWORD *)v19 = 0;
        *((_DWORD *)v19 + 1) = 0;
        *((_DWORD *)v19 + 2) = 0;
      }
      --v34;
    }
    if ( 1.0 / (1.0 / *(long double *)&v35 + 1.0) <= 0.5 )
    {
      v21 = std::operator<<<std::char_traits<char>>(&std::cout, "GOOD");
      std::ostream::operator<<(v21, (const char *)&std::endl<char,std::char_traits<char>>);
    }
    else
    {
      v20 = std::operator<<<std::char_traits<char>>(&std::cout, "BAD");
      std::ostream::operator<<(v20, (const char *)&std::endl<char,std::char_traits<char>>);
    }
  }
  return 0;
}
// 8048680: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 80486E0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 80486F0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048700: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);

//----- (080490E2) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048690: using guessed type int __cxa_atexit(const char *, ...);

//----- (08049121) --------------------------------------------------------
int GLOBAL__sub_I_histogram()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049140) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049150) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (080491AA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (080491B0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804A380;
  v3 = (void (__cdecl *)())off_804A380;
  if ( off_804A380 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804A380: using guessed type int (*off_804A380)();

//----- (080491D8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 14 function(s)"
