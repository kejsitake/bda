/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD std::string::string(std::string *this); idb
// int __cdecl std::allocator<char>::~allocator(_DWORD); weak
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __cdecl std::getline<char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD); weak
// int __gmon_start__(void); weak
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::string::size(std::string *this); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// void *memset(void *s, int c, size_t n);
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::string::~string(std::string *this); idb
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// int __cdecl std::string::string(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::allocator<char>::~allocator(_DWORD); weak
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::allocator<char>::allocator(_DWORD); weak
// int __cdecl std::allocator<char>::allocator(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
int __cdecl std::vector<char,std::allocator<char>>::vector(int a1, signed int a2, int a3, int a4);
int __cdecl std::vector<char,std::allocator<char>>::~vector(int a1);
int __cdecl std::vector<char,std::allocator<char>>::operator[](int a1, int a2);
int __cdecl std::_Vector_base<char,std::allocator<char>>::_Vector_impl::~_Vector_impl(int a1);
int __cdecl std::_Vector_base<char,std::allocator<char>>::_Vector_base(int a1, signed int a2, int a3);
int __cdecl std::_Vector_base<char,std::allocator<char>>::~_Vector_base(int a1);
int __cdecl std::vector<char,std::allocator<char>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<char,std::allocator<char>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<char *,char>();
int __cdecl std::_Vector_base<char,std::allocator<char>>::_Vector_impl::_Vector_impl(int a1, int a2);
int __cdecl std::_Vector_base<char,std::allocator<char>>::_M_create_storage(int a1, signed int a2);
void __cdecl std::_Vector_base<char,std::allocator<char>>::_M_deallocate(int a1, void *a2);
char *__cdecl std::__uninitialized_fill_n_a<char *,unsigned int,char,char>(int a1, int a2, int a3);
void std::_Destroy<char *>();
int __cdecl std::_Vector_base<char,std::allocator<char>>::_M_allocate(int a1, signed int a2);
void __cdecl __gnu_cxx::new_allocator<char>::deallocate(int a1, void *a2);
char *__cdecl std::uninitialized_fill_n<char *,unsigned int,char>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<char *>();
int __cdecl __gnu_cxx::new_allocator<char>::allocate(int a1, signed int a2);
char *__cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<char *,unsigned int,char>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<char>::max_size();
char *__cdecl std::fill_n<char *,unsigned int,char>(int a1, int a2, int a3);
int __cdecl std::__niter_base<char *>(int a1);
char *__cdecl std::__fill_n_a<unsigned int,char>(void *s, int a2, int a3);
int __cdecl std::_Iter_base<char *,false>::_S_base(int a1);
void *__cdecl std::__fill_a<char>(void *s, int a2, int a3);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804ABA0)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
_UNKNOWN GOO; // weak
_UNKNOWN ENG; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (0804897C) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048A10: using guessed type int __gmon_start__(void);

//----- (08048B80) --------------------------------------------------------
#error "8048B83: positive sp value has been found (funcsize=2)"

//----- (08048BB0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048BB0: could not find valid save-restore pair for ebp

//----- (08048BE0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048BE0: could not find valid save-restore pair for ebp

//----- (08048C20) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804ABA8: using guessed type int _DTOR_LIST__[];
// 804AE4C: using guessed type char completed_3328;
// 804AE50: using guessed type int dtor_idx_3330;

//----- (08048C70) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048C70: could not find valid save-restore pair for ebp

//----- (08048CA0) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int *v3; // eax@2
  int v4; // ebx@2
  int v5; // eax@3
  int v6; // eax@5
  int v7; // eax@5
  int *v8; // eax@6
  int v9; // eax@6
  int v10; // eax@7
  int v12; // [sp+1Ch] [bp-28h]@4
  signed int v13; // [sp+20h] [bp-24h]@4
  int v14; // [sp+24h] [bp-20h]@1
  char v15; // [sp+32h] [bp-12h]@1
  int k; // [sp+34h] [bp-10h]@5
  signed int j; // [sp+38h] [bp-Ch]@4
  int i; // [sp+3Ch] [bp-8h]@1

  std::allocator<char>::allocator(&v15);
  *(&v15 + 1) = 63;
  std::vector<char,std::allocator<char>>::vector((int)&v14, 128, (int)(&v15 + 1), (int)&v15);
  std::allocator<char>::~allocator(&v15);
  for ( i = 0; ; ++i )
  {
    v5 = std::string::size((std::string *)&GOO);
    if ( v5 <= i )
      break;
    v3 = (int *)std::string::operator[](&GOO, i);
    v4 = std::vector<char,std::allocator<char>>::operator[]((int)&v14, *(_BYTE *)v3);
    *(_BYTE *)v4 = *(_BYTE *)std::string::operator[](&ENG, i);
  }
  std::istream::operator>>(&std::cin, &v13);
  std::string::string((std::string *)&v12);
  std::getline<char,std::char_traits<char>,std::allocator<char>>(&std::cin, &v12);
  for ( j = 1; j <= v13; ++j )
  {
    std::getline<char,std::char_traits<char>,std::allocator<char>>(&std::cin, &v12);
    v6 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v7 = std::ostream::operator<<(v6, j);
    std::operator<<<std::char_traits<char>>(v7, ": ");
    for ( k = 0; ; ++k )
    {
      v10 = std::string::size((std::string *)&v12);
      if ( v10 <= k )
        break;
      v8 = (int *)std::string::operator[](&v12, k);
      v9 = std::vector<char,std::allocator<char>>::operator[]((int)&v14, *(_BYTE *)v8);
      std::operator<<<std::char_traits<char>>(&std::cout, *(_BYTE *)v9);
    }
    std::ostream::operator<<(&std::cout, (const char *)&std::endl<char,std::char_traits<char>>);
  }
  std::string::~string((std::string *)&v12);
  std::vector<char,std::allocator<char>>::~vector((int)&v14);
  return 0;
}
// 80489E0: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048A00: using guessed type int __cdecl std::getline<char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD);
// 8048A20: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 8048A80: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048AA0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048AC0: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 8048AF0: using guessed type int __cdecl std::allocator<char>::~allocator(_DWORD);
// 8048B00: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048B10: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 8048B40: using guessed type int __cdecl std::allocator<char>::allocator(_DWORD);

//----- (08048EC5) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3
  char v3; // [sp+1Eh] [bp-Ah]@3
  char v4; // [sp+1Fh] [bp-9h]@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    std::allocator<char>::allocator(&v3);
    std::string::string(
      &GOO,
      "ejp mysljylc kd kxveddknmc re jsicpdrysirbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcdde kr kd eoya kw aej tysr re ujdr lkgc jv q z",
      &v3);
    std::allocator<char>::~allocator(&v3);
    __cxa_atexit((const char *)std::string::~string, &GOO, &_dso_handle);
    std::allocator<char>::allocator(&v4);
    std::string::string(
      &ENG,
      "our language is impossible to understandthere are twenty six factorial possibilitiesso it is okay if you want to just give up z q",
      &v4);
    std::allocator<char>::~allocator(&v4);
    result = __cxa_atexit((const char *)std::string::~string, &ENG, &_dso_handle);
  }
  return result;
}
// 80489F0: using guessed type int __cxa_atexit(const char *, ...);
// 8048AD0: using guessed type int __cdecl std::string::string(_DWORD, _DWORD, _DWORD);
// 8048AF0: using guessed type int __cdecl std::allocator<char>::~allocator(_DWORD);
// 8048B40: using guessed type int __cdecl std::allocator<char>::allocator(_DWORD);

//----- (08048FDB) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048FF8) --------------------------------------------------------
int __cdecl std::vector<char,std::allocator<char>>::vector(int a1, signed int a2, int a3, int a4)
{
  std::_Vector_base<char,std::allocator<char>>::_Vector_base(a1, a2, a4);
  return std::vector<char,std::allocator<char>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08049050) --------------------------------------------------------
int __cdecl std::vector<char,std::allocator<char>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<char,std::allocator<char>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<char *,char>();
  return std::_Vector_base<char,std::allocator<char>>::~_Vector_base(a1);
}

//----- (080490A8) --------------------------------------------------------
int __cdecl std::vector<char,std::allocator<char>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + a2;
}

//----- (080490B8) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::_Vector_impl::~_Vector_impl(int a1)
{
  return std::allocator<char>::~allocator(a1);
}
// 80489D0: using guessed type int __cdecl std::allocator<char>::~allocator(_DWORD);

//----- (080490CC) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::_Vector_base(int a1, signed int a2, int a3)
{
  std::_Vector_base<char,std::allocator<char>>::_Vector_impl::_Vector_impl(a1, a3);
  return std::_Vector_base<char,std::allocator<char>>::_M_create_storage(a1, a2);
}

//----- (08049116) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  std::_Vector_base<char,std::allocator<char>>::_M_deallocate(a1, *(void **)a1);
  return std::_Vector_base<char,std::allocator<char>>::_Vector_impl::~_Vector_impl(a1);
}

//----- (08049172) --------------------------------------------------------
int __cdecl std::vector<char,std::allocator<char>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<char,std::allocator<char>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<char *,unsigned int,char,char>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080491B0) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080491B8) --------------------------------------------------------
void std::_Destroy<char *,char>()
{
  std::_Destroy<char *>();
}

//----- (080491D2) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::_Vector_impl::_Vector_impl(int a1, int a2)
{
  int result; // eax@1

  std::allocator<char>::allocator(a1, a2);
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}
// 8048B70: using guessed type int __cdecl std::allocator<char>::allocator(_DWORD, _DWORD);

//----- (0804920A) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::_M_create_storage(int a1, signed int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<char,std::allocator<char>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = a2 + *(_DWORD *)a1;
  return result;
}

//----- (08049244) --------------------------------------------------------
void __cdecl std::_Vector_base<char,std::allocator<char>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<char>::deallocate(a1, a2);
}

//----- (0804926B) --------------------------------------------------------
char *__cdecl std::__uninitialized_fill_n_a<char *,unsigned int,char,char>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<char *,unsigned int,char>(a1, a2, a3);
}

//----- (0804928C) --------------------------------------------------------
void std::_Destroy<char *>()
{
  std::_Destroy_aux<true>::__destroy<char *>();
}

//----- (080492A6) --------------------------------------------------------
int __cdecl std::_Vector_base<char,std::allocator<char>>::_M_allocate(int a1, signed int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<char>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (080492D6) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<char>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (080492E9) --------------------------------------------------------
char *__cdecl std::uninitialized_fill_n<char *,unsigned int,char>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<char *,unsigned int,char>(a1, a2, a3);
}

//----- (0804930A) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<char *>()
{
  ;
}

//----- (08049310) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<char>::allocate(int a1, signed int a2)
{
  if ( __gnu_cxx::new_allocator<char>::max_size() < (unsigned int)a2 )
    std::__throw_bad_alloc();
  return operator new(a2);
}

//----- (0804933D) --------------------------------------------------------
char *__cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<char *,unsigned int,char>(int a1, int a2, int a3)
{
  return std::fill_n<char *,unsigned int,char>(a1, a2, a3);
}

//----- (0804935E) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<char>::max_size()
{
  return -1;
}

//----- (08049368) --------------------------------------------------------
char *__cdecl std::fill_n<char *,unsigned int,char>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<char *>(a1);
  return std::__fill_n_a<unsigned int,char>((void *)v3, a2, a3);
}

//----- (08049391) --------------------------------------------------------
int __cdecl std::__niter_base<char *>(int a1)
{
  return std::_Iter_base<char *,false>::_S_base(a1);
}

//----- (080493A4) --------------------------------------------------------
char *__cdecl std::__fill_n_a<unsigned int,char>(void *s, int a2, int a3)
{
  std::__fill_a<char>(s, (int)((char *)s + a2), a3);
  return (char *)s + a2;
}

//----- (080493D2) --------------------------------------------------------
int __cdecl std::_Iter_base<char *,false>::_S_base(int a1)
{
  return a1;
}

//----- (080493DA) --------------------------------------------------------
void *__cdecl std::__fill_a<char>(void *s, int a2, int a3)
{
  return memset(s, *(_BYTE *)a3, a2 - (_DWORD)s);
}

//----- (08049420) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049430) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804948A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049490) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804ABA0;
  v3 = (void (__cdecl *)())off_804ABA0;
  if ( off_804ABA0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804ABA0: using guessed type int (*off_804ABA0)();

//----- (080494B8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 40 function(s)"
