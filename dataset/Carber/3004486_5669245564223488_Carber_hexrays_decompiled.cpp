/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// _DWORD std::string::string(std::string *this); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::string::size(std::string *this); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::string::string(std::string *this, const std::string *); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator>><char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::string::~string(std::string *this); idb
// FILE *freopen(const char *filename, const char *modes, FILE *stream);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::string::operator=(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
char __cdecl check(int a1, int a2, int a3);
void __cdecl Solved(int a1);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I__Z5checkPiiRSt6vectorISsSaISsEE();
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::vector<std::string,std::allocator<std::string>>::operator[](int a1, int a2);
int __cdecl std::vector<std::string,std::allocator<std::string>>::vector(int a1);
void __cdecl std::vector<std::string,std::allocator<std::string>>::~vector(int a1);
int __cdecl std::vector<std::string,std::allocator<std::string>>::push_back(int, std::string *); // idb
char __cdecl std::next_permutation<int *>(int a1, int a2);
void std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::string *,std::string>(int a1, int a2);
std::string *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(int a1, void *a2, std::string *a3);
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_insert_aux(int, char, std::string *); // idb
// int __userpurge std::vector<std::string,std::allocator<std::string>>::end@<eax>(int a1, int a2);
int __cdecl std::iter_swap<int *,int *>(int a1, int a2);
int __cdecl std::reverse<int *>(int a1, int a2);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::string>::~allocator();
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Destroy<std::string *>(int a1, int a2);
std::string *__cdecl __gnu_cxx::new_allocator<std::string>::construct(int a1, void *a2, std::string *a3);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(int a1);
int __cdecl std::copy_backward<std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*(int a1);
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::string,std::allocator<std::string>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::destroy(int, std::string *); // idb
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(int a1, int a2);
int __cdecl std::__iter_swap<true>::iter_swap<int *,int *>(int a1, int a2);
int __stdcall std::__iterator_category<int *>(int a1);
int __cdecl std::__reverse<int *>(int a1, int a2);
void std::allocator<std::string>::allocator();
void __gnu_cxx::new_allocator<std::string>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::string>::deallocate(int a1, void *a2);
int __cdecl std::_Destroy_aux<false>::__destroy<std::string *>(int a1, int a2);
int __cdecl std::__miter_base<std::string *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl std::vector<std::string,std::allocator<std::string>>::size(int a1);
signed int __cdecl std::vector<std::string,std::allocator<std::string>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<std::string>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::string *,std::string *,std::string>(std::string *, int, int); // idb
int __cdecl __gnu_cxx::new_allocator<std::string>::destroy(int, std::string *); // idb
int __cdecl std::swap<int>(int a1, int a2);
void __gnu_cxx::new_allocator<std::string>::new_allocator();
int __cdecl std::__addressof<std::string>(int a1);
int __cdecl std::_Destroy<std::string>(std::string *); // idb
int __cdecl std::_Iter_base<std::string *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::string *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::string *,std::string *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size();
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::string>::max_size();
int __cdecl std::uninitialized_copy<std::string *,std::string *>(std::string *, int, int); // idb
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(std::string *, int, int); // idb
std::string *__cdecl std::_Construct<std::string,std::string>(void *a1, std::string *a2);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_8049BC0; // weak
int (*off_804B868)() = &GLOBAL__sub_I__Z5checkPiiRSt6vectorISsSaISsEE; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
FILE *stdin; // idb
FILE *stdout; // idb
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048878) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80488F0: using guessed type int __gmon_start__(void);

//----- (08048A40) --------------------------------------------------------
#error "8048A43: positive sp value has been found (funcsize=2)"

//----- (08048A70) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048A70: could not find valid save-restore pair for ebp

//----- (08048AA0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048AA0: could not find valid save-restore pair for ebp

//----- (08048AE0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804B870: using guessed type int _DTOR_LIST__[];
// 804BA84: using guessed type char completed_3328;
// 804BA88: using guessed type int dtor_idx_3330;

//----- (08048B30) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048B30: could not find valid save-restore pair for ebp

//----- (08048B60) --------------------------------------------------------
char __cdecl check(int a1, int a2, int a3)
{
  void *v3; // edx@1
  unsigned int v4; // ebx@1
  int v5; // edi@3
  int v6; // edx@3
  int v7; // ebx@9
  int v8; // eax@9
  int v10; // ebx@13
  int v11; // eax@13
  char v12[26]; // [sp+16h] [bp-32h]@1
  char v13[26]; // [sp+18h] [bp-30h]@2
  int v14; // [sp+30h] [bp-18h]@9
  int j; // [sp+34h] [bp-14h]@8
  int i; // [sp+38h] [bp-10h]@7
  int v17; // [sp+3Ch] [bp-Ch]@7

  v3 = v12;
  v4 = 26;
  if ( (unsigned int)v12 & 2 )
  {
    *(_WORD *)v12 = 0;
    v3 = v13;
    v4 = 24;
  }
  memset(v3, 0, 4 * (v4 >> 2));
  v5 = (int)((char *)v3 + 4 * (v4 >> 2));
  v6 = (int)((char *)v3 + 4 * (v4 >> 2));
  if ( v4 & 2 )
  {
    *(_WORD *)v5 = 0;
    v6 = v5 + 2;
  }
  if ( v4 & 1 )
    *(_BYTE *)v6 = 0;
  v17 = -1;
  for ( i = 0; i < a2; ++i )
  {
    for ( j = 0; ; ++j )
    {
      v10 = j;
      v11 = std::vector<std::string,std::allocator<std::string>>::operator[](a3, *(_DWORD *)(4 * i + a1));
      if ( (unsigned int)v10 >= std::string::size((std::string *)v11) )
        break;
      v7 = j;
      v8 = std::vector<std::string,std::allocator<std::string>>::operator[](a3, *(_DWORD *)(4 * i + a1));
      v14 = *(_BYTE *)std::string::operator[](v8, v7) - 97;
      if ( v12[v14] && v17 != v14 )
        return 0;
      v17 = v14;
      v12[v14] = 1;
    }
  }
  return 1;
}
// 8048900: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 8048B60: using guessed type char var_32[26];

//----- (08048C8B) --------------------------------------------------------
void __cdecl Solved(int a1)
{
  char v1[40]; // [sp+1Ch] [bp-5Ch]@1
  char v2; // [sp+44h] [bp-34h]@2
  int v3; // [sp+48h] [bp-30h]@1
  int v4; // [sp+4Ch] [bp-2Ch]@1
  int v5; // [sp+58h] [bp-20h]@4
  int i; // [sp+5Ch] [bp-1Ch]@1

  qmemcpy(v1, &unk_8049BC0, sizeof(v1));
  std::vector<std::string,std::allocator<std::string>>::vector((int)&v4);
  std::istream::operator>>(&std::cin, &v3);
  for ( i = 0; i < v3; ++i )
  {
    std::string::string((std::string *)&v2);
    std::operator>><char,std::char_traits<char>,std::allocator<char>>(&std::cin, &v2);
    std::vector<std::string,std::allocator<std::string>>::push_back((int)&v4, (std::string *)&v2);
    std::string::~string((std::string *)&v2);
  }
  v5 = 0;
  do
  {
    if ( check((int)v1, v3, (int)&v4) )
      ++v5;
  }
  while ( std::next_permutation<int *>((int)v1, (int)&v1[4 * v3]) );
  printf("Case #%d: %d\n", a1, v5);
  std::vector<std::string,std::allocator<std::string>>::~vector((int)&v4);
}
// 8048980: using guessed type int __cdecl std::operator>><char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD);
// 80489D0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 8048C8B: using guessed type char var_5C[40];

//----- (08048DBC) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  signed int v4; // [sp+18h] [bp-8h]@1
  int i; // [sp+1Ch] [bp-4h]@1

  freopen("B-small-attempt0.in", "r", stdin);
  freopen("B-small-attempt0.out", "w", stdout);
  v4 = 1;
  std::istream::operator>>(&std::cin, &v4);
  for ( i = 1; i <= v4; ++i )
    Solved(i);
  return 0;
}
// 80489D0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);

//----- (08048E50) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80488E0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048E8F) --------------------------------------------------------
int GLOBAL__sub_I__Z5checkPiiRSt6vectorISsSaISsEE()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048EAB) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048EB3) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08048EB8) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08048ECA) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::vector(int a1)
{
  return std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(a1);
}

//----- (08048EDE) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::~vector(int a1)
{
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(a1);
}

//----- (08048F36) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::push_back(int a1, std::string *a2)
{
  int result; // eax@2
  char v3[4]; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::string,std::allocator<std::string>>::end((int)v3, a1);
    result = std::vector<std::string,std::allocator<std::string>>::_M_insert_aux(a1, v3[0], a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (08048FA9) --------------------------------------------------------
char __cdecl std::next_permutation<int *>(int a1, int a2)
{
  char result; // al@2
  int v3; // [sp+14h] [bp-14h]@6
  int v4; // [sp+18h] [bp-10h]@7
  int v5; // [sp+1Ch] [bp-Ch]@5

  if ( a1 == a2 )
  {
    result = 0;
  }
  else if ( a1 + 4 == a2 )
  {
    result = 0;
  }
  else
  {
    v5 = a2 - 4;
    while ( 1 )
    {
      v3 = v5;
      v5 -= 4;
      if ( *(_DWORD *)v5 < *(_DWORD *)v3 )
        break;
      if ( v5 == a1 )
      {
        std::reverse<int *>(a1, a2);
        return 0;
      }
    }
    v4 = a2;
    do
      v4 -= 4;
    while ( *(_DWORD *)v5 >= *(_DWORD *)v4 );
    std::iter_swap<int *,int *>(v5, v4);
    std::reverse<int *>(v3, a2);
    result = 1;
  }
  return result;
}

//----- (08049062) --------------------------------------------------------
void std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::string>::~allocator();
}

//----- (08049076) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804908A) --------------------------------------------------------
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl();
}

//----- (080490EA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080490F2) --------------------------------------------------------
int __cdecl std::_Destroy<std::string *,std::string>(int a1, int a2)
{
  return std::_Destroy<std::string *>(a1, a2);
}

//----- (0804910C) --------------------------------------------------------
std::string *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(int a1, void *a2, std::string *a3)
{
  return __gnu_cxx::new_allocator<std::string>::construct(a1, a2, a3);
}

//----- (0804912E) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_insert_aux(int a1, char a2, std::string *a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // eax@2
  int result; // eax@2
  int v8; // eax@3
  int v9; // eax@3
  int v10; // esi@3
  int v11; // eax@3
  int v12; // ST08_4@3
  char v13; // [sp+18h] [bp-20h]@2
  char v14; // [sp+1Ch] [bp-1Ch]@3
  void *v15; // [sp+20h] [bp-18h]@3
  int v16; // [sp+24h] [bp-14h]@3
  int v17; // [sp+28h] [bp-10h]@3
  int v18; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<std::string,std::allocator<std::string>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<std::string,std::allocator<std::string>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>((int)&a2, (int)&v14);
    v8 = std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(a1, v17);
    v15 = (void *)v8;
    v18 = v8;
    __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(a1, (void *)(4 * v16 + v8), a3);
    v18 = 0;
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
    v9 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
    v18 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
            *(std::string **)a1,
            *(_DWORD *)v9,
            (int)v15)
        + 4;
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
    v10 = *(_DWORD *)(a1 + 4);
    v11 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
    v18 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
            *(std::string **)v11,
            v10,
            v18);
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
    std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
    v12 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v18;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::string>>::construct<std::string>(
      a1,
      *(void **)(a1 + 4),
      (std::string *)(*(_DWORD *)(a1 + 4) - 4));
    *(_DWORD *)(a1 + 4) += 4;
    std::string::string((std::string *)&v13, a3);
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
    std::copy_backward<std::string *,std::string *>(*(_DWORD *)v5, v4, v3);
    v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*((int)&a2);
    std::string::operator=(v6, &v13);
    result = std::string::~string((std::string *)&v13);
  }
  return result;
}
// 8048A30: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804940A) --------------------------------------------------------
int __userpurge std::vector<std::string,std::allocator<std::string>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804942C) --------------------------------------------------------
int __cdecl std::iter_swap<int *,int *>(int a1, int a2)
{
  return std::__iter_swap<true>::iter_swap<int *,int *>(a1, a2);
}

//----- (08049446) --------------------------------------------------------
int __cdecl std::reverse<int *>(int a1, int a2)
{
  char v3; // [sp+Fh] [bp-19h]@1

  std::__iterator_category<int *>((int)&v3);
  return std::__reverse<int *>(a1, a2);
}

//----- (08049488) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::string>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (080494B8) --------------------------------------------------------
void std::allocator<std::string>::~allocator()
{
  __gnu_cxx::new_allocator<std::string>::~new_allocator();
}

//----- (080494CC) --------------------------------------------------------
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::string>::deallocate(a1, a2);
}

//----- (080494F3) --------------------------------------------------------
int __cdecl std::_Destroy<std::string *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::string *>(a1, a2);
}

//----- (0804950E) --------------------------------------------------------
std::string *__cdecl __gnu_cxx::new_allocator<std::string>::construct(int a1, void *a2, std::string *a3)
{
  std::string *result; // eax@1

  result = (std::string *)operator new(4u, a2);
  if ( result )
    result = (std::string *)std::string::string(result, a3);
  return result;
}

//----- (08049564) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(int a1)
{
  return a1;
}

//----- (0804956C) --------------------------------------------------------
int __cdecl std::copy_backward<std::string *,std::string *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::string *>(a2);
  v4 = std::__miter_base<std::string *>(a1);
  return std::__copy_move_backward_a2<false,std::string *,std::string *>(v4, v3, a3);
}

//----- (080495A4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (080495AE) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::string,std::allocator<std::string>>::max_size(a1);
  v4 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  v9 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::string,std::allocator<std::string>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::string,std::allocator<std::string>>::max_size(a1);
  return result;
}

//----- (08049652) --------------------------------------------------------
int __userpurge std::vector<std::string,std::allocator<std::string>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (08049671) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a1);
  return (v2
        - *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a2)) >> 2;
}

//----- (080496A2) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::string>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (080496D1) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::string *,std::string *,std::string>(a1, a2, a3);
}

//----- (080496F9) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::string>>::destroy(int a1, std::string *a2)
{
  return __gnu_cxx::new_allocator<std::string>::destroy(a1, a2);
}

//----- (08049714) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049723) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<int *,int *>(int a1, int a2)
{
  return std::swap<int>(a1, a2);
}

//----- (0804973D) --------------------------------------------------------
int __stdcall std::__iterator_category<int *>(int a1)
{
  return a1;
}

//----- (08049748) --------------------------------------------------------
int __cdecl std::__reverse<int *>(int a1, int a2)
{
  int result; // eax@1
  int i; // [sp+24h] [bp+Ch]@2

  result = a1;
  if ( a1 != a2 )
  {
    for ( i = a2 - 4; ; i -= 4 )
    {
      result = a1;
      if ( a1 >= (unsigned int)i )
        break;
      std::iter_swap<int *,int *>(a1, i);
      a1 += 4;
    }
  }
  return result;
}

//----- (08049782) --------------------------------------------------------
void std::allocator<std::string>::allocator()
{
  __gnu_cxx::new_allocator<std::string>::new_allocator();
}

//----- (08049796) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::~new_allocator()
{
  ;
}

//----- (0804979C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::string>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (080497AF) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::string *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::string>(a1);
    std::_Destroy<std::string>((std::string *)v2);
    a1 += 4;
  }
  return result;
}

//----- (080497D8) --------------------------------------------------------
int __cdecl std::__miter_base<std::string *>(int a1)
{
  return std::_Iter_base<std::string *,false>::_S_base(a1);
}

//----- (080497EB) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::string *,std::string *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::string *>(a3);
  v4 = std::__niter_base<std::string *>(a2);
  v5 = std::__niter_base<std::string *>(a1);
  return std::__copy_move_backward_a<false,std::string *,std::string *>(v5, v4, v3);
}

//----- (08049830) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804984A) --------------------------------------------------------
signed int __cdecl std::vector<std::string,std::allocator<std::string>>::max_size(int a1)
{
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size();
}

//----- (08049865) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049880) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::string>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::string>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (080498B0) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::string *,std::string *,std::string>(std::string *a1, int a2, int a3)
{
  return std::uninitialized_copy<std::string *,std::string *>(a1, a2, a3);
}

//----- (080498D2) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::string>::destroy(int a1, std::string *a2)
{
  return std::string::~string(a2);
}

//----- (080498E5) --------------------------------------------------------
int __cdecl std::swap<int>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (08049908) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::new_allocator()
{
  ;
}

//----- (0804990D) --------------------------------------------------------
int __cdecl std::__addressof<std::string>(int a1)
{
  return a1;
}

//----- (08049915) --------------------------------------------------------
int __cdecl std::_Destroy<std::string>(std::string *a1)
{
  return std::string::~string(a1);
}

//----- (08049928) --------------------------------------------------------
int __cdecl std::_Iter_base<std::string *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049930) --------------------------------------------------------
int __cdecl std::__niter_base<std::string *>(int a1)
{
  return std::_Iter_base<std::string *,false>::_S_base(a1);
}

//----- (08049943) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::string *,std::string *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(
           a1,
           a2,
           a3);
}

//----- (08049968) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size()
{
  return __gnu_cxx::new_allocator<std::string>::max_size();
}

//----- (0804997C) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049984) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::string>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804998E) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::string *,std::string *>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(a1, a2, a3);
}

//----- (080499AF) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = (a2 - a1) >> 2; i > 0; --i )
  {
    a2 -= 4;
    a3 -= 4;
    std::string::operator=(a3, a2);
  }
  return a3;
}
// 8048A30: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (080499EF) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(std::string *a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != (std::string *)a2 )
  {
    v3 = std::__addressof<std::string>(v5);
    std::_Construct<std::string,std::string>((void *)v3, a1);
    a1 = (std::string *)((char *)a1 + 4);
    v5 += 4;
  }
  return v5;
}

//----- (08049A63) --------------------------------------------------------
std::string *__cdecl std::_Construct<std::string,std::string>(void *a1, std::string *a2)
{
  std::string *result; // eax@1

  result = (std::string *)operator new(4u, a1);
  if ( result )
    result = (std::string *)std::string::string(result, a2);
  return result;
}

//----- (08049AC0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049AD0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (08049B2A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049B30) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804B868;
  v3 = (void (__cdecl *)())off_804B868;
  if ( off_804B868 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804B868: using guessed type int (*off_804B868)();

//----- (08049B58) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 77 function(s)"
