/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// int __cdecl std::_Rb_tree_decrement(_DWORD); weak
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl solve(int a1, int a2, int a3);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I__Z5solveiii();
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl std::set<int,std::less<int>,std::allocator<int>>::~set(int a1);
int __cdecl std::set<int,std::less<int>,std::allocator<int>>::set(int a1);
void std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl();
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree(int a1);
int __cdecl std::set<int,std::less<int>,std::allocator<int>>::clear(int a1);
// int __userpurge std::set<int,std::less<int>,std::allocator<int>>::insert@<eax>(int a1, int a2, int a3);
int __cdecl std::set<int,std::less<int>,std::allocator<int>>::size(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree(int a1);
void std::allocator<std::_Rb_tree_node<int>>::~allocator();
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(int a1, void *a2);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::clear(int a1);
// int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique@<eax>(int a1, int a2, int a3);
int __cdecl std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(int a1, int a2);
int __cdecl std::pair<std::_Rb_tree_const_iterator<int>,bool>::pair(int a1, int a2, int a3);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::size(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(int a1);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::~new_allocator();
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left(int a1);
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(int a1, void *a2);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_leftmost(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_root(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_rightmost(int a1);
// int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3);
int __cdecl std::_Identity<int>::operator()(int a1, int a2);
// int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5);
int __cdecl std::pair<std::_Rb_tree_iterator<int>,bool>::pair(int a1, int a2, int a3);
int __cdecl std::_Rb_tree_iterator<int>::_Rb_tree_iterator(int a1, int a2);
void std::allocator<std::_Rb_tree_node<int>>::allocator();
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(int a1);
// int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator@<eax>(int a1, int a2);
void std::allocator<int>::~allocator();
int __cdecl std::__addressof<int>(int a1);
void __gnu_cxx::new_allocator<int>::destroy();
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_put_node(int a1, void *a2);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(int a1);
bool __cdecl std::less<int>::operator()(int a1, int a2, int a3);
// int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::begin@<eax>(int a1, int a2);
bool __cdecl std::_Rb_tree_iterator<int>::operator==(int a1, int a2);
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3);
int __cdecl std::_Rb_tree_iterator<int>::operator--(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int a1, int a2);
void __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::new_allocator();
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_Node_allocator(int a1);
void std::allocator<int>::allocator<std::_Rb_tree_node<int>>();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::deallocate(int a1, void *a2);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(int a1);
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_node(int a1);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(int a1, unsigned int a2);
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::max_size();
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804B044)() = &GLOBAL__sub_I__Z5solveiii; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048664) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80486C0: using guessed type int __gmon_start__(void);

//----- (08048790) --------------------------------------------------------
#error "8048793: positive sp value has been found (funcsize=2)"

//----- (080487C0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 80487C0: could not find valid save-restore pair for ebp

//----- (080487F0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80487F0: could not find valid save-restore pair for ebp

//----- (08048830) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804B04C: using guessed type int _DTOR_LIST__[];
// 804B230: using guessed type char completed_3328;
// 804B234: using guessed type int dtor_idx_3330;

//----- (08048880) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048880: could not find valid save-restore pair for ebp

//----- (080488B0) --------------------------------------------------------
int __cdecl solve(int a1, int a2, int a3)
{
  int v3; // eax@11
  int v4; // ebx@13
  int v6[20]; // [sp+1Ch] [bp-8Ch]@1
  int v7; // [sp+6Ch] [bp-3Ch]@6
  char v8; // [sp+70h] [bp-38h]@1
  char v9; // [sp+88h] [bp-20h]@8
  int k; // [sp+90h] [bp-18h]@5
  int j; // [sp+94h] [bp-14h]@4
  int v12; // [sp+98h] [bp-10h]@4
  int i; // [sp+9Ch] [bp-Ch]@1

  std::set<int,std::less<int>,std::allocator<int>>::set((int)&v8);
  v6[0] = 1;
  for ( i = 0; i < a3; ++i )
    v6[i + 1] = 10 * v6[i];
  v12 = 0;
  for ( j = a1; j <= a2; ++j )
  {
    std::set<int,std::less<int>,std::allocator<int>>::clear((int)&v8);
    for ( k = 1; k < a3; ++k )
    {
      v7 = j / v6[k] + j % v6[k] * v6[a3 - k];
      if ( v7 <= a2 && j < v7 )
        std::set<int,std::less<int>,std::allocator<int>>::insert((int)&v9, (int)&v8, (int)&v7);
    }
    v3 = std::set<int,std::less<int>,std::allocator<int>>::size((int)&v8);
    v12 += v3;
  }
  v4 = v12;
  std::set<int,std::less<int>,std::allocator<int>>::~set((int)&v8);
  return v4;
}
// 80488B0: using guessed type int var_8C[20];

//----- (080489FC) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  int v5; // [sp+14h] [bp-1Ch]@2
  int v6; // [sp+18h] [bp-18h]@2
  int v7; // [sp+1Ch] [bp-14h]@1
  int v8; // [sp+20h] [bp-10h]@5
  int v9; // [sp+24h] [bp-Ch]@2
  signed int v10; // [sp+28h] [bp-8h]@2
  int i; // [sp+2Ch] [bp-4h]@1

  std::istream::operator>>(&std::cin, &v7);
  for ( i = 0; i < v7; ++i )
  {
    v3 = std::istream::operator>>(&std::cin, &v6);
    std::istream::operator>>(v3, &v5);
    v10 = v6;
    v9 = 0;
    while ( v10 )
    {
      ++v9;
      v10 /= 10;
    }
    v8 = solve(v6, v5, v9);
    printf("Case #%d: %d\n", i + 1, v8);
  }
  return 0;
}
// 8048750: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);

//----- (08048AE6) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80486B0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048B25) --------------------------------------------------------
int GLOBAL__sub_I__Z5solveiii()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048B41) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048B4A) --------------------------------------------------------
void __cdecl std::set<int,std::less<int>,std::allocator<int>>::~set(int a1)
{
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree(a1);
}

//----- (08048B5E) --------------------------------------------------------
int __cdecl std::set<int,std::less<int>,std::allocator<int>>::set(int a1)
{
  return std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree(a1);
}

//----- (08048B72) --------------------------------------------------------
void std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl()
{
  std::allocator<std::_Rb_tree_node<int>>::~allocator();
}

//----- (08048B86) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::~_Rb_tree(int a1)
{
  int v1; // eax@1

  v1 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(a1);
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(a1, (void *)v1);
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::~_Rb_tree_impl();
}

//----- (08048BD2) --------------------------------------------------------
int __cdecl std::set<int,std::less<int>,std::allocator<int>>::clear(int a1)
{
  return std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::clear(a1);
}

//----- (08048BE6) --------------------------------------------------------
int __userpurge std::set<int,std::less<int>,std::allocator<int>>::insert@<eax>(int a1, int a2, int a3)
{
  char v4; // [sp+14h] [bp-14h]@1
  int v5; // [sp+18h] [bp-10h]@1
  char v6; // [sp+1Ch] [bp-Ch]@1

  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique((int)&v4, a2, a3);
  std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator((int)&v6, (int)&v4);
  std::pair<std::_Rb_tree_const_iterator<int>,bool>::pair(a1, (int)&v6, (int)&v5);
  return a1;
}

//----- (08048C48) --------------------------------------------------------
int __cdecl std::set<int,std::less<int>,std::allocator<int>>::size(int a1)
{
  return std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::size(a1);
}

//----- (08048C5C) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree(int a1)
{
  return std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(a1);
}

//----- (08048C70) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::~new_allocator();
}

//----- (08048C84) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(int a1, void *a2)
{
  int v2; // eax@2
  int v3; // ST1C_4@2

  while ( a2 )
  {
    v2 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right((int)a2);
    std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(a1, (void *)v2);
    v3 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left((int)a2);
    std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(a1, a2);
    a2 = (void *)v3;
  }
}

//----- (08048CD4) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (08048CE0) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::clear(int a1)
{
  int v1; // eax@1
  int v2; // ebx@1
  int v3; // ebx@1
  int result; // eax@1

  v1 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(a1);
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_erase(a1, (void *)v1);
  v2 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_leftmost(a1);
  *(_DWORD *)v2 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(a1);
  *(_DWORD *)std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_root(a1) = 0;
  v3 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_rightmost(a1);
  *(_DWORD *)v3 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(a1);
  result = a1;
  *(_DWORD *)(a1 + 20) = 0;
  return result;
}

//----- (08048D56) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_unique@<eax>(int a1, int a2, int a3)
{
  int v3; // eax@1
  int v5; // [sp+28h] [bp-20h]@1
  int v6; // [sp+2Ch] [bp-1Ch]@1
  char v7; // [sp+32h] [bp-16h]@1
  char v8; // [sp+33h] [bp-15h]@2
  char v9; // [sp+34h] [bp-14h]@2
  char v10; // [sp+3Bh] [bp-Dh]@3
  char v11; // [sp+3Ch] [bp-Ch]@3

  v3 = std::_Identity<int>::operator()((int)&v7, a3);
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_insert_unique_pos(
    (int)&v5,
    a2,
    v3);
  if ( v6 )
  {
    v8 = 1;
    std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_((int)&v9, a2, v5, v6, a3);
    std::pair<std::_Rb_tree_iterator<int>,bool>::pair(a1, (int)&v9, (int)&v8);
  }
  else
  {
    v10 = 0;
    std::_Rb_tree_iterator<int>::_Rb_tree_iterator((int)&v11, v5);
    std::pair<std::_Rb_tree_iterator<int>,bool>::pair(a1, (int)&v11, (int)&v10);
  }
  return a1;
}

//----- (08048E1E) --------------------------------------------------------
int __cdecl std::_Rb_tree_const_iterator<int>::_Rb_tree_const_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08048E2E) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_const_iterator<int>,bool>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)a3;
  return result;
}

//----- (08048E48) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::size(int a1)
{
  return *(_DWORD *)(a1 + 20);
}

//----- (08048E54) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_Rb_tree_impl(int a1)
{
  std::allocator<std::_Rb_tree_node<int>>::allocator();
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  return std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(a1);
}

//----- (08048EA4) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::~new_allocator()
{
  ;
}

//----- (08048EA9) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right(int a1)
{
  return *(_DWORD *)(a1 + 12);
}

//----- (08048EB4) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left(int a1)
{
  return *(_DWORD *)(a1 + 8);
}

//----- (08048EC0) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_destroy_node(int a1, void *a2)
{
  char v2; // [sp+1Fh] [bp-9h]@1

  std::__addressof<int>((int)((char *)a2 + 16));
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator((int)&v2, a1);
  __gnu_cxx::new_allocator<int>::destroy();
  std::allocator<int>::~allocator();
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_put_node(a1, a2);
}

//----- (08048F1E) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(int a1)
{
  return a1 + 4;
}

//----- (08048F2A) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_leftmost(int a1)
{
  return a1 + 12;
}

//----- (08048F36) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_root(int a1)
{
  return a1 + 8;
}

//----- (08048F42) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_rightmost(int a1)
{
  return a1 + 16;
}

//----- (08048F4E) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_insert_unique_pos@<eax>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v4; // eax@3
  int v5; // eax@11
  int v7; // [sp+18h] [bp-30h]@7
  char v8; // [sp+1Ch] [bp-2Ch]@8
  int v9; // [sp+20h] [bp-28h]@9
  int v10; // [sp+24h] [bp-24h]@9
  int v11; // [sp+28h] [bp-20h]@12
  int v12; // [sp+2Ch] [bp-1Ch]@12
  int v13; // [sp+30h] [bp-18h]@13
  bool v14; // [sp+37h] [bp-11h]@1
  int v15; // [sp+38h] [bp-10h]@1
  int v16; // [sp+3Ch] [bp-Ch]@1

  v16 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_begin(a2);
  v15 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(a2);
  v14 = 1;
  while ( v16 )
  {
    v15 = v16;
    v3 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(v16);
    v14 = std::less<int>::operator()(a2, a3, v3);
    if ( v14 )
      v4 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_left(v16);
    else
      v4 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_right(v16);
    v16 = v4;
  }
  std::_Rb_tree_iterator<int>::_Rb_tree_iterator((int)&v7, v15);
  if ( v14 )
  {
    std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::begin((int)&v8, a2);
    if ( std::_Rb_tree_iterator<int>::operator==((int)&v7, (int)&v8) )
    {
      v9 = v15;
      v10 = v16;
      std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v10, (int)&v9);
      return a1;
    }
    std::_Rb_tree_iterator<int>::operator--((int)&v7);
  }
  v5 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(v7);
  if ( std::less<int>::operator()(a2, v5, a3) )
  {
    v11 = v15;
    v12 = v16;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v12, (int)&v11);
  }
  else
  {
    v13 = 0;
    std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(a1, (int)&v7, (int)&v13);
  }
  return a1;
}

//----- (080490BC) --------------------------------------------------------
int __cdecl std::_Identity<int>::operator()(int a1, int a2)
{
  return a2;
}

//----- (080490C4) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_insert_@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // esi@3
  int v6; // eax@3
  bool v7; // al@4
  char v9; // [sp+17h] [bp-11h]@3
  int v10; // [sp+18h] [bp-10h]@6
  unsigned __int8 v11; // [sp+1Fh] [bp-9h]@6

  v7 = 1;
  if ( !a3 && std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_end(a2) != a4 )
  {
    v5 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(a4);
    v6 = std::_Identity<int>::operator()((int)&v9, a5);
    if ( !std::less<int>::operator()(a2, v6, v5) )
      v7 = 0;
  }
  v11 = v7;
  v10 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(a2, a5);
  std::_Rb_tree_insert_and_rebalance(v11, v10, a4, a2 + 4);
  ++*(_DWORD *)(a2 + 20);
  std::_Rb_tree_iterator<int>::_Rb_tree_iterator(a1, v10);
  return a1;
}
// 8048740: using guessed type int __cdecl std::_Rb_tree_insert_and_rebalance(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (080491A0) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_iterator<int>,bool>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)a3;
  return result;
}

//----- (080491BA) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<int>::_Rb_tree_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = a2;
  return result;
}

//----- (080491C8) --------------------------------------------------------
void std::allocator<std::_Rb_tree_node<int>>::allocator()
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::new_allocator();
}

//----- (080491DC) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_Rb_tree_impl<std::less<int>,false>::_M_initialize(int a1)
{
  int result; // eax@1

  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a1 + 4;
  result = a1;
  *(_DWORD *)(a1 + 16) = a1 + 4;
  return result;
}

//----- (0804920E) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator@<eax>(int a1, int a2)
{
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_Node_allocator(a2);
  std::allocator<int>::allocator<std::_Rb_tree_node<int>>();
  return a1;
}

//----- (08049236) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049249) --------------------------------------------------------
int __cdecl std::__addressof<int>(int a1)
{
  return a1;
}

//----- (08049252) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (08049258) --------------------------------------------------------
void __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_put_node(int a1, void *a2)
{
  __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::deallocate(a1, a2);
}

//----- (0804927A) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(a1);
  return std::_Identity<int>::operator()((int)&v3, v1);
}

//----- (0804929C) --------------------------------------------------------
bool __cdecl std::less<int>::operator()(int a1, int a2, int a3)
{
  return *(_DWORD *)a2 < *(_DWORD *)a3;
}

//----- (080492B0) --------------------------------------------------------
int __userpurge std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Rb_tree_iterator<int>::_Rb_tree_iterator(a1, *(_DWORD *)(a2 + 12));
  return a1;
}

//----- (080492D2) --------------------------------------------------------
bool __cdecl std::_Rb_tree_iterator<int>::operator==(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (080492E6) --------------------------------------------------------
int __cdecl std::pair<std::_Rb_tree_node_base *,std::_Rb_tree_node_base *>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (08049300) --------------------------------------------------------
int __cdecl std::_Rb_tree_iterator<int>::operator--(int a1)
{
  *(_DWORD *)a1 = std::_Rb_tree_decrement(*(_DWORD *)a1);
  return a1;
}
// 80486F0: using guessed type int __cdecl std::_Rb_tree_decrement(_DWORD);

//----- (0804931D) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_key(int a1)
{
  int v1; // eax@1
  char v3; // [sp+1Fh] [bp-9h]@1

  v1 = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(a1);
  return std::_Identity<int>::operator()((int)&v3, v1);
}

//----- (08049340) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_create_node(int a1, int a2)
{
  int v2; // ebx@1
  char v4[5]; // [sp+1Bh] [bp-Dh]@1

  *(_DWORD *)&v4[1] = std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_node(a1);
  v2 = std::__addressof<int>(*(_DWORD *)&v4[1] + 16);
  std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::get_allocator((int)v4, a1);
  __gnu_cxx::new_allocator<int>::construct((int)v4, (void *)v2, a2);
  std::allocator<int>::~allocator();
  return *(_DWORD *)&v4[1];
}

//----- (080493A4) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::new_allocator()
{
  ;
}

//----- (080493AA) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_Node_allocator(int a1)
{
  return a1;
}

//----- (080493B2) --------------------------------------------------------
void std::allocator<int>::allocator<std::_Rb_tree_node<int>>()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (080493C6) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (080493CC) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (080493DF) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (080493EA) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_S_value(int a1)
{
  return a1 + 16;
}

//----- (080493F6) --------------------------------------------------------
int __cdecl std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int>>::_M_get_node(int a1)
{
  return __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(a1, 1u);
}

//----- (0804941A) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (08049440) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049446) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(20 * a2);
}

//----- (0804947E) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::_Rb_tree_node<int>>::max_size()
{
  return 214748364;
}

//----- (08049490) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (080494A0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (080494FA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049500) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804B044;
  v3 = (void (__cdecl *)())off_804B044;
  if ( off_804B044 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804B044: using guessed type int (*off_804B044)();

//----- (08049528) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 73 function(s)"
