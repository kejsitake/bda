/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
bool __cdecl guaranteed_survival(int a1, signed int a2, int a3, double a4);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I__Z19guaranteed_survivalRKSt6vectorIiSaIiEEiid();
int __cdecl std::operator|(__int64 a1);
int __cdecl std::operator|=(int a1, int a2);
int __cdecl std::ios_base::setf(int a1, int a2);
int __cdecl std::ios_base::precision(std::ios_base *this, int a2);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl std::max<double>(int a1, int a2);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy<int *>();
void std::allocator<int>::allocator();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<int>::max_size();
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804AAD0)() = &GLOBAL__sub_I__Z19guaranteed_survivalRKSt6vectorIiSaIiEEiid; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
_UNKNOWN unk_804ACC4; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080486E4) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048760: using guessed type int __gmon_start__(void);

//----- (08048830) --------------------------------------------------------
#error "8048833: positive sp value has been found (funcsize=2)"

//----- (08048860) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048860: could not find valid save-restore pair for ebp

//----- (08048890) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048890: could not find valid save-restore pair for ebp

//----- (080488D0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804AAD8: using guessed type int _DTOR_LIST__[];
// 804AD4C: using guessed type char completed_3328;
// 804AD50: using guessed type int dtor_idx_3330;

//----- (08048920) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048920: could not find valid save-restore pair for ebp

//----- (08048950) --------------------------------------------------------
bool __cdecl guaranteed_survival(int a1, signed int a2, int a3, double a4)
{
  int v4; // eax@3
  int v5; // eax@3
  int v6; // eax@5
  bool v7; // al@7
  double v9; // [sp+28h] [bp-30h]@3
  int v10; // [sp+30h] [bp-28h]@3
  int v11; // [sp+34h] [bp-24h]@3
  double v12; // [sp+38h] [bp-20h]@1
  int i; // [sp+44h] [bp-14h]@1
  double v14; // [sp+48h] [bp-10h]@1

  v12 = (long double)*(signed int *)std::vector<int,std::allocator<int>>::operator[](a1, a3) + (long double)a2 * a4;
  v14 = 1.0 - a4;
  for ( i = 0; ; ++i )
  {
    v6 = std::vector<int,std::allocator<int>>::size(a1);
    v7 = v6 > i && v14 >= 0.0;
    if ( !v7 )
      break;
    if ( i != a3 )
    {
      v4 = std::vector<int,std::allocator<int>>::operator[](a1, i);
      v9 = (v12 - (long double)*(signed int *)v4) / (long double)a2;
      v10 = 0;
      v11 = 0;
      v5 = std::max<double>((int)&v10, (int)&v9);
      v14 = v14 - *(double *)v5;
    }
  }
  return 0.0 > v14;
}

//----- (08048A35) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@3
  int v4; // eax@3
  int v5; // eax@5
  int v6; // eax@5
  double v7; // ST18_8@11
  int v8; // eax@11
  int v9; // eax@14
  char *v11; // [sp+Ch] [bp-68h]@2
  int v12; // [sp+2Ch] [bp-48h]@2
  unsigned int v13; // [sp+38h] [bp-3Ch]@2
  int v14; // [sp+3Ch] [bp-38h]@1
  char v15; // [sp+43h] [bp-31h]@2
  int v16; // [sp+44h] [bp-30h]@2
  double v17; // [sp+48h] [bp-2Ch]@7
  double v18; // [sp+50h] [bp-24h]@6
  double v19; // [sp+58h] [bp-1Ch]@6
  int k; // [sp+60h] [bp-14h]@5
  int j; // [sp+64h] [bp-10h]@2
  signed int v22; // [sp+68h] [bp-Ch]@2
  signed int i; // [sp+6Ch] [bp-8h]@1

  std::ios_base::setf((int)&unk_804ACC4, 4);
  std::ios_base::precision((std::ios_base *)&unk_804ACC4, 6);
  std::istream::operator>>(&std::cin, &v14);
  for ( i = 1; ; ++i )
  {
    v9 = v14--;
    if ( v9 == 0 )
      break;
    std::istream::operator>>(&std::cin, &v13);
    std::allocator<int>::allocator();
    v16 = 0;
    v11 = &v15;
    std::vector<int,std::allocator<int>>::vector((int)&v12, v13, (int)&v16);
    std::allocator<int>::~allocator();
    v22 = 0;
    for ( j = 0; j < (signed int)v13; ++j )
    {
      v3 = std::vector<int,std::allocator<int>>::operator[]((int)&v12, j);
      std::istream::operator>>(&std::cin, v3);
      v4 = std::vector<int,std::allocator<int>>::operator[]((int)&v12, j);
      v22 += *(_DWORD *)v4;
    }
    v5 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v6 = std::ostream::operator<<(v5, i);
    std::operator<<<std::char_traits<char>>(v6, ":");
    for ( k = 0; k < (signed int)v13; ++k )
    {
      v19 = 0.0;
      v18 = 1.0;
      while ( v18 > v19 + 0.000000001 )
      {
        v17 = (v19 + v18) / 2.0;
        if ( guaranteed_survival((int)&v12, v22, k, v17) )
          v18 = v17;
        else
          v19 = v17;
      }
      v7 = v19 * 100.0;
      v8 = std::operator<<<std::char_traits<char>>(&std::cout, " ");
      std::ostream::operator<<(v8, LODWORD(v7), HIDWORD(v7), v11);
    }
    std::ostream::operator<<(&std::cout, (const char *)&std::endl<char,std::char_traits<char>>);
    std::vector<int,std::allocator<int>>::~vector((int)&v12);
  }
  return 0;
}
// 8048730: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD, _DWORD, _DWORD);
// 8048740: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 80487B0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 80487D0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 80487E0: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);

//----- (08048CE0) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048750: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048D1F) --------------------------------------------------------
int GLOBAL__sub_I__Z19guaranteed_survivalRKSt6vectorIiSaIiEEiid()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048D3B) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (08048D48) --------------------------------------------------------
int __cdecl std::operator|=(int a1, int a2)
{
  __int64 v2; // ST00_8@1

  HIDWORD(v2) = a2;
  LODWORD(v2) = *(_DWORD *)a1;
  *(_DWORD *)a1 = std::operator|(v2);
  return a1;
}

//----- (08048D6C) --------------------------------------------------------
int __cdecl std::ios_base::setf(int a1, int a2)
{
  int v2; // ST1C_4@1

  v2 = *(_DWORD *)(a1 + 12);
  std::operator|=(a1 + 12, a2);
  return v2;
}

//----- (08048D96) --------------------------------------------------------
int __cdecl std::ios_base::precision(std::ios_base *this, int a2)
{
  int v2; // ST0C_4@1

  v2 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = a2;
  return v2;
}

//----- (08048DB4) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08048DC6) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (08048DDF) --------------------------------------------------------
int __cdecl std::max<double>(int a1, int a2)
{
  int result; // eax@2

  if ( *(double *)a2 <= (long double)*(double *)a1 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08048E00) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08048E14) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08048E28) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, a2);
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08048E80) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08048ED8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08048EEA) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08048EF0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (08048EF6) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08048F0A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (08048F54) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (08048FB4) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08048FF2) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08048FFA) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049014) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804904C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804908A) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (080490B1) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (080490D2) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (080490EC) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049106) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049136) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049149) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804916A) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (08049170) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049176) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (080491A6) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (080491C8) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (080491D2) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (080491FB) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804920E) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804923E) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049250) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049260) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (080492BA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (080492C0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804AAD0;
  v3 = (void (__cdecl *)())off_804AAD0;
  if ( off_804AAD0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804AAD0: using guessed type int (*off_804AAD0)();

//----- (080492E8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 53 function(s)"
