/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
int __cdecl std::__lg(int a1);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
void std::allocator<double>::allocator();
void std::allocator<double>::~allocator();
int __cdecl std::vector<double,std::allocator<double>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<double,std::allocator<double>>::~vector(int a1);
int __cdecl std::vector<double,std::allocator<double>>::operator[](int a1, int a2);
// int __userpurge std::vector<double,std::allocator<double>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<double,std::allocator<double>>::end@<eax>(int a1, int a2);
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, int a2);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::max<int>(int a1, int a2);
void __gnu_cxx::new_allocator<double>::new_allocator();
void __gnu_cxx::new_allocator<double>::~new_allocator();
void std::_Vector_base<double,std::allocator<double>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<double,std::allocator<double>>::~_Vector_base(int a1);
int __cdecl std::vector<double,std::allocator<double>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<double *,double>();
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<double *,std::vector<double,std::allocator<double>>>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>(int a1, int a2);
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int>(char a1, int a2, int a3);
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, char a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<double,std::allocator<double>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<double *,unsigned int,double,double>(int a1, int a2, int a3);
void std::_Destroy<double *>();
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(int a1);
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, int a2, char a3);
// int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, char a2, char a3);
// int __userpurge __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+@<eax>(int a1, int a2, int a3);
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, char a2);
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, char a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void std::allocator<double>::allocator();
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<double>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<double *,unsigned int,double>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<double *>();
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, int a2, char a3);
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2);
// int __userpurge __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator-@<eax>(int a1, int a2, int a3);
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*(int a1);
// int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,double>@<eax>(int a1, int a2, char a3, int a4);
bool __cdecl __gnu_cxx::operator==<double *,std::vector<double,std::allocator<double>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++(int a1);
// int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, int a2, int a3, char a4);
double __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1);
void std::allocator<int>::allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void __gnu_cxx::new_allocator<double>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<double>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<double *,unsigned int,double>(int a1, int a2, int a3);
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2);
bool __cdecl __gnu_cxx::operator<<double *,std::vector<double,std::allocator<double>>>(int a1, int a2);
void __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--(int a1);
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, char a2, char a3, char a4);
void __gnu_cxx::new_allocator<int>::new_allocator();
signed int __gnu_cxx::new_allocator<int>::max_size();
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
signed int __gnu_cxx::new_allocator<double>::max_size();
int __cdecl std::fill_n<double *,unsigned int,double>(int a1, int a2, int a3);
void __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(char a1, int a2, int a3, double a4);
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1);
int __cdecl std::__copy_move_backward_a<false,double *,double *>(void *src, int, int); // idb
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
int __cdecl std::__niter_base<double *>(int a1);
int __cdecl std::__fill_n_a<double *,unsigned int,double>(int a1, int a2, int a3);
double __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(char a1, int a2, int a3, double a4);
int __cdecl std::swap<double>(int a1, int a2);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,true>::_S_base(char a1);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<double>(void *src, int, int); // idb
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
int __cdecl std::_Iter_base<double *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804DD50)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char edata; // weak
_UNKNOWN unk_804DE9F; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048638) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048690: using guessed type int __gmon_start__(void);

//----- (08048780) --------------------------------------------------------
#error "8048783: positive sp value has been found (funcsize=2)"

//----- (080487B0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804DE9F - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804DE9F - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 80487B0: could not find valid save-restore pair for ebp
// 804DE9C: using guessed type char edata;

//----- (080487E0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80487E0: could not find valid save-restore pair for ebp

//----- (08048820) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804DD58: using guessed type int _DTOR_LIST__[];
// 804DE9C: using guessed type char edata;
// 804DEA0: using guessed type int dtor_idx_3330;

//----- (08048870) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048870: could not find valid save-restore pair for ebp

//----- (080488A0) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@3
  int v4; // eax@6
  long double v5; // fst7@9
  double v6; // ST14_8@16
  int v7; // ebx@17
  int v8; // eax@17
  int v9; // ebx@17
  int v10; // esi@17
  int v11; // eax@17
  int v12; // esi@17
  int v13; // edi@17
  int v14; // eax@17
  int v15; // eax@17
  long double v16; // fst6@18
  int v17; // ebx@19
  int v18; // eax@19
  int v19; // ebx@19
  int v20; // esi@19
  int v21; // eax@19
  int v22; // esi@19
  int v23; // eax@19
  int v24; // eax@19
  int v25; // ebx@24
  int v26; // eax@24
  int v27; // eax@24
  char v29; // [sp+10h] [bp-B0h]@13
  char v30; // [sp+1Ch] [bp-A4h]@5
  char v31; // [sp+28h] [bp-98h]@2
  unsigned int v32; // [sp+34h] [bp-8Ch]@2
  int v33; // [sp+38h] [bp-88h]@1
  int v34; // [sp+40h] [bp-80h]@2
  int v35; // [sp+44h] [bp-7Ch]@2
  int v36; // [sp+4Ch] [bp-74h]@5
  int v37; // [sp+50h] [bp-70h]@5
  int v38; // [sp+58h] [bp-68h]@5
  int v39; // [sp+5Ch] [bp-64h]@5
  int v40; // [sp+64h] [bp-5Ch]@8
  int v41; // [sp+68h] [bp-58h]@8
  char v42; // [sp+70h] [bp-50h]@13
  int v43; // [sp+80h] [bp-40h]@19
  int v44; // [sp+84h] [bp-3Ch]@15
  int m; // [sp+88h] [bp-38h]@14
  int l; // [sp+8Ch] [bp-34h]@13
  int v47; // [sp+90h] [bp-30h]@8
  int v48; // [sp+94h] [bp-2Ch]@8
  unsigned int v49; // [sp+98h] [bp-28h]@8
  int k; // [sp+9Ch] [bp-24h]@5
  int j; // [sp+A0h] [bp-20h]@2
  int i; // [sp+A4h] [bp-1Ch]@1
  int *v53; // [sp+B4h] [bp-Ch]@1

  v53 = &argc;
  scanf("%d", &v33);
  for ( i = 1; i <= v33; ++i )
  {
    scanf("%d", &v32);
    std::allocator<double>::allocator();
    v34 = 0;
    v35 = 0;
    std::vector<double,std::allocator<double>>::vector((int)&v31, v32, (int)&v34);
    std::allocator<double>::~allocator();
    for ( j = 0; j < (signed int)v32; ++j )
    {
      v3 = std::vector<double,std::allocator<double>>::operator[]((int)&v31, j);
      scanf("%lf", v3);
    }
    std::vector<double,std::allocator<double>>::end((int)&v36, (int)&v31);
    std::vector<double,std::allocator<double>>::begin((int)&v37, (int)&v31);
    std::sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(v37, v36);
    std::allocator<double>::allocator();
    v38 = 0;
    v39 = 0;
    std::vector<double,std::allocator<double>>::vector((int)&v30, v32, (int)&v38);
    std::allocator<double>::~allocator();
    for ( k = 0; k < (signed int)v32; ++k )
    {
      v4 = std::vector<double,std::allocator<double>>::operator[]((int)&v30, k);
      scanf("%lf", v4);
    }
    std::vector<double,std::allocator<double>>::end((int)&v40, (int)&v30);
    std::vector<double,std::allocator<double>>::begin((int)&v41, (int)&v30);
    std::sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(v41, v40);
    v49 = v32;
    v48 = v32 - 1;
    v47 = v32 - 1;
    while ( v48 >= 0 )
    {
      v5 = *(double *)std::vector<double,std::allocator<double>>::operator[]((int)&v31, v48);
      if ( *(double *)std::vector<double,std::allocator<double>>::operator[]((int)&v30, v47) > v5 )
      {
        --v49;
        --v47;
      }
      --v48;
    }
    std::allocator<std::vector<int,std::allocator<int>>>::allocator();
    std::allocator<int>::allocator();
    std::vector<int,std::allocator<int>>::vector<int>((int)&v42, v32 + 1, 0);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v29,
      v32 + 1,
      (int)&v42);
    std::vector<int,std::allocator<int>>::~vector((int)&v42);
    std::allocator<int>::~allocator();
    std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
    for ( l = 1; l <= (signed int)v32; ++l )
    {
      for ( m = 0; m < (signed int)v32; ++m )
      {
        v44 = m + l;
        if ( m + l <= (signed int)v32 )
        {
          v6 = *(double *)std::vector<double,std::allocator<double>>::operator[]((int)&v31, v32 - l);
          if ( *(double *)std::vector<double,std::allocator<double>>::operator[]((int)&v30, v44 - 1) > (long double)v6 )
          {
            v7 = v44;
            v8 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                   (int)&v29,
                   m);
            v9 = std::vector<int,std::allocator<int>>::operator[](v8, v7);
            v10 = v44 - 1;
            v11 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v29,
                    m);
            v12 = std::vector<int,std::allocator<int>>::operator[](v11, v10);
            v13 = v44;
            v14 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v29,
                    m);
            v15 = std::vector<int,std::allocator<int>>::operator[](v14, v13);
            *(_DWORD *)v9 = *(_DWORD *)std::max<int>(v15, v12);
          }
          v16 = *(double *)std::vector<double,std::allocator<double>>::operator[]((int)&v31, v32 - l);
          if ( v16 > *(double *)std::vector<double,std::allocator<double>>::operator[]((int)&v30, m) )
          {
            v17 = v44;
            v18 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v29,
                    m);
            v19 = std::vector<int,std::allocator<int>>::operator[](v18, v17);
            v20 = v44;
            v21 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v29,
                    m + 1);
            v43 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v21, v20) + 1;
            v22 = v44;
            v23 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&v29,
                    m);
            v24 = std::vector<int,std::allocator<int>>::operator[](v23, v22);
            *(_DWORD *)v19 = *(_DWORD *)std::max<int>(v24, (int)&v43);
          }
        }
      }
    }
    v25 = v32;
    v26 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
            (int)&v29,
            0);
    v27 = std::vector<int,std::allocator<int>>::operator[](v26, v25);
    printf("Case #%d: %d %d\n", i, *(_DWORD *)v27, v49);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v29);
    std::vector<double,std::allocator<double>>::~vector((int)&v30);
    std::vector<double,std::allocator<double>>::~vector((int)&v31);
  }
  return 0;
}

//----- (08048ED1) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048680: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048F10) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048F2C) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048F44) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048F4C) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08048F52) --------------------------------------------------------
void std::allocator<double>::allocator()
{
  __gnu_cxx::new_allocator<double>::new_allocator();
}

//----- (08048F66) --------------------------------------------------------
void std::allocator<double>::~allocator()
{
  __gnu_cxx::new_allocator<double>::~new_allocator();
}

//----- (08048F7A) --------------------------------------------------------
int __cdecl std::vector<double,std::allocator<double>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<double,std::allocator<double>>::_Vector_base(a1, a2);
  return std::vector<double,std::allocator<double>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08048FD2) --------------------------------------------------------
void __cdecl std::vector<double,std::allocator<double>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<double *,double>();
  std::_Vector_base<double,std::allocator<double>>::~_Vector_base(a1);
}

//----- (0804902A) --------------------------------------------------------
int __cdecl std::vector<double,std::allocator<double>>::operator[](int a1, int a2)
{
  return 8 * a2 + *(_DWORD *)a1;
}

//----- (0804903C) --------------------------------------------------------
int __userpurge std::vector<double,std::allocator<double>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (0804905C) --------------------------------------------------------
int __userpurge std::vector<double,std::allocator<double>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (0804907E) --------------------------------------------------------
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, int a2)
{
  bool result; // al@1
  int v3; // eax@2
  int v4; // eax@2

  result = __gnu_cxx::operator!=<double *,std::vector<double,std::allocator<double>>>((int)&a1, (int)&a2);
  if ( result )
  {
    v3 = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1);
    v4 = std::__lg(v3);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int>(
      a1,
      a2,
      2 * v4);
    result = std::__final_insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (080490E0) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (080490F4) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049108) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
  return std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(a1, a2, a3);
}

//----- (0804915E) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (080491B6) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (080491CA) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (080491DE) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (08049236) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (0804928E) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (080492A6) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (080492B8) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (080492D4) --------------------------------------------------------
void __gnu_cxx::new_allocator<double>::new_allocator()
{
  ;
}

//----- (080492DA) --------------------------------------------------------
void __gnu_cxx::new_allocator<double>::~new_allocator()
{
  ;
}

//----- (080492E0) --------------------------------------------------------
void std::_Vector_base<double,std::allocator<double>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<double>::~allocator();
}

//----- (080492F4) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<double,std::allocator<double>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<double,std::allocator<double>>::_M_create_storage(a1, a2);
}

//----- (0804933E) --------------------------------------------------------
void __cdecl std::_Vector_base<double,std::allocator<double>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
  std::_Vector_base<double,std::allocator<double>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<double,std::allocator<double>>::_Vector_impl::~_Vector_impl();
}

//----- (0804939E) --------------------------------------------------------
int __cdecl std::vector<double,std::allocator<double>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<double *,unsigned int,double,double>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080493DC) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080493E4) --------------------------------------------------------
void std::_Destroy<double *,double>()
{
  std::_Destroy<double *>();
}

//----- (080493FE) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804940D) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<double *,std::vector<double,std::allocator<double>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a2);
}

//----- (08049439) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a2)) >> 3;
}

//----- (08049469) --------------------------------------------------------
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int>(char a1, int a2, int a3)
{
  bool result; // al@3
  int v4; // [sp+1Ch] [bp-Ch]@4

  while ( 1 )
  {
    result = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1) > 16;
    if ( !result )
      break;
    if ( !a3 )
      return std::partial_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
               a1,
               a2,
               a2);
    --a3;
    std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
      (int)&v4,
      a1,
      a2);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int>(
      v4,
      a2,
      a3);
    a2 = v4;
  }
  return result;
}

//----- (080494F8) --------------------------------------------------------
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, char a2)
{
  bool result; // al@2
  int v3; // [sp+10h] [bp-18h]@2
  int v4; // [sp+14h] [bp-14h]@2
  int v5; // [sp+18h] [bp-10h]@2
  int v6; // [sp+1Ch] [bp-Ch]@2

  if ( __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1) > 16 )
  {
    v3 = 16;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v4,
      (int)&a1,
      (int)&v3);
    std::__insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a1, v4);
    v5 = 16;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v6,
      (int)&a1,
      (int)&v5);
    result = std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
               v6,
               a2);
  }
  else
  {
    result = std::__insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (080495B0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (080495B6) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (080495BC) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (080495D0) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (080495EA) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (0804964A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3)
{
  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, (int)&a3);
}

//----- (08049696) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804969E) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (080496B8) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (080496BE) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (080496C4) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (080496D8) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (08049722) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (080497A4) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080497E2) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080497EA) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (08049804) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<double>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804983C) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<double,std::allocator<double>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * a2;
  return result;
}

//----- (0804987A) --------------------------------------------------------
void __cdecl std::_Vector_base<double,std::allocator<double>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<double>::deallocate(a1, a2);
}

//----- (080498A1) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<double *,unsigned int,double,double>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<double *,unsigned int,double>(a1, a2, a3);
}

//----- (080498C2) --------------------------------------------------------
void std::_Destroy<double *>()
{
  std::_Destroy_aux<true>::__destroy<double *>();
}

//----- (080498DC) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(int a1)
{
  return a1;
}

//----- (080498E4) --------------------------------------------------------
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, int a2, char a3)
{
  std::__heap_select<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a1, a2, a3);
  return std::sort_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a1, a2);
}

//----- (08049917) --------------------------------------------------------
int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, char a2, char a3)
{
  int v3; // ebx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+20h] [bp-18h]@1
  int v8; // [sp+24h] [bp-14h]@1
  int v9; // [sp+28h] [bp-10h]@1
  int v10; // [sp+2Ch] [bp-Ch]@1

  v6 = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a3, (int)&a2) / 2;
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
    (int)&v5,
    (int)&a2,
    (int)&v6);
  v7 = 1;
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator-(
    (int)&v8,
    (int)&a3,
    (int)&v7);
  std::__move_median_first<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
    a2,
    v5,
    v8);
  v3 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a2);
  v9 = 1;
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
    (int)&v10,
    (int)&a2,
    (int)&v9);
  std::__unguarded_partition<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,double>(
    a1,
    v10,
    a3,
    v3);
  return a1;
}

//----- (080499FA) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 8 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (08049A2B) --------------------------------------------------------
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, char a2)
{
  bool result; // al@1
  long double v3; // fst7@3
  int v4; // eax@4
  int v5; // edx@4
  int v6; // eax@4
  int v7; // edx@4
  int v8; // [sp+24h] [bp-24h]@2
  int v9; // [sp+28h] [bp-20h]@2
  char v10; // [sp+2Ch] [bp-1Ch]@4
  int v11; // [sp+30h] [bp-18h]@4
  int v12; // [sp+34h] [bp-14h]@4
  int v13; // [sp+38h] [bp-10h]@4
  int v14; // [sp+3Ch] [bp-Ch]@4

  result = __gnu_cxx::operator==<double *,std::vector<double,std::allocator<double>>>((int)&a1, (int)&a2);
  if ( !result )
  {
    v9 = 1;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v8,
      (int)&a1,
      (int)&v9);
    while ( 1 )
    {
      result = __gnu_cxx::operator!=<double *,std::vector<double,std::allocator<double>>>((int)&v8, (int)&a2);
      if ( !result )
        break;
      v3 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v8);
      if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1) <= v3 )
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(v8);
      }
      else
      {
        v4 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v8);
        v5 = *(_DWORD *)(v4 + 4);
        v13 = *(_DWORD *)v4;
        v14 = v5;
        v11 = 1;
        __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
          (int)&v12,
          (int)&v8,
          (int)&v11);
        std::copy_backward<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
          (int)&v10,
          a1,
          v8,
          v12);
        v6 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
        v7 = v14;
        *(_DWORD *)v6 = v13;
        *(_DWORD *)(v6 + 4) = v7;
      }
      __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++((int)&v8);
    }
  }
  return result;
}

//----- (08049B5C) --------------------------------------------------------
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1, char a2)
{
  bool result; // al@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator!=<double *,std::vector<double,std::allocator<double>>>((int)&i, (int)&a2);
    if ( !result )
      break;
    std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(i);
  }
  return result;
}

//----- (08049BA2) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049BDA) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (08049C02) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049C32) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049C70) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049C8A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049CC2) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (08049D06) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (08049D2D) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (08049D4E) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (08049D68) --------------------------------------------------------
void std::allocator<double>::allocator()
{
  __gnu_cxx::new_allocator<double>::new_allocator();
}

//----- (08049D82) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<double>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049DB2) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<double>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049DC5) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<double *,unsigned int,double>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<double *,unsigned int,double>(a1, a2, a3);
}

//----- (08049DE6) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<double *>()
{
  ;
}

//----- (08049DEB) --------------------------------------------------------
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, int a2, char a3)
{
  long double v3; // fst7@2
  bool result; // al@5
  int i; // [sp+2Ch] [bp-Ch]@1

  std::make_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a1, a2);
  for ( i = a2; ; __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator<<double *,std::vector<double,std::allocator<double>>>((int)&i, (int)&a3);
    if ( !result )
      break;
    v3 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&i);
    if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1) > v3 )
      std::__pop_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a1, a2, i);
  }
  return result;
}

//----- (08049E81) --------------------------------------------------------
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2)
{
  bool result; // al@3

  while ( 1 )
  {
    result = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1) > 1;
    if ( !result )
      break;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--((int)&a2);
    std::__pop_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a1, a2, a2);
  }
  return result;
}

//----- (08049ECC) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -8 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (08049EFF) --------------------------------------------------------
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2, char a3)
{
  double v3; // ST08_8@1
  long double v4; // fst7@2
  char result; // al@3
  double v6; // ST08_8@4
  long double v7; // fst6@4
  bool v8; // c0@4
  bool v9; // c3@4
  double v10; // ST08_8@6
  long double v11; // fst6@6
  bool v12; // c0@6
  bool v13; // c3@6
  long double v14; // fst7@7

  v3 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
  if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a2) <= (long double)v3 )
  {
    v10 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
    v11 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3);
    v12 = v11 < v10;
    v13 = v11 == v10;
    result = (v12 || v13) == 0;
    if ( v12 || v13 )
    {
      v14 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a2);
      if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3) <= v14 )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
                   a1,
                   a2);
      else
        result = std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
                   a1,
                   a3);
    }
  }
  else
  {
    v4 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a2);
    if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3) <= v4 )
    {
      v6 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
      v7 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3);
      v8 = v7 < v6;
      v9 = v7 == v6;
      result = (v8 || v9) == 0;
      if ( !v8 && !v9 )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
                   a1,
                   a3);
    }
    else
    {
      result = std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
                 a1,
                 a2);
    }
  }
  return result;
}

//----- (0804A056) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A060) --------------------------------------------------------
int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,double>@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@3
  long double v5; // fst7@6

  while ( 1 )
  {
    while ( 1 )
    {
      v4 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a2);
      if ( *(double *)a4 <= (long double)*(double *)v4 )
        break;
      __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++((int)&a2);
    }
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--((int)&a3);
    while ( 1 )
    {
      v5 = *(double *)a4;
      if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3) <= v5 )
        break;
      __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--((int)&a3);
    }
    if ( !__gnu_cxx::operator<<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a3) )
      break;
    std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
      a2,
      a3);
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++((int)&a2);
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804A120) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<double *,std::vector<double,std::allocator<double>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a2);
}

//----- (0804A14C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 8;
  return a1;
}

//----- (0804A161) --------------------------------------------------------
int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>((int)&v6, a2);
  std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804A1BB) --------------------------------------------------------
double __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(int a1)
{
  int v1; // eax@1
  int v2; // edx@1
  int v3; // ebx@2
  int v4; // eax@2
  int v5; // edx@2
  int v6; // eax@3
  int v7; // ecx@4
  double result; // rax@4
  int v9; // [sp+14h] [bp-14h]@1
  double v10; // [sp+18h] [bp-10h]@1

  v1 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
  v2 = *(_DWORD *)(v1 + 4);
  LODWORD(v10) = *(_DWORD *)v1;
  HIDWORD(v10) = v2;
  v9 = a1;
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--((int)&v9);
  while ( 1 )
  {
    v6 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v9);
    if ( *(double *)v6 <= (long double)v10 )
      break;
    v3 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
    v4 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v9);
    v5 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)v3 = *(_DWORD *)v4;
    *(_DWORD *)(v3 + 4) = v5;
    a1 = v9;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--((int)&v9);
  }
  v7 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
  result = v10;
  *(double *)v7 = v10;
  return result;
}

//----- (0804A25C) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A276) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A28A) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804A2BA) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A2DB) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804A2E0) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804A2FA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A32A) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A33D) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A35E) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804A388) --------------------------------------------------------
void __gnu_cxx::new_allocator<double>::new_allocator()
{
  ;
}

//----- (0804A38E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<double>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<double>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (0804A3BE) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<double *,unsigned int,double>(int a1, int a2, int a3)
{
  return std::fill_n<double *,unsigned int,double>(a1, a2, a3);
}

//----- (0804A3DF) --------------------------------------------------------
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2)
{
  char result; // al@1
  int v3; // eax@3
  int v4; // edx@3
  int i; // [sp+28h] [bp-20h]@2
  char v6; // [sp+2Ch] [bp-1Ch]@3
  unsigned int v7; // [sp+30h] [bp-18h]@3
  int v8; // [sp+34h] [bp-14h]@3
  int v9; // [sp+3Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1) <= 1;
  if ( !result )
  {
    v9 = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1);
    for ( i = (v9 - 2) / 2; ; --i )
    {
      __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
        (int)&v6,
        (int)&a1,
        (int)&i);
      v3 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v6);
      v4 = *(_DWORD *)(v3 + 4);
      v7 = *(_DWORD *)v3;
      v8 = v4;
      std::__adjust_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(
        a1,
        i,
        v9,
        COERCE_DOUBLE(__PAIR__(v4, v7)));
      result = i;
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (0804A4A6) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator<<double *,std::vector<double,std::allocator<double>>>(int a1, int a2)
{
  unsigned int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a1);
  return v2 < *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base(a2);
}

//----- (0804A4D2) --------------------------------------------------------
void __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2, char a3)
{
  double v3; // ST28_8@1
  int v4; // ebx@1
  int v5; // eax@1
  int v6; // edx@1
  int v7; // eax@1

  v3 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3);
  v4 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a3);
  v5 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
  v6 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v4 = *(_DWORD *)v5;
  *(_DWORD *)(v4 + 4) = v6;
  v7 = __gnu_cxx::operator-<double *,std::vector<double,std::allocator<double>>>((int)&a2, (int)&a1);
  std::__adjust_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(
    a1,
    0,
    v7,
    v3);
}

//----- (0804A550) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 8;
  return a1;
}

//----- (0804A565) --------------------------------------------------------
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2)
{
  return std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(
           a1,
           a2);
}

//----- (0804A57F) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,false>::_S_base(
    a1,
    a2);
  return a1;
}

//----- (0804A5A1) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(a2);
  v8 = std::__copy_move_backward_a<false,double *,double *>((void *)v6, v5, v4);
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804A600) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804A606) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804A610) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A632) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804A638) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804A66E) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804A6DC) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804A6E4) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804A6F8) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<double>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (0804A702) --------------------------------------------------------
int __cdecl std::fill_n<double *,unsigned int,double>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<double *>(a1);
  return std::__fill_n_a<double *,unsigned int,double>(v3, a2, a3);
}

//----- (0804A72B) --------------------------------------------------------
void __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(char a1, int a2, int a3, double a4)
{
  double v4; // ST20_8@2
  int v5; // ebx@4
  int v6; // eax@4
  int v7; // edx@4
  int v8; // ebx@8
  int v9; // eax@8
  int v10; // edx@8
  double v11; // [sp+28h] [bp-50h]@1
  int i; // [sp+38h] [bp-40h]@1
  char v13; // [sp+3Ch] [bp-3Ch]@2
  char v14; // [sp+40h] [bp-38h]@2
  int v15; // [sp+44h] [bp-34h]@2
  char v16; // [sp+48h] [bp-30h]@4
  char v17; // [sp+4Ch] [bp-2Ch]@4
  char v18; // [sp+50h] [bp-28h]@8
  char v19; // [sp+54h] [bp-24h]@8
  int v20; // [sp+58h] [bp-20h]@8
  int v21; // [sp+5Ch] [bp-1Ch]@1

  v11 = a4;
  v21 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v13,
      (int)&a1,
      (int)&i);
    v4 = *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v13);
    v15 = i - 1;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v14,
      (int)&a1,
      (int)&v15);
    if ( *(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v14) > (long double)v4 )
      --i;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v16,
      (int)&a1,
      (int)&a2);
    v5 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v16);
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v17,
      (int)&a1,
      (int)&i);
    v6 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v17);
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v5 = *(_DWORD *)v6;
    *(_DWORD *)(v5 + 4) = v7;
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v18,
      (int)&a1,
      (int)&a2);
    v8 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v18);
    v20 = i - 1;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v19,
      (int)&a1,
      (int)&v20);
    v9 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v19);
    v10 = *(_DWORD *)(v9 + 4);
    *(_DWORD *)v8 = *(_DWORD *)v9;
    *(_DWORD *)(v8 + 4) = v10;
    a2 = i - 1;
  }
  std::__push_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(
    a1,
    a2,
    v21,
    v11);
}

//----- (0804A910) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1, char a2)
{
  int v2; // ebx@1
  int v3; // eax@1

  v2 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a2);
  v3 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&a1);
  return std::swap<double>(v3, v2);
}

//----- (0804A941) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804A953) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,true>::_S_base(a1);
}

//----- (0804A966) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,double *,double *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<double>(src, a2, a3);
}

//----- (0804A98B) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A9AC) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804A9B6) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804AA0B) --------------------------------------------------------
int __cdecl std::__niter_base<double *>(int a1)
{
  return std::_Iter_base<double *,false>::_S_base(a1);
}

//----- (0804AA1E) --------------------------------------------------------
int __cdecl std::__fill_n_a<double *,unsigned int,double>(int a1, int a2, int a3)
{
  int v4; // [sp+0h] [bp-10h]@1
  int v5; // [sp+4h] [bp-Ch]@1
  int v6; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = *(_DWORD *)(a3 + 4);
  v6 = a2;
  while ( v6 )
  {
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v5;
    --v6;
    a1 += 8;
  }
  return a1;
}

//----- (0804AA5A) --------------------------------------------------------
double __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,int,double>(char a1, int a2, int a3, double a4)
{
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // edx@2
  bool v7; // al@5
  int v8; // ecx@8
  double result; // rax@8
  double v10; // [sp+18h] [bp-40h]@1
  int i; // [sp+2Ch] [bp-2Ch]@1
  char v12; // [sp+30h] [bp-28h]@2
  char v13; // [sp+34h] [bp-24h]@2
  char v14; // [sp+38h] [bp-20h]@4
  char v15; // [sp+3Ch] [bp-1Ch]@8

  v10 = a4;
  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v7 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
        (int)&v14,
        (int)&a1,
        (int)&i);
      if ( v10 > (long double)*(double *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v14) )
        v7 = 1;
    }
    if ( !v7 )
      break;
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v12,
      (int)&a1,
      (int)&a2);
    v4 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v12);
    __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
      (int)&v13,
      (int)&a1,
      (int)&i);
    v5 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v13);
    v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_DWORD *)(v4 + 4) = v6;
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator+(
    (int)&v15,
    (int)&a1,
    (int)&a2);
  v8 = __gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::operator*((int)&v15);
  result = v10;
  *(double *)v8 = v10;
  return result;
}

//----- (0804AB7E) --------------------------------------------------------
int __cdecl std::swap<double>(int a1, int a2)
{
  int v2; // ST08_4@1
  int v3; // ST0C_4@1
  int v4; // edx@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  result = v2;
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 4) = v3;
  return result;
}

//----- (0804ABB2) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<double *,std::vector<double,std::allocator<double>>>::base((int)&a1);
}

//----- (0804ABC7) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<double>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 3;
  if ( v4 )
    memmove((void *)(-8 * v4 + a3), src, 8 * v4);
  return -8 * v4 + a3;
}

//----- (0804AC1C) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804AC46) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804ACFD) --------------------------------------------------------
int __cdecl std::_Iter_base<double *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AD05) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804AD18) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804AD48) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804AD61) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804AD6A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804AD72) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (0804ADBC) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804ADE4) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804AE0C) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804AE2D) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AE36) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804AE74) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804AE83) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804AEA4) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804AEC5) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804AF10) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804AF32) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804AF76) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804AF88) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804AF9B) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804AFC0) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804AFD5) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804B01E) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804B030) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804B040) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804B09A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804B0A0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804DD50;
  v3 = (void (__cdecl *)())off_804DD50;
  if ( off_804DD50 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804DD50: using guessed type int (*off_804DD50)();

//----- (0804B0C8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 171 function(s)"
