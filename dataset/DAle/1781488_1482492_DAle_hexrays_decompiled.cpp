/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl std::ios_base::sync_with_stdio(std::ios_base *this, bool); idb
// double sqrt(double x);
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl std::operator&(int a1, int a2);
int __cdecl std::operator|(__int64 a1);
int __cdecl std::operator~(int a1);
int __cdecl std::operator|=(int a1, int a2);
int *__cdecl std::operator&=(int *a1, int a2);
int __cdecl std::operator|(__int64 a1);
int __cdecl std::ios_base::setf(int a1, int a2, int a3);
std::ios_base *__cdecl std::fixed(std::ios_base *a1);
int __stdcall std::setprecision(int a1, int a2);
long double __cdecl timefromx(double a1, double a2);
void std::allocator<double>::allocator();
void std::allocator<double>::~allocator();
int __cdecl std::vector<double,std::allocator<double>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<double,std::allocator<double>>::~vector(int a1);
int __cdecl std::vector<double,std::allocator<double>>::operator[](int a1, int a2);
void __gnu_cxx::new_allocator<double>::new_allocator();
void __gnu_cxx::new_allocator<double>::~new_allocator();
void std::_Vector_base<double,std::allocator<double>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<double,std::allocator<double>>::~_Vector_base(int a1);
int __cdecl std::vector<double,std::allocator<double>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<double *,double>();
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<double,std::allocator<double>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<double *,unsigned int,double,double>(int a1, int a2, int a3);
void std::_Destroy<double *>();
void std::allocator<double>::allocator();
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<double>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<double *,unsigned int,double>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<double *>();
void __gnu_cxx::new_allocator<double>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<double>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<double *,unsigned int,double>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<double>::max_size();
int __cdecl std::fill_n<double *,unsigned int,double>(int a1, int a2, int a3);
int __cdecl std::__niter_base<double *>(int a1);
int __cdecl std::__fill_n_a<double *,unsigned int,double>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<double *,false>::_S_base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int _CTOR_LIST__ = 4294967295; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
char edata; // weak
_UNKNOWN unk_804B18B; // weak
int dtor_idx_3330; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048888) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048910: using guessed type int __gmon_start__(void);

//----- (08048A30) --------------------------------------------------------
#error "8048A33: positive sp value has been found (funcsize=2)"

//----- (08048A60) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804B18B - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804B18B - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048A60: could not find valid save-restore pair for ebp
// 804B188: using guessed type char edata;

//----- (08048A90) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048A90: could not find valid save-restore pair for ebp

//----- (08048AD0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804B02C: using guessed type int _DTOR_LIST__[];
// 804B188: using guessed type char edata;
// 804B18C: using guessed type int dtor_idx_3330;

//----- (08048B20) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048B20: could not find valid save-restore pair for ebp

//----- (08048B50) --------------------------------------------------------
#error "8048B7F: call analysis failed (funcsize=385)"

//----- (080491E3) --------------------------------------------------------
int __cdecl std::operator&(int a1, int a2)
{
  return a1 & a2;
}

//----- (080491F0) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (080491FD) --------------------------------------------------------
int __cdecl std::operator~(int a1)
{
  return ~a1;
}

//----- (08049207) --------------------------------------------------------
int __cdecl std::operator|=(int a1, int a2)
{
  __int64 v2; // ST00_8@1

  HIDWORD(v2) = a2;
  LODWORD(v2) = *(_DWORD *)a1;
  *(_DWORD *)a1 = std::operator|(v2);
  return a1;
}

//----- (0804922B) --------------------------------------------------------
int *__cdecl std::operator&=(int *a1, int a2)
{
  *a1 = std::operator&(*a1, a2);
  return a1;
}

//----- (0804924F) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (0804925C) --------------------------------------------------------
int __cdecl std::ios_base::setf(int a1, int a2, int a3)
{
  int v3; // ST1C_4@1
  int v4; // eax@1
  int v5; // eax@1

  v3 = *(_DWORD *)(a1 + 12);
  v4 = std::operator~(a3);
  std::operator&=((int *)(a1 + 12), v4);
  v5 = std::operator&(a2, a3);
  std::operator|=(a1 + 12, v5);
  return v3;
}

//----- (080492B1) --------------------------------------------------------
std::ios_base *__cdecl std::fixed(std::ios_base *a1)
{
  std::ios_base::setf((int)a1, 4, 260);
  return a1;
}

//----- (080492D7) --------------------------------------------------------
int __stdcall std::setprecision(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (080492E9) --------------------------------------------------------
long double __cdecl timefromx(double a1, double a2)
{
  return sqrt((a1 + a1) / a2);
}

//----- (0804931A) --------------------------------------------------------
void std::allocator<double>::allocator()
{
  __gnu_cxx::new_allocator<double>::new_allocator();
}

//----- (0804932E) --------------------------------------------------------
void std::allocator<double>::~allocator()
{
  __gnu_cxx::new_allocator<double>::~new_allocator();
}

//----- (08049342) --------------------------------------------------------
int __cdecl std::vector<double,std::allocator<double>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<double,std::allocator<double>>::_Vector_base(a1, a2);
  return std::vector<double,std::allocator<double>>::_M_fill_initialize(a1, a2, a3);
}

//----- (0804939A) --------------------------------------------------------
void __cdecl std::vector<double,std::allocator<double>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<double *,double>();
  std::_Vector_base<double,std::allocator<double>>::~_Vector_base(a1);
}

//----- (080493F2) --------------------------------------------------------
int __cdecl std::vector<double,std::allocator<double>>::operator[](int a1, int a2)
{
  return 8 * a2 + *(_DWORD *)a1;
}

//----- (08049404) --------------------------------------------------------
void __gnu_cxx::new_allocator<double>::new_allocator()
{
  ;
}

//----- (0804940A) --------------------------------------------------------
void __gnu_cxx::new_allocator<double>::~new_allocator()
{
  ;
}

//----- (08049410) --------------------------------------------------------
void std::_Vector_base<double,std::allocator<double>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<double>::~allocator();
}

//----- (08049424) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<double,std::allocator<double>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<double,std::allocator<double>>::_M_create_storage(a1, a2);
}

//----- (0804946E) --------------------------------------------------------
void __cdecl std::_Vector_base<double,std::allocator<double>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
  std::_Vector_base<double,std::allocator<double>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<double,std::allocator<double>>::_Vector_impl::~_Vector_impl();
}

//----- (080494CE) --------------------------------------------------------
int __cdecl std::vector<double,std::allocator<double>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<double *,unsigned int,double,double>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804950C) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049514) --------------------------------------------------------
void std::_Destroy<double *,double>()
{
  std::_Destroy<double *>();
}

//----- (0804952E) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<double>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049566) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<double,std::allocator<double>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * a2;
  return result;
}

//----- (080495A4) --------------------------------------------------------
void __cdecl std::_Vector_base<double,std::allocator<double>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<double>::deallocate(a1, a2);
}

//----- (080495CB) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<double *,unsigned int,double,double>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<double *,unsigned int,double>(a1, a2, a3);
}

//----- (080495EC) --------------------------------------------------------
void std::_Destroy<double *>()
{
  std::_Destroy_aux<true>::__destroy<double *>();
}

//----- (08049606) --------------------------------------------------------
void std::allocator<double>::allocator()
{
  __gnu_cxx::new_allocator<double>::new_allocator();
}

//----- (08049620) --------------------------------------------------------
int __cdecl std::_Vector_base<double,std::allocator<double>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<double>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049650) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<double>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049663) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<double *,unsigned int,double>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<double *,unsigned int,double>(a1, a2, a3);
}

//----- (08049684) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<double *>()
{
  ;
}

//----- (0804968A) --------------------------------------------------------
void __gnu_cxx::new_allocator<double>::new_allocator()
{
  ;
}

//----- (08049690) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<double>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<double>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (080496C0) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<double *,unsigned int,double>(int a1, int a2, int a3)
{
  return std::fill_n<double *,unsigned int,double>(a1, a2, a3);
}

//----- (080496E2) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<double>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (080496EC) --------------------------------------------------------
int __cdecl std::fill_n<double *,unsigned int,double>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<double *>(a1);
  return std::__fill_n_a<double *,unsigned int,double>(v3, a2, a3);
}

//----- (08049715) --------------------------------------------------------
int __cdecl std::__niter_base<double *>(int a1)
{
  return std::_Iter_base<double *,false>::_S_base(a1);
}

//----- (08049728) --------------------------------------------------------
int __cdecl std::__fill_n_a<double *,unsigned int,double>(int a1, int a2, int a3)
{
  int v4; // [sp+0h] [bp-10h]@1
  int v5; // [sp+4h] [bp-Ch]@1
  int v6; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = *(_DWORD *)(a3 + 4);
  v6 = a2;
  while ( v6 )
  {
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v5;
    --v6;
    a1 += 8;
  }
  return a1;
}

//----- (08049764) --------------------------------------------------------
int __cdecl std::_Iter_base<double *,false>::_S_base(int a1)
{
  return a1;
}

//----- (08049770) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (08049780) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (080497DA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (080497E0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int *v2; // ebx@1
  void (*v3)(void); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &_CTOR_LIST__;
  v3 = (void (*)(void))_CTOR_LIST__;
  if ( _CTOR_LIST__ != -1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (*)(void))*v2;
    }
    while ( *v2 != -1 );
  }
  return v5;
}
// 804B024: using guessed type int _CTOR_LIST__;

//----- (08049808) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 2 decompilation failure(s) on 53 function(s)"
