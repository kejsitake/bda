/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
int __cdecl highest_best(int a1, int a2, int a3);
int __cdecl std::max<int>(int a1, int a2);
int __cdecl std::min<int>(int a1, int a2);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
void std::_Destroy<int *>();
void std::allocator<int>::allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void __gnu_cxx::new_allocator<int>::new_allocator();
signed int __gnu_cxx::new_allocator<int>::max_size();
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int (*off_804AA4C)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080486BC) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048720: using guessed type int __gmon_start__(void);

//----- (080487F0) --------------------------------------------------------
#error "80487F3: positive sp value has been found (funcsize=2)"

//----- (08048820) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048820: could not find valid save-restore pair for ebp

//----- (08048850) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048850: could not find valid save-restore pair for ebp

//----- (08048890) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804AA54: using guessed type int _DTOR_LIST__[];
// 804ACCC: using guessed type char completed_3328;
// 804ACD0: using guessed type int dtor_idx_3330;

//----- (080488E0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80488E0: could not find valid save-restore pair for ebp

//----- (08048910) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // ebx@2
  int v4; // ebx@2
  int v5; // eax@5
  int v6; // eax@5
  int v7; // eax@6
  int v8; // eax@7
  bool v9; // al@8
  int v10; // eax@12
  int v11; // eax@14
  int v12; // eax@24
  int v13; // eax@24
  int v14; // eax@24
  int v15; // eax@24
  int v17; // [sp+10h] [bp-54h]@6
  int v18; // [sp+14h] [bp-50h]@5
  int v19; // [sp+18h] [bp-4Ch]@5
  int v20; // [sp+1Ch] [bp-48h]@5
  signed int v21; // [sp+20h] [bp-44h]@4
  int v22; // [sp+24h] [bp-40h]@1
  int v23; // [sp+30h] [bp-34h]@1
  int v24; // [sp+40h] [bp-24h]@24
  int v25; // [sp+44h] [bp-20h]@18
  int k; // [sp+48h] [bp-1Ch]@5
  int v27; // [sp+4Ch] [bp-18h]@5
  int v28; // [sp+50h] [bp-14h]@5
  int v29; // [sp+54h] [bp-10h]@5
  signed int j; // [sp+58h] [bp-Ch]@4
  int i; // [sp+5Ch] [bp-8h]@1

  std::allocator<int>::allocator();
  std::vector<int,std::allocator<int>>::vector<int>((int)&v23, 0x1Fu, -1);
  std::allocator<int>::~allocator();
  std::allocator<int>::allocator();
  std::vector<int,std::allocator<int>>::vector<int>((int)&v22, 0x1Fu, -1);
  std::allocator<int>::~allocator();
  for ( i = 0; i <= 30; ++i )
  {
    v3 = std::vector<int,std::allocator<int>>::operator[]((int)&v23, i);
    *(_DWORD *)v3 = highest_best(i, 2, 2);
    v4 = std::vector<int,std::allocator<int>>::operator[]((int)&v22, i);
    *(_DWORD *)v4 = highest_best(i, 0, 1);
  }
  std::istream::operator>>(&std::cin, &v21);
  for ( j = 1; j <= v21; ++j )
  {
    v5 = std::istream::operator>>(&std::cin, &v20);
    v6 = std::istream::operator>>(v5, &v19);
    std::istream::operator>>(v6, &v18);
    v29 = 0;
    v28 = 0;
    v27 = 0;
    for ( k = 0; k < v20; ++k )
    {
      std::istream::operator>>(&std::cin, &v17);
      v7 = std::vector<int,std::allocator<int>>::operator[]((int)&v23, v17);
      v9 = 0;
      if ( *(_DWORD *)v7 >= v18 )
      {
        v8 = std::vector<int,std::allocator<int>>::operator[]((int)&v22, v17);
        if ( *(_DWORD *)v8 >= v18 )
          v9 = 1;
      }
      if ( v9 )
      {
        ++v27;
      }
      else
      {
        v10 = std::vector<int,std::allocator<int>>::operator[]((int)&v23, v17);
        if ( *(_DWORD *)v10 < v18 )
        {
          v11 = std::vector<int,std::allocator<int>>::operator[]((int)&v22, v17);
          if ( *(_DWORD *)v11 >= v18 )
            ++v28;
        }
        else
        {
          ++v29;
        }
      }
    }
    v25 = v20 - v29 - v28 - v27;
    if ( v19 > v29 )
    {
      v19 -= v29;
      if ( v19 > v27 )
      {
        v19 -= v27;
        if ( v19 > v25 )
        {
          v19 -= v25;
          v28 -= v19;
        }
      }
      else
      {
        v27 = v19;
      }
    }
    else
    {
      v29 = v19;
    }
    v24 = v28 + v29 + v27;
    v12 = std::operator<<<std::char_traits<char>>(&std::cout, "Case #");
    v13 = std::ostream::operator<<(v12, j);
    v14 = std::operator<<<std::char_traits<char>>(v13, ": ");
    v15 = std::ostream::operator<<(v14, v24);
    std::ostream::operator<<(v15, (const char *)&std::endl<char,std::char_traits<char>>);
  }
  std::vector<int,std::allocator<int>>::~vector((int)&v22);
  std::vector<int,std::allocator<int>>::~vector((int)&v23);
  return 0;
}
// 8048700: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 8048770: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048790: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 80487A0: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);

//----- (08048CAD) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048710: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048CEC) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048D08) --------------------------------------------------------
int __cdecl highest_best(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v4; // edx@9
  int i; // [sp+18h] [bp-30h]@1
  int v7; // [sp+1Ch] [bp-2Ch]@1
  int v8; // [sp+20h] [bp-28h]@1
  int v9; // [sp+24h] [bp-24h]@1
  int v10; // [sp+28h] [bp-20h]@2
  int v11; // [sp+2Ch] [bp-1Ch]@2
  int v12; // [sp+30h] [bp-18h]@3
  int v13; // [sp+34h] [bp-14h]@9
  int v14; // [sp+38h] [bp-10h]@9
  int j; // [sp+3Ch] [bp-Ch]@2

  v7 = -1;
  v8 = (a1 + 2) / 3 - a3;
  v9 = 0;
  for ( i = *(_DWORD *)std::max<int>((int)&v9, (int)&v8); ; ++i )
  {
    v13 = a1 / 3;
    v14 = 10;
    v4 = *(_DWORD *)std::min<int>((int)&v14, (int)&v13);
    if ( v4 < i )
      break;
    v10 = a1 - i - 10;
    v11 = -2 * i + a1 - a3;
    v3 = std::max<int>((int)&v11, (int)&v10);
    for ( j = *(_DWORD *)std::max<int>((int)&i, v3);
          j <= 10 && -2 * i + a1 - a2 >= j && i + a3 >= j && (a1 - i) / 2 >= j;
          ++j )
    {
      v12 = a1 - i - j;
      v7 = *(_DWORD *)std::max<int>((int)&v7, (int)&v12);
    }
  }
  return v7;
}

//----- (08048E66) --------------------------------------------------------
int __cdecl std::max<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08048E81) --------------------------------------------------------
int __cdecl std::min<int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a2 >= *(_DWORD *)a1 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08048E9C) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08048EB0) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08048EC4) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
  return std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(a1, a2, a3);
}

//----- (08048F1A) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08048F72) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08048F84) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08048F8A) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (08048F90) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08048FA4) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08048FBE) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (0804901E) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3)
{
  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, (int)&a3);
}

//----- (0804906A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049072) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (0804908C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (080490C4) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (080490EC) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804911C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (0804915A) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049174) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804918E) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (080491A2) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (080491D2) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (080491F3) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (080491F8) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (080491FE) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (08049208) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (08049229) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804924A) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (08049273) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (08049286) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (080492B6) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (080492C0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (080492D0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804932A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (08049330) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804AA4C;
  v3 = (void (__cdecl *)())off_804AA4C;
  if ( off_804AA4C != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804AA4C: using guessed type int (*off_804AA4C)();

//----- (08049358) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 48 function(s)"
