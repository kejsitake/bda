/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl std::__lg(int a1);
void *__cdecl operator new(unsigned int a1, void *a2);
int __cdecl std::operator|(__int64 a1);
A *__cdecl A::A(A *this, int a2, int a3, int a4);
bool __cdecl A::operator<(int a1, int a2);
int __cdecl std::vector<A,std::allocator<A>>::vector(int a1);
void __cdecl std::vector<A,std::allocator<A>>::~vector(int a1);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<A,std::allocator<A>>::push_back(int a1, int a2);
// int __userpurge std::vector<A,std::allocator<A>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<A,std::allocator<A>>::end@<eax>(int a1, int a2);
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, int a2);
int __cdecl std::vector<A,std::allocator<A>>::operator[](int a1, int a2);
void std::_Vector_base<A,std::allocator<A>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<A,std::allocator<A>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<A,std::allocator<A>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<A *,A>();
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<A>>::construct<A>(int a1, void *a2, int a3);
int __cdecl std::vector<A,std::allocator<A>>::_M_insert_aux(int a1, char a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<A *,std::vector<A,std::allocator<A>>>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>(int a1, int a2);
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int>(char a1, int a2, int a3);
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, char a2);
int __cdecl std::_Vector_base<A,std::allocator<A>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<A>::~allocator();
void __cdecl std::_Vector_base<A,std::allocator<A>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<A *>();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy<int *>();
void *__cdecl __gnu_cxx::new_allocator<A>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(int a1);
int __cdecl std::copy_backward<A *,A *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*(int a1);
int __cdecl std::vector<A,std::allocator<A>>::_M_check_len(int, int, char *); // idb
int __cdecl std::_Vector_base<A,std::allocator<A>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<A *,A *,std::allocator<A>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<A>>::destroy();
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, int a2, char a3);
// int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, char a2, char a3);
// int __userpurge __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+@<eax>(int a1, int a2, int a3);
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, char a2);
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, char a2);
void std::allocator<A>::allocator();
void __gnu_cxx::new_allocator<A>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<A>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<A *>();
void std::allocator<int>::allocator();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
int __cdecl std::__miter_base<A *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,A *,A *>(int a1, int a2, int a3);
int __cdecl std::vector<A,std::allocator<A>>::size(int a1);
signed int __cdecl std::vector<A,std::allocator<A>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<A>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<A *,A *,A>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<A>::destroy();
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, int a2, char a3);
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2);
// int __userpurge __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator-@<eax>(int a1, int a2, int a3);
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2, char a3);
// int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,A>@<eax>(int a1, int a2, char a3, int a4);
bool __cdecl __gnu_cxx::operator==<A *,std::vector<A,std::allocator<A>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++(int a1);
// int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, int a2, int a3, char a4);
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1);
void __gnu_cxx::new_allocator<A>::new_allocator();
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<A *,false>::_S_base(int a1);
int __cdecl std::__niter_base<A *>(int a1);
int __cdecl std::__copy_move_backward_a<false,A *,A *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<A>>::max_size();
int __cdecl std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<A>::max_size();
int __cdecl std::uninitialized_copy<A *,A *>(int a1, int a2, int a3);
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2);
bool __cdecl __gnu_cxx::operator<<A *,std::vector<A,std::allocator<A>>>(int a1, int a2);
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--(int a1);
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, char a2, char a3, char a4);
signed int __gnu_cxx::new_allocator<int>::max_size();
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<A *,A *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<A *,A *>(int a1, int a2, int a3);
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(char a1, int a2, int a3, int a4, int a5, int a6);
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__addressof<A>(int a1);
void *__cdecl std::_Construct<A,A>(void *a1, int a2);
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(char a1, int a2, int a3, int a4, int a5, int a6);
int __cdecl std::swap<A>(int a1, int a2);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,true>::_S_base(char a1);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int _CTOR_LIST__ = 4294967295; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
char edata; // weak
_UNKNOWN unk_804D49F; // weak
int dtor_idx_3330; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048830) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048890: using guessed type int __gmon_start__(void);

//----- (080489C0) --------------------------------------------------------
#error "80489C3: positive sp value has been found (funcsize=2)"

//----- (080489F0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804D49F - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804D49F - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 80489F0: could not find valid save-restore pair for ebp
// 804D49C: using guessed type char edata;

//----- (08048A20) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048A20: could not find valid save-restore pair for ebp

//----- (08048A60) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804D344: using guessed type int _DTOR_LIST__[];
// 804D49C: using guessed type char edata;
// 804D4A0: using guessed type int dtor_idx_3330;

//----- (08048AB0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048AB0: could not find valid save-restore pair for ebp

//----- (08048AE0) --------------------------------------------------------
#error "8048B0E: call analysis failed (funcsize=208)"

//----- (08048E8E) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048EA6) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048EAE) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (08048EBC) --------------------------------------------------------
A *__cdecl A::A(A *this, int a2, int a3, int a4)
{
  A *result; // eax@1

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  result = this;
  *((_DWORD *)this + 2) = a4;
  return result;
}

//----- (08048EDC) --------------------------------------------------------
bool __cdecl A::operator<(int a1, int a2)
{
  return *(_DWORD *)(a2 + 4) * *(_DWORD *)a1 < *(_DWORD *)a2 * *(_DWORD *)(a1 + 4)
      || *(_DWORD *)(a2 + 4) * *(_DWORD *)a1 == *(_DWORD *)a2 * *(_DWORD *)(a1 + 4)
      && *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
}

//----- (08048F38) --------------------------------------------------------
int __cdecl std::vector<A,std::allocator<A>>::vector(int a1)
{
  return std::_Vector_base<A,std::allocator<A>>::_Vector_base(a1);
}

//----- (08048F4C) --------------------------------------------------------
void __cdecl std::vector<A,std::allocator<A>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<A *,A>();
  std::_Vector_base<A,std::allocator<A>>::~_Vector_base(a1);
}

//----- (08048FA4) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08048FB8) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08048FCC) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, a2);
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, a3);
}

//----- (08049024) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (0804907C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (0804908E) --------------------------------------------------------
int __cdecl std::vector<A,std::allocator<A>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<A,std::allocator<A>>::end((int)&v3, a1);
    result = std::vector<A,std::allocator<A>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<A>>::construct<A>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 12;
  }
  return result;
}

//----- (08049102) --------------------------------------------------------
int __userpurge std::vector<A,std::allocator<A>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (08049122) --------------------------------------------------------
int __userpurge std::vector<A,std::allocator<A>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049144) --------------------------------------------------------
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, int a2)
{
  bool result; // al@1
  int v3; // eax@2
  int v4; // eax@2

  result = __gnu_cxx::operator!=<A *,std::vector<A,std::allocator<A>>>((int)&a1, (int)&a2);
  if ( result )
  {
    v3 = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1);
    v4 = std::__lg(v3);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int>(a1, a2, 2 * v4);
    result = std::__final_insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2);
  }
  return result;
}

//----- (080491A6) --------------------------------------------------------
int __cdecl std::vector<A,std::allocator<A>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (080491BE) --------------------------------------------------------
void std::_Vector_base<A,std::allocator<A>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<A>::~allocator();
}

//----- (080491D2) --------------------------------------------------------
int __cdecl std::_Vector_base<A,std::allocator<A>>::_Vector_base(int a1)
{
  return std::_Vector_base<A,std::allocator<A>>::_Vector_impl::_Vector_impl(a1);
}

//----- (080491E6) --------------------------------------------------------
void __cdecl std::_Vector_base<A,std::allocator<A>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<A,std::allocator<A>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<A,std::allocator<A>>::_Vector_impl::~_Vector_impl();
}

//----- (08049268) --------------------------------------------------------
int __cdecl std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049270) --------------------------------------------------------
void std::_Destroy<A *,A>()
{
  std::_Destroy<A *>();
}

//----- (0804928A) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049290) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (08049296) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (080492AA) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (080492F4) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (08049354) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049392) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804939A) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (080493B4) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<A>>::construct<A>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<A>::construct(a1, a2, a3);
}

//----- (080493D6) --------------------------------------------------------
int __cdecl std::vector<A,std::allocator<A>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // ST10_4@2
  int v4; // ST14_4@2
  int v5; // ST18_4@2
  int v6; // esi@2
  int v7; // ebx@2
  int v8; // eax@2
  int result; // eax@2
  int v10; // eax@3
  int v11; // eax@3
  int v12; // esi@3
  int v13; // eax@3
  int v14; // ST04_4@3
  int v15; // ST00_4@3
  int v16; // ST08_4@3
  char v17; // [sp+1Ch] [bp-1Ch]@3
  void *v18; // [sp+20h] [bp-18h]@3
  int v19; // [sp+24h] [bp-14h]@3
  int v20; // [sp+28h] [bp-10h]@3
  int v21; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v20 = std::vector<A,std::allocator<A>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<A,std::allocator<A>>::begin((int)&v17, a1);
    v19 = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&v17);
    v10 = std::_Vector_base<A,std::allocator<A>>::_M_allocate(a1, v20);
    v18 = (void *)v10;
    v21 = v10;
    __gnu_cxx::__alloc_traits<std::allocator<A>>::construct<A>(a1, (void *)(12 * v19 + v10), a3);
    v21 = 0;
    std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(a1);
    v11 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<A *,A *,std::allocator<A>>(*(_DWORD *)a1, *(_DWORD *)v11, (int)v18)
        + 12;
    std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(a1);
    v12 = *(_DWORD *)(a1 + 4);
    v13 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<A *,A *,std::allocator<A>>(*(_DWORD *)v13, v12, v21);
    std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(a1);
    v14 = *(_DWORD *)(a1 + 4);
    v15 = *(_DWORD *)a1;
    std::_Destroy<A *,A>();
    v16 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
    std::_Vector_base<A,std::allocator<A>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v18;
    *(_DWORD *)(a1 + 4) = v21;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v18 + 12 * v20;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<A>>::construct<A>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 12);
    *(_DWORD *)(a1 + 4) += 12;
    v3 = *(_DWORD *)a3;
    v4 = *(_DWORD *)(a3 + 4);
    v5 = *(_DWORD *)(a3 + 8);
    v6 = *(_DWORD *)(a1 + 4) - 12;
    v7 = *(_DWORD *)(a1 + 4) - 24;
    v8 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base((int)&a2);
    std::copy_backward<A *,A *>(*(_DWORD *)v8, v7, v6);
    result = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
    *(_DWORD *)result = v3;
    *(_DWORD *)(result + 4) = v4;
    *(_DWORD *)(result + 8) = v5;
  }
  return result;
}

//----- (080496D0) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (080496DF) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<A *,std::vector<A,std::allocator<A>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a2);
}

//----- (0804970B) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a1);
  return -1431655765
       * ((v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a2)) >> 2);
}

//----- (0804975D) --------------------------------------------------------
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int>(char a1, int a2, int a3)
{
  bool result; // al@3
  int v4; // [sp+1Ch] [bp-Ch]@4

  while ( 1 )
  {
    result = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1) > 16;
    if ( !result )
      break;
    if ( !a3 )
      return std::partial_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2, a2);
    --a3;
    std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
      (int)&v4,
      a1,
      a2);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (080497EC) --------------------------------------------------------
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, char a2)
{
  bool result; // al@2
  int v3; // [sp+10h] [bp-18h]@2
  int v4; // [sp+14h] [bp-14h]@2
  int v5; // [sp+18h] [bp-10h]@2
  int v6; // [sp+1Ch] [bp-Ch]@2

  if ( __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1) > 16 )
  {
    v3 = 16;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v4, (int)&a1, (int)&v3);
    std::__insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, v4);
    v5 = 16;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v6, (int)&a1, (int)&v5);
    result = std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(v6, a2);
  }
  else
  {
    result = std::__insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2);
  }
  return result;
}

//----- (080498A4) --------------------------------------------------------
int __cdecl std::_Vector_base<A,std::allocator<A>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<A>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (080498D4) --------------------------------------------------------
void std::allocator<A>::~allocator()
{
  __gnu_cxx::new_allocator<A>::~new_allocator();
}

//----- (080498E8) --------------------------------------------------------
void __cdecl std::_Vector_base<A,std::allocator<A>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<A>::deallocate(a1, a2);
}

//----- (0804990F) --------------------------------------------------------
void std::_Destroy<A *>()
{
  std::_Destroy_aux<true>::__destroy<A *>();
}

//----- (0804992A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049962) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (080499A0) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (080499C7) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (080499E8) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049A02) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<A>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(0xCu, a2);
  if ( result )
  {
    *(_DWORD *)result = *(_DWORD *)a3;
    *((_DWORD *)result + 1) = *(_DWORD *)(a3 + 4);
    *((_DWORD *)result + 2) = *(_DWORD *)(a3 + 8);
  }
  return result;
}

//----- (08049A34) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(int a1)
{
  return a1;
}

//----- (08049A3C) --------------------------------------------------------
int __cdecl std::copy_backward<A *,A *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<A *>(a2);
  v4 = std::__miter_base<A *>(a1);
  return std::__copy_move_backward_a2<false,A *,A *>(v4, v3, a3);
}

//----- (08049A74) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (08049A7E) --------------------------------------------------------
int __cdecl std::vector<A,std::allocator<A>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<A,std::allocator<A>>::max_size(a1);
  v4 = std::vector<A,std::allocator<A>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<A,std::allocator<A>>::size(a1);
  v9 = std::vector<A,std::allocator<A>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<A,std::allocator<A>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<A,std::allocator<A>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<A,std::allocator<A>>::max_size(a1);
  return result;
}

//----- (08049B22) --------------------------------------------------------
int __cdecl std::_Vector_base<A,std::allocator<A>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<A>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049B51) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<A *,A *,std::allocator<A>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<A *,A *,A>(a1, a2, a3);
}

//----- (08049B79) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<A>>::destroy()
{
  __gnu_cxx::new_allocator<A>::destroy();
}

//----- (08049B93) --------------------------------------------------------
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, int a2, char a3)
{
  std::__heap_select<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2, a3);
  return std::sort_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2);
}

//----- (08049BC6) --------------------------------------------------------
int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, char a2, char a3)
{
  int v3; // ebx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+20h] [bp-18h]@1
  int v8; // [sp+24h] [bp-14h]@1
  int v9; // [sp+28h] [bp-10h]@1
  int v10; // [sp+2Ch] [bp-Ch]@1

  v6 = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a3, (int)&a2) / 2;
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v5, (int)&a2, (int)&v6);
  v7 = 1;
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator-((int)&v8, (int)&a3, (int)&v7);
  std::__move_median_first<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a2, v5, v8);
  v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
  v9 = 1;
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v10, (int)&a2, (int)&v9);
  std::__unguarded_partition<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,A>(a1, v10, a3, v3);
  return a1;
}

//----- (08049CAA) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 12 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (08049CE3) --------------------------------------------------------
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, char a2)
{
  bool result; // al@1
  int v3; // ebx@3
  int v4; // eax@3
  int v5; // eax@4
  int v6; // ST10_4@4
  int v7; // ST14_4@4
  int v8; // ST18_4@4
  int v9; // eax@4
  int v10; // [sp+1Ch] [bp-1Ch]@2
  int v11; // [sp+20h] [bp-18h]@2
  char v12; // [sp+24h] [bp-14h]@4
  int v13; // [sp+28h] [bp-10h]@4
  int v14; // [sp+2Ch] [bp-Ch]@4

  result = __gnu_cxx::operator==<A *,std::vector<A,std::allocator<A>>>((int)&a1, (int)&a2);
  if ( !result )
  {
    v11 = 1;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v10, (int)&a1, (int)&v11);
    while ( 1 )
    {
      result = __gnu_cxx::operator!=<A *,std::vector<A,std::allocator<A>>>((int)&v10, (int)&a2);
      if ( !result )
        break;
      v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
      v4 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v10);
      if ( A::operator<(v4, v3) )
      {
        v5 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v10);
        v6 = *(_DWORD *)v5;
        v7 = *(_DWORD *)(v5 + 4);
        v8 = *(_DWORD *)(v5 + 8);
        v13 = 1;
        __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v14, (int)&v10, (int)&v13);
        std::copy_backward<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
          (int)&v12,
          a1,
          v10,
          v14);
        v9 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
        *(_DWORD *)v9 = v6;
        *(_DWORD *)(v9 + 4) = v7;
        *(_DWORD *)(v9 + 8) = v8;
      }
      else
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(v10);
      }
      __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++((int)&v10);
    }
  }
  return result;
}

//----- (08049E1A) --------------------------------------------------------
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1, char a2)
{
  bool result; // al@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator!=<A *,std::vector<A,std::allocator<A>>>((int)&i, (int)&a2);
    if ( !result )
      break;
    std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(i);
  }
  return result;
}

//----- (08049E60) --------------------------------------------------------
void std::allocator<A>::allocator()
{
  __gnu_cxx::new_allocator<A>::new_allocator();
}

//----- (08049E74) --------------------------------------------------------
void __gnu_cxx::new_allocator<A>::~new_allocator()
{
  ;
}

//----- (08049E7A) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<A>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049E8D) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<A *>()
{
  ;
}

//----- (08049E92) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049EAC) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049EDC) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049EEF) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (08049F10) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (08049F15) --------------------------------------------------------
int __cdecl std::__miter_base<A *>(int a1)
{
  return std::_Iter_base<A *,false>::_S_base(a1);
}

//----- (08049F28) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,A *,A *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<A *>(a3);
  v4 = std::__niter_base<A *>(a2);
  v5 = std::__niter_base<A *>(a1);
  return std::__copy_move_backward_a<false,A *,A *>(v5, v4, v3);
}

//----- (08049F6C) --------------------------------------------------------
int __cdecl std::vector<A,std::allocator<A>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (08049FA8) --------------------------------------------------------
signed int __cdecl std::vector<A,std::allocator<A>>::max_size(int a1)
{
  std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<A>>::max_size();
}

//----- (08049FC3) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049FDE) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<A>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<A>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804A014) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<A *,A *,A>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<A *,A *>(a1, a2, a3);
}

//----- (0804A036) --------------------------------------------------------
void __gnu_cxx::new_allocator<A>::destroy()
{
  ;
}

//----- (0804A03B) --------------------------------------------------------
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, int a2, char a3)
{
  int v3; // ebx@2
  int v4; // eax@2
  bool result; // al@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2);
  for ( i = a2; ; __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator<<A *,std::vector<A,std::allocator<A>>>((int)&i, (int)&a3);
    if ( !result )
      break;
    v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
    v4 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&i);
    if ( A::operator<(v4, v3) )
      std::__pop_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2, i);
  }
  return result;
}

//----- (0804A0CE) --------------------------------------------------------
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2)
{
  bool result; // al@3

  while ( 1 )
  {
    result = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1) > 1;
    if ( !result )
      break;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--((int)&a2);
    std::__pop_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a1, a2, a2);
  }
  return result;
}

//----- (0804A118) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -12 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804A153) --------------------------------------------------------
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2, char a3)
{
  int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@2
  int v6; // eax@2
  char result; // al@3
  int v8; // ebx@4
  int v9; // eax@4
  int v10; // ebx@6
  int v11; // eax@6
  int v12; // ebx@7
  int v13; // eax@7

  v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
  v4 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
  if ( A::operator<(v4, v3) )
  {
    v5 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
    v6 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
    if ( A::operator<(v6, v5) )
    {
      result = std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
                 a1,
                 a2);
    }
    else
    {
      v8 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
      v9 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
      result = A::operator<(v9, v8);
      if ( result )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
                   a1,
                   a3);
    }
  }
  else
  {
    v10 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
    v11 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
    result = A::operator<(v11, v10);
    if ( !result )
    {
      v12 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
      v13 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
      if ( A::operator<(v13, v12) )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
                   a1,
                   a3);
      else
        result = std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
                   a1,
                   a2);
    }
  }
  return result;
}

//----- (0804A27F) --------------------------------------------------------
int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,A>@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@3
  int v5; // eax@6

  while ( 1 )
  {
    while ( 1 )
    {
      v4 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
      if ( !A::operator<(v4, a4) )
        break;
      __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++((int)&a2);
    }
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--((int)&a3);
    while ( 1 )
    {
      v5 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
      if ( !A::operator<(a4, v5) )
        break;
      __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--((int)&a3);
    }
    if ( !__gnu_cxx::operator<<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a3) )
      break;
    std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
      a2,
      a3);
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++((int)&a2);
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804A333) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<A *,std::vector<A,std::allocator<A>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a2);
}

//----- (0804A360) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 12;
  return a1;
}

//----- (0804A375) --------------------------------------------------------
int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>((int)&v6, a2);
  std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804A3CF) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(int a1)
{
  int v1; // eax@1
  int v2; // ebx@2
  int v3; // eax@2
  int v4; // eax@3
  int result; // eax@4
  int v6; // [sp+10h] [bp-18h]@1
  int v7; // [sp+14h] [bp-14h]@1
  int v8; // [sp+18h] [bp-10h]@1
  int v9; // [sp+1Ch] [bp-Ch]@1

  v1 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
  v7 = *(_DWORD *)v1;
  v8 = *(_DWORD *)(v1 + 4);
  v9 = *(_DWORD *)(v1 + 8);
  v6 = a1;
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--((int)&v6);
  while ( 1 )
  {
    v4 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v6);
    if ( !A::operator<((int)&v7, v4) )
      break;
    v2 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
    v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v6);
    *(_DWORD *)v2 = *(_DWORD *)v3;
    *(_DWORD *)(v2 + 4) = *(_DWORD *)(v3 + 4);
    *(_DWORD *)(v2 + 8) = *(_DWORD *)(v3 + 8);
    a1 = v6;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--((int)&v6);
  }
  result = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
  *(_DWORD *)result = v7;
  *(_DWORD *)(result + 4) = v8;
  *(_DWORD *)(result + 8) = v9;
  return result;
}

//----- (0804A47E) --------------------------------------------------------
void __gnu_cxx::new_allocator<A>::new_allocator()
{
  ;
}

//----- (0804A484) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804A48A) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804A4BA) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A4DB) --------------------------------------------------------
int __cdecl std::_Iter_base<A *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804A4E3) --------------------------------------------------------
int __cdecl std::__niter_base<A *>(int a1)
{
  return std::_Iter_base<A *,false>::_S_base(a1);
}

//----- (0804A4F6) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,A *,A *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<A *,A *>(a1, a2, a3);
}

//----- (0804A51B) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<A>>::max_size()
{
  return __gnu_cxx::new_allocator<A>::max_size();
}

//----- (0804A52E) --------------------------------------------------------
int __cdecl std::_Vector_base<A,std::allocator<A>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A536) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<A>::max_size()
{
  return 357913941;
}

//----- (0804A540) --------------------------------------------------------
int __cdecl std::uninitialized_copy<A *,A *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<A *,A *>(a1, a2, a3);
}

//----- (0804A561) --------------------------------------------------------
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2)
{
  char result; // al@1
  int v3; // eax@3
  int i; // [sp+34h] [bp-14h]@2
  char v5; // [sp+38h] [bp-10h]@3
  int v6; // [sp+3Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1) <= 1;
  if ( !result )
  {
    v6 = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1);
    for ( i = (v6 - 2) / 2; ; --i )
    {
      __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v5, (int)&a1, (int)&i);
      v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v5);
      std::__adjust_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(
        a1,
        i,
        v6,
        *(_DWORD *)v3,
        *(_DWORD *)(v3 + 4),
        *(_DWORD *)(v3 + 8));
      result = i;
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (0804A62F) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator<<A *,std::vector<A,std::allocator<A>>>(int a1, int a2)
{
  unsigned int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a1);
  return v2 < *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base(a2);
}

//----- (0804A65B) --------------------------------------------------------
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2, char a3)
{
  int v3; // eax@1
  int v4; // ST24_4@1
  int v5; // ST28_4@1
  int v6; // ST2C_4@1
  int v7; // ebx@1
  int v8; // eax@1
  int v9; // eax@1

  v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  v6 = *(_DWORD *)(v3 + 8);
  v7 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a3);
  v8 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  v9 = __gnu_cxx::operator-<A *,std::vector<A,std::allocator<A>>>((int)&a2, (int)&a1);
  return std::__adjust_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(
           a1,
           0,
           v9,
           v4,
           v5,
           v6);
}

//----- (0804A6F4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 12;
  return a1;
}

//----- (0804A709) --------------------------------------------------------
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2)
{
  return std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(
           a1,
           a2);
}

//----- (0804A723) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804A745) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(a2);
  v8 = std::__copy_move_backward_a<false,A *,A *>(v6, v5, v4);
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804A7A4) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804A7AE) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804A7D7) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<A *,A *>(int a1, int a2, int a3)
{
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = -1431655765 * ((a2 - a1) >> 2); i > 0; --i )
  {
    a3 -= 12;
    a2 -= 12;
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
  }
  return a3;
}

//----- (0804A83D) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<A *,A *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<A>(v5);
    std::_Construct<A,A>((void *)v3, a1);
    a1 += 12;
    v5 += 12;
  }
  return v5;
}

//----- (0804A87A) --------------------------------------------------------
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(char a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // ebx@4
  int v9; // eax@4
  int v10; // ebx@8
  int v11; // eax@8
  int i; // [sp+28h] [bp-40h]@1
  char v14; // [sp+2Ch] [bp-3Ch]@2
  int v15; // [sp+30h] [bp-38h]@2
  char v16; // [sp+34h] [bp-34h]@2
  char v17; // [sp+38h] [bp-30h]@4
  char v18; // [sp+3Ch] [bp-2Ch]@4
  char v19; // [sp+40h] [bp-28h]@8
  char v20; // [sp+44h] [bp-24h]@8
  int v21; // [sp+48h] [bp-20h]@8
  int v22; // [sp+4Ch] [bp-1Ch]@1

  v22 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    v15 = i - 1;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v14, (int)&a1, (int)&v15);
    v6 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v14);
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v16, (int)&a1, (int)&i);
    v7 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v16);
    if ( A::operator<(v7, v6) )
      --i;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v17, (int)&a1, (int)&a2);
    v8 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v17);
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v18, (int)&a1, (int)&i);
    v9 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v18);
    *(_DWORD *)v8 = *(_DWORD *)v9;
    *(_DWORD *)(v8 + 4) = *(_DWORD *)(v9 + 4);
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v19, (int)&a1, (int)&a2);
    v10 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v19);
    v21 = i - 1;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v20, (int)&a1, (int)&v21);
    v11 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v20);
    *(_DWORD *)v10 = *(_DWORD *)v11;
    *(_DWORD *)(v10 + 4) = *(_DWORD *)(v11 + 4);
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    a2 = i - 1;
  }
  return std::__push_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(
           a1,
           a2,
           v22,
           a4,
           a5,
           a6);
}

//----- (0804AA5E) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1, char a2)
{
  int v2; // ebx@1
  int v3; // eax@1

  v2 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a2);
  v3 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&a1);
  return std::swap<A>(v3, v2);
}

//----- (0804AA8F) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804AAA1) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,true>::_S_base(a1);
}

//----- (0804AAB4) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804AAC7) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804AAF7) --------------------------------------------------------
int __cdecl std::__addressof<A>(int a1)
{
  return a1;
}

//----- (0804AAFF) --------------------------------------------------------
void *__cdecl std::_Construct<A,A>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    *((_DWORD *)result + 1) = *(_DWORD *)(a2 + 4);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

//----- (0804AB31) --------------------------------------------------------
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,int,A>(char a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // eax@4
  bool v9; // al@5
  int result; // eax@8
  int i; // [sp+1Ch] [bp-2Ch]@1
  char v12; // [sp+20h] [bp-28h]@2
  char v13; // [sp+24h] [bp-24h]@2
  char v14; // [sp+28h] [bp-20h]@4
  char v15; // [sp+2Ch] [bp-1Ch]@8

  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v9 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v14, (int)&a1, (int)&i);
      v8 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v14);
      if ( A::operator<(v8, (int)&a4) )
        v9 = 1;
    }
    if ( !v9 )
      break;
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v12, (int)&a1, (int)&a2);
    v6 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v12);
    __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v13, (int)&a1, (int)&i);
    v7 = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v13);
    *(_DWORD *)v6 = *(_DWORD *)v7;
    *(_DWORD *)(v6 + 4) = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator+((int)&v15, (int)&a1, (int)&a2);
  result = __gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::operator*((int)&v15);
  *(_DWORD *)result = a4;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = a6;
  return result;
}

//----- (0804AC58) --------------------------------------------------------
int __cdecl std::swap<A>(int a1, int a2)
{
  int v2; // ST04_4@1
  int v3; // ST08_4@1
  int v4; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a2;
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

//----- (0804AC9E) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<A *,std::vector<A,std::allocator<A>>>::base((int)&a1);
}

//----- (0804ACB3) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804ACC0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804ACD0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804AD2A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804AD30) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int *v2; // ebx@1
  void (*v3)(void); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &_CTOR_LIST__;
  v3 = (void (*)(void))_CTOR_LIST__;
  if ( _CTOR_LIST__ != -1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (*)(void))*v2;
    }
    while ( *v2 != -1 );
  }
  return v5;
}
// 804D33C: using guessed type int _CTOR_LIST__;

//----- (0804AD58) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 2 decompilation failure(s) on 131 function(s)"
