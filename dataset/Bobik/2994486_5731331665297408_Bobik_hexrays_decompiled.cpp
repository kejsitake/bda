/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// int putchar(int c);
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
char __cdecl connected(int a1);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_n();
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
std::_Bit_reference *__cdecl std::_Bit_reference::_Bit_reference(std::_Bit_reference *this, unsigned __int32 *a2, unsigned __int32 a3);
bool __cdecl std::_Bit_reference::operator bool(int a1);
int __cdecl std::_Bit_reference::operator=(int a1, char a2);
void std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator();
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_iterator_base *this, unsigned __int32 *a2, unsigned int a3);
bool __cdecl std::_Bit_iterator_base::_M_bump_up(std::_Bit_iterator_base *this);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_M_incr(std::_Bit_iterator_base *this, int a2);
int __cdecl std::operator-(int a1, int a2);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this, unsigned __int32 *a2, unsigned int a3);
std::_Bit_reference *__stdcall std::_Bit_iterator::operator*(std::_Bit_reference *a1, int a2);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator++(std::_Bit_iterator_base *a1);
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator+=(std::_Bit_iterator_base *a1, int a2);
// int __userpurge std::_Bit_iterator::operator+@<eax>(int a1, int a2, int a3);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, unsigned __int32 *a2, unsigned int a3);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, const std::_Bit_iterator *a2);
bool __cdecl std::_Bit_const_iterator::operator*(int a1);
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::operator++(std::_Bit_iterator_base *a1);
unsigned int __cdecl std::__deque_buf_size(unsigned int a1);
void __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::~queue(int a1);
int __cdecl std::fill<unsigned long *,int>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1);
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *, int); // idb
void __cdecl std::vector<bool,std::allocator<bool>>::~vector(int a1);
std::_Bit_reference *__stdcall std::vector<bool,std::allocator<bool>>::operator[](std::_Bit_reference *a1, int a2, unsigned int a3);
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1);
void __cdecl std::deque<int,std::allocator<int>>::~deque(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::queue(int a1, int a2);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::push(int a1, int a2);
bool __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::empty(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::front(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::pop(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<int,std::allocator<int>>::clear(int a1);
void __cdecl std::vector<int,std::allocator<int>>::resize(int a1, unsigned int a2, char a3);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(int a1, unsigned int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
void std::allocator<bool>::allocator();
void std::allocator<bool>::~allocator();
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1, int a2, int a3);
bool __cdecl std::vector<int,std::allocator<int>>::empty(int a1);
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
bool __cdecl std::operator==<int,int>(int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::back(int a1);
void __cdecl std::vector<int,std::allocator<int>>::pop_back(int a1);
int __cdecl std::__niter_base<unsigned long *>(int a1);
int __cdecl std::__fill_a<unsigned long *,int>(int a1, int a2, int a3);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(int a1);
void std::allocator<bool>::allocator<unsigned long>();
void std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl();
void __cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1);
void __cdecl std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(int a1);
int __cdecl std::vector<bool,std::allocator<bool>>::_M_initialize(int a1, int a2);
int __cdecl std::vector<bool,std::allocator<bool>>::size(int a1);
// int __userpurge std::vector<bool,std::allocator<bool>>::_M_copy_aligned@<eax>(int a1, int a2, int a3, int a4, unsigned __int32 *a5, int a6, int a7);
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::begin(std::_Bit_const_iterator *a1, std::_Bit_iterator *a2);
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::end(std::_Bit_const_iterator *a1, int a2);
void std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl();
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1);
void __cdecl std::_Deque_base<int,std::allocator<int>>::~_Deque_base(int a1);
// int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1, int a2);
void std::deque<int,std::allocator<int>>::_M_destroy_data();
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1, int a2);
int __cdecl std::deque<int,std::allocator<int>>::push_back(int a1, int a2);
bool __cdecl std::deque<int,std::allocator<int>>::empty(int a1);
int __cdecl std::deque<int,std::allocator<int>>::front(int a1);
int __cdecl std::deque<int,std::allocator<int>>::pop_front(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_erase_at_end(int a1, int a2);
void __cdecl std::vector<int,std::allocator<int>>::insert(int a1, char a2, unsigned int a3, int a4);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1);
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(int a1, char a2, unsigned int a3, int a4);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
void __gnu_cxx::new_allocator<bool>::new_allocator();
void __gnu_cxx::new_allocator<bool>::~new_allocator();
bool __cdecl __gnu_cxx::operator==<int const*,std::vector<int,std::allocator<int>>>(int a1, int a2);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
int __cdecl std::_Iter_base<unsigned long *,false>::_S_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<int>::~allocator();
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
void std::allocator<unsigned long>::allocator<bool>();
void std::allocator<unsigned long>::~allocator();
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1);
void __cdecl std::_Bvector_base<std::allocator<bool>>::_M_deallocate(int a1);
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_allocate(int a1, int a2);
unsigned int __cdecl std::_Bvector_base<std::allocator<bool>>::_S_nword(int a1);
char *__cdecl std::copy<unsigned long *,unsigned long *>(int a1, int a2, int a3);
// int __userpurge std::copy<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(int a1, unsigned int a2);
void **__cdecl std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3);
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(int a1, void *a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
unsigned int __cdecl std::deque<int,std::allocator<int>>::size(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1, int a2, unsigned int a3);
// int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2);
// int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl std::deque<int,std::allocator<int>>::_M_push_back_aux(int a1, int a2);
bool __cdecl std::operator==<int,int &,int *>(int a1, int a2);
int __cdecl std::_Deque_iterator<int,int &,int *>::operator*(int a1);
void __gnu_cxx::new_allocator<int>::destroy();
int __cdecl std::deque<int,std::allocator<int>>::_M_pop_front_aux(int a1);
void __cdecl std::vector<int,std::allocator<int>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void std::allocator<int>::allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void __gnu_cxx::new_allocator<unsigned long>::new_allocator();
void __gnu_cxx::new_allocator<unsigned long>::~new_allocator();
void std::allocator<unsigned long>::allocator();
void __cdecl __gnu_cxx::new_allocator<unsigned long>::deallocate(int a1, void *a2);
int __cdecl __gnu_cxx::new_allocator<unsigned long>::allocate(int a1, unsigned int a2);
int __cdecl std::__miter_base<unsigned long *>(int a1);
char *__cdecl std::__copy_move_a2<false,unsigned long *,unsigned long *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(int a1, unsigned int a2);
unsigned int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3);
int __cdecl std::_Deque_iterator<int,int &,int *>::_M_set_node(int a1, int a2);
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(int a1, void *a2);
// int __userpurge std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator@<eax>(int a1, int a2);
void std::allocator<int *>::~allocator();
void __cdecl __gnu_cxx::new_allocator<int *>::deallocate(int a1, void *a2);
unsigned int __cdecl std::operator-<int,int &,int *>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(int a1, int a2);
// int __userpurge std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(int a1);
char *__cdecl std::__uninitialized_move_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
int __cdecl std::fill<int *,int>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<int>::allocator();
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(int a1, int a2);
int __cdecl std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1);
int __cdecl std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<unsigned long>::new_allocator();
signed int __gnu_cxx::new_allocator<unsigned long>::max_size();
char *__cdecl std::__copy_move_a<false,unsigned long *,unsigned long *>(void *src, int a2, void *dest);
// int __userpurge std::_Iter_base<std::_Bit_const_iterator,false>::_S_base@<eax>(int a1, int a2, int a3);
// int __userpurge std::__niter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__niter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
int __cdecl __gnu_cxx::new_allocator<int *>::allocate(int a1, unsigned int a2);
unsigned int std::_Deque_iterator<int,int &,int *>::_S_buffer_size();
void std::allocator<int *>::allocator<int>();
void __gnu_cxx::new_allocator<int *>::~new_allocator();
// int __userpurge std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_reallocate_map(int a1, int a2, char a3);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_a<int *,int>(int a1, int a2, int a3);
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__miter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1);
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, int a2, void *dest);
// int __userpurge std::_Iter_base<std::_Bit_iterator,false>::_S_base@<eax>(int a1, int a2, int a3);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7);
signed int __gnu_cxx::new_allocator<int *>::max_size();
void __gnu_cxx::new_allocator<int *>::new_allocator();
// int __userpurge std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
char *__cdecl std::copy<int **,int **>(int a1, int a2, int a3);
int __cdecl std::copy_backward<int **,int **>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
int __cdecl std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1);
int __cdecl std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::__miter_base<int **>(int a1);
char *__cdecl std::__copy_move_a2<false,int **,int **>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward_a2<false,int **,int **>(int a1, int a2, int a3);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4);
// int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
// int __userpurge std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__niter_base<std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
int __cdecl std::_Iter_base<int **,false>::_S_base(int a1);
int __cdecl std::__niter_base<int **>(int a1);
char *__cdecl std::__copy_move_a<false,int **,int **>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward_a<false,int **,int **>(void *src, int, int); // idb
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
// int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base@<eax>(int a1, int a2);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(void *src, int, int); // idb
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
unsigned int __cdecl std::operator-<int,int const&,int const*>(int a1, int a2);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator*(int a1);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator++(int a1);
int __cdecl std::_Deque_iterator<int,int &,int *>::operator++(int a1);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
unsigned int std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size();
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_M_set_node(int a1, int a2);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_80528A0)() = &GLOBAL__sub_I_n; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char edata; // weak
_UNKNOWN unk_80529F7; // weak
int dtor_idx_3330; // weak
int n; // idb
int m; // weak
_UNKNOWN zip; // weak
_UNKNOWN G; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (0804869C) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048700: using guessed type int __gmon_start__(void);

//----- (08048800) --------------------------------------------------------
#error "8048803: positive sp value has been found (funcsize=2)"

//----- (08048830) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_80529F7 - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_80529F7 - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048830: could not find valid save-restore pair for ebp
// 80529F4: using guessed type char edata;

//----- (08048860) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048860: could not find valid save-restore pair for ebp

//----- (080488A0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 80528A8: using guessed type int _DTOR_LIST__[];
// 80529F4: using guessed type char edata;
// 80529F8: using guessed type int dtor_idx_3330;

//----- (080488F0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80488F0: could not find valid save-restore pair for ebp

//----- (08048920) --------------------------------------------------------
char __cdecl connected(int a1)
{
  char v1; // bl@5
  int v2; // eax@6
  int v3; // eax@7
  int v4; // eax@8
  int v5; // eax@8
  int v6; // eax@10
  char v8; // [sp+18h] [bp-A0h]@4
  char v9; // [sp+40h] [bp-78h]@6
  unsigned int i; // [sp+44h] [bp-74h]@1
  char v11; // [sp+48h] [bp-70h]@1
  char v12; // [sp+5Ch] [bp-5Ch]@2
  char v13; // [sp+64h] [bp-54h]@4
  char v14; // [sp+8Ch] [bp-2Ch]@4
  char v15; // [sp+94h] [bp-24h]@7
  char v16; // [sp+9Ch] [bp-1Ch]@8
  char v17; // [sp+A4h] [bp-14h]@10
  int v18; // [sp+A8h] [bp-10h]@6
  char v19; // [sp+AFh] [bp-9h]@1

  std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&v11, a1);
  v19 = 1;
  for ( i = 0; (signed int)i < n; ++i )
  {
    std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v12, (int)&v11, i);
    if ( !std::_Bit_reference::operator bool((int)&v12) )
    {
      if ( !v19 )
      {
        v1 = 0;
        goto LABEL_16;
      }
      v19 = 0;
      std::deque<int,std::allocator<int>>::deque((int)&v13);
      std::queue<int,std::deque<int,std::allocator<int>>>::queue((int)&v8, (int)&v13);
      std::deque<int,std::allocator<int>>::~deque((int)&v13);
      std::queue<int,std::deque<int,std::allocator<int>>>::push((int)&v8, (int)&i);
      std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v14, (int)&v11, i);
      std::_Bit_reference::operator=((int)&v14, 1);
      while ( !std::queue<int,std::deque<int,std::allocator<int>>>::empty((int)&v8) )
      {
        v18 = *(_DWORD *)std::queue<int,std::deque<int,std::allocator<int>>>::front((int)&v8);
        std::queue<int,std::deque<int,std::allocator<int>>>::pop((int)&v8);
        v2 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&G,
               v18);
        std::vector<int,std::allocator<int>>::begin((int)&v9, v2);
        while ( 1 )
        {
          v6 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                 (int)&G,
                 v18);
          std::vector<int,std::allocator<int>>::end((int)&v17, v6);
          if ( !__gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v9, (int)&v17) )
            break;
          v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
          std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v15, (int)&v11, *(_DWORD *)v3);
          if ( !std::_Bit_reference::operator bool((int)&v15) )
          {
            v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
            std::queue<int,std::deque<int,std::allocator<int>>>::push((int)&v8, v4);
            v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
            std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v16, (int)&v11, *(_DWORD *)v5);
            std::_Bit_reference::operator=((int)&v16, 1);
          }
          __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v9);
        }
      }
      std::queue<int,std::deque<int,std::allocator<int>>>::~queue((int)&v8);
    }
  }
  v1 = 1;
LABEL_16:
  std::vector<bool,std::allocator<bool>>::~vector((int)&v11);
  return v1;
}

//----- (08048BDC) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@3
  int v4; // eax@6
  int v5; // eax@6
  int v6; // ebx@10
  bool v7; // al@11
  int v8; // eax@17
  int v9; // eax@19
  int v10; // eax@19
  int v11; // eax@20
  int v12; // eax@21
  bool v13; // al@22
  int v14; // eax@26
  int v15; // ST18_4@26
  bool v16; // al@27
  int v17; // eax@30
  int v18; // eax@32
  int v19; // eax@32
  int v20; // eax@33
  signed int v21; // ebx@37
  int v22; // eax@39
  int v23; // ebx@40
  int v24; // eax@41
  char *v26; // [sp-Ch] [bp-118h]@0
  char v27; // [sp+8h] [bp-104h]@19
  int m; // [sp+Ch] [bp-100h]@18
  char v29; // [sp+10h] [bp-FCh]@18
  int v30; // [sp+24h] [bp-E8h]@18
  int v31; // [sp+28h] [bp-E4h]@26
  int v32; // [sp+2Ch] [bp-E0h]@6
  int v33; // [sp+30h] [bp-DCh]@6
  int v34; // [sp+34h] [bp-D8h]@17
  char v35; // [sp+48h] [bp-C4h]@17
  char v36; // [sp+5Ch] [bp-B0h]@17
  int v37; // [sp+68h] [bp-A4h]@8
  int v38; // [sp+6Ch] [bp-A0h]@1
  char v39; // [sp+70h] [bp-9Ch]@5
  _BYTE v40[12]; // [sp+7Ch] [bp-90h]@17
  _BYTE v41[12]; // [sp+80h] [bp-8Ch]@17
  int v42; // [sp+88h] [bp-84h]@18
  int v43; // [sp+8Ch] [bp-80h]@18
  char v44; // [sp+90h] [bp-7Ch]@20
  char v45; // [sp+98h] [bp-74h]@21
  char v46; // [sp+A0h] [bp-6Ch]@25
  int v47; // [sp+A8h] [bp-64h]@25
  int v48; // [sp+ACh] [bp-60h]@25
  int v49; // [sp+B0h] [bp-5Ch]@30
  int v50; // [sp+B4h] [bp-58h]@30
  char v51; // [sp+B8h] [bp-54h]@32
  char v52; // [sp+BCh] [bp-50h]@33
  char v53; // [sp+C4h] [bp-48h]@36
  int v54; // [sp+CCh] [bp-40h]@36
  int v55; // [sp+D0h] [bp-3Ch]@36
  char v56; // [sp+D4h] [bp-38h]@39
  char v57; // [sp+DCh] [bp-30h]@41
  int l; // [sp+E4h] [bp-28h]@8
  int k; // [sp+E8h] [bp-24h]@5
  int j; // [sp+ECh] [bp-20h]@2
  int i; // [sp+F0h] [bp-1Ch]@1
  int *v62; // [sp+100h] [bp-Ch]@1

  v62 = &argc;
  scanf("%d", &v38);
  for ( i = 1; i <= v38; ++i )
  {
    scanf("%d%d", &n, &::m, v26);
    std::vector<int,std::allocator<int>>::clear((int)&zip);
    std::vector<int,std::allocator<int>>::resize((int)&zip, n, 0);
    for ( j = 0; j < n; ++j )
    {
      v3 = std::vector<int,std::allocator<int>>::operator[]((int)&zip, j);
      scanf("%d", v3);
    }
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear((int)&G);
    std::vector<int,std::allocator<int>>::vector((int)&v39);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(
      (int)&G,
      n,
      (int)&v39);
    std::vector<int,std::allocator<int>>::~vector((int)&v39);
    for ( k = 0; k < ::m; ++k )
    {
      scanf("%d%d", &v33, &v32);
      --v33;
      --v32;
      v4 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&G,
             v33);
      std::vector<int,std::allocator<int>>::push_back(v4, (int)&v32);
      v5 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
             (int)&G,
             v32);
      std::vector<int,std::allocator<int>>::push_back(v5, (int)&v33);
    }
    printf("Case #%d: ", i);
    v37 = -1;
    for ( l = 0; l < n; ++l )
    {
      v7 = 1;
      if ( v37 != -1 )
      {
        v6 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&zip, l);
        if ( v6 >= *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&zip, v37) )
          v7 = 0;
      }
      if ( v7 )
        v37 = l;
    }
    std::vector<int,std::allocator<int>>::vector((int)&v36);
    std::allocator<bool>::allocator();
    v40[1] = 0;
    std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&v35, n, (int)&v40[1]);
    std::allocator<bool>::~allocator();
    std::allocator<bool>::allocator();
    v40[3] = 0;
    v26 = &v40[2];
    std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&v34, n, (int)&v40[3]);
    std::allocator<bool>::~allocator();
    std::vector<int,std::allocator<int>>::push_back((int)&v36, (int)&v37);
    v8 = std::vector<int,std::allocator<int>>::operator[]((int)&zip, v37);
    printf("%d", *(_DWORD *)v8);
    std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)v41, (int)&v35, v37);
    std::_Bit_reference::operator=((int)v41, 1);
    do
    {
      if ( std::vector<int,std::allocator<int>>::empty((int)&v36) )
        break;
      v42 = -1;
      v43 = -1;
      std::pair<int,int>::pair((int)&v30, (int)&v43, (int)&v42);
      std::vector<bool,std::allocator<bool>>::vector((std::_Bit_iterator *)&v29, (int)&v34);
      for ( m = std::vector<int,std::allocator<int>>::size((int)&v36) - 1; ; --m )
      {
        if ( m >= 0 )
        {
          v9 = std::vector<int,std::allocator<int>>::operator[]((int)&v36, m);
          v10 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                  (int)&G,
                  *(_DWORD *)v9);
          std::vector<int,std::allocator<int>>::begin((int)&v27, v10);
          while ( 1 )
          {
            v18 = std::vector<int,std::allocator<int>>::operator[]((int)&v36, m);
            v19 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                    (int)&G,
                    *(_DWORD *)v18);
            std::vector<int,std::allocator<int>>::end((int)&v51, v19);
            if ( !__gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v27, (int)&v51) )
              break;
            v11 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v27);
            std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v44, (int)&v35, *(_DWORD *)v11);
            v13 = 0;
            if ( !std::_Bit_reference::operator bool((int)&v44) )
            {
              v12 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v27);
              std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v45, (int)&v34, *(_DWORD *)v12);
              if ( !std::_Bit_reference::operator bool((int)&v45) )
                v13 = 1;
            }
            if ( v13 )
            {
              v47 = -1;
              v48 = -1;
              std::pair<int,int>::pair((int)&v46, (int)&v48, (int)&v47);
              v16 = 1;
              if ( !std::operator==<int,int>((int)&v30, (int)&v46) )
              {
                v14 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v27);
                v15 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&zip, *(_DWORD *)v14);
                if ( v15 >= *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&zip, v31) )
                  v16 = 0;
              }
              if ( v16 )
              {
                v17 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v27);
                std::pair<int,int>::pair((int)&v49, (int)&m, v17);
                v30 = v49;
                v31 = v50;
              }
            }
            __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v27);
          }
          v20 = std::vector<int,std::allocator<int>>::operator[]((int)&v36, m);
          std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v52, (int)&v29, *(_DWORD *)v20);
          std::_Bit_reference::operator=((int)&v52, 1);
          if ( !((unsigned __int8)connected((int)&v29) ^ 1) )
            continue;
        }
        break;
      }
      v54 = -1;
      v55 = -1;
      std::pair<int,int>::pair((int)&v53, (int)&v55, (int)&v54);
      if ( std::operator==<int,int>((int)&v30, (int)&v53) )
      {
        v21 = 0;
      }
      else
      {
        while ( 1 )
        {
          v23 = v30;
          if ( v23 == std::vector<int,std::allocator<int>>::size((int)&v36) - 1 )
            break;
          v22 = std::vector<int,std::allocator<int>>::back((int)&v36);
          std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v56, (int)&v34, *(_DWORD *)v22);
          std::_Bit_reference::operator=((int)&v56, 1);
          std::vector<int,std::allocator<int>>::pop_back((int)&v36);
        }
        std::vector<int,std::allocator<int>>::push_back((int)&v36, (int)&v31);
        v24 = std::vector<int,std::allocator<int>>::operator[]((int)&zip, v31);
        printf("%d", *(_DWORD *)v24);
        std::vector<bool,std::allocator<bool>>::operator[]((std::_Bit_reference *)&v57, (int)&v35, v31);
        std::_Bit_reference::operator=((int)&v57, 1);
        v21 = 1;
      }
      std::vector<bool,std::allocator<bool>>::~vector((int)&v29);
    }
    while ( v21 == 1 );
    putchar(10);
    std::vector<bool,std::allocator<bool>>::~vector((int)&v34);
    std::vector<bool,std::allocator<bool>>::~vector((int)&v35);
    std::vector<int,std::allocator<int>>::~vector((int)&v36);
  }
  return 0;
}
// 8052A00: using guessed type int m;

//----- (08049499) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    std::vector<int,std::allocator<int>>::vector((int)&zip);
    __cxa_atexit((const char *)std::vector<int,std::allocator<int>>::~vector, &zip, &_dso_handle);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector((int)&G);
    result = __cxa_atexit(
               (const char *)std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector,
               &G,
               &_dso_handle);
  }
  return result;
}
// 80486F0: using guessed type int __cxa_atexit(const char *, ...);

//----- (0804952C) --------------------------------------------------------
int GLOBAL__sub_I_n()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049548) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08049550) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08049556) --------------------------------------------------------
std::_Bit_reference *__cdecl std::_Bit_reference::_Bit_reference(std::_Bit_reference *this, unsigned __int32 *a2, unsigned __int32 a3)
{
  std::_Bit_reference *result; // eax@1

  *(_DWORD *)this = a2;
  result = this;
  *((_DWORD *)this + 1) = a3;
  return result;
}

//----- (0804956C) --------------------------------------------------------
bool __cdecl std::_Bit_reference::operator bool(int a1)
{
  return (**(_DWORD **)a1 & *(_DWORD *)(a1 + 4)) != 0;
}

//----- (08049586) --------------------------------------------------------
int __cdecl std::_Bit_reference::operator=(int a1, char a2)
{
  if ( a2 )
    **(_DWORD **)a1 |= *(_DWORD *)(a1 + 4);
  else
    **(_DWORD **)a1 &= ~*(_DWORD *)(a1 + 4);
  return a1;
}

//----- (080495CE) --------------------------------------------------------
void std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator()
{
  ;
}

//----- (080495D4) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_iterator_base *this, unsigned __int32 *a2, unsigned int a3)
{
  std::_Bit_iterator_base *result; // eax@1

  std::iterator<std::random_access_iterator_tag,bool,int,bool *,bool &>::iterator();
  *(_DWORD *)this = a2;
  result = this;
  *((_DWORD *)this + 1) = a3;
  return result;
}

//----- (080495F8) --------------------------------------------------------
bool __cdecl std::_Bit_iterator_base::_M_bump_up(std::_Bit_iterator_base *this)
{
  int v1; // eax@1
  bool result; // al@1

  v1 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = v1 + 1;
  result = v1 == 31;
  if ( result )
  {
    *((_DWORD *)this + 1) = 0;
    result = (char)this;
    *(_DWORD *)this += 4;
  }
  return result;
}

//----- (0804962E) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator_base::_M_incr(std::_Bit_iterator_base *this, int a2)
{
  signed int v2; // ST0C_4@1
  std::_Bit_iterator_base *result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v2 = *((_DWORD *)this + 1) + a2;
  *(_DWORD *)this += 4 * (v2 / 32);
  v4 = ((((unsigned int)(v2 >> 31) >> 27) + (_BYTE)v2) & 0x1F) - ((unsigned int)(v2 >> 31) >> 27);
  if ( v4 < 0 )
  {
    v4 += 32;
    *(_DWORD *)this -= 4;
  }
  result = this;
  *((_DWORD *)this + 1) = v4;
  return result;
}

//----- (08049698) --------------------------------------------------------
int __cdecl std::operator-(int a1, int a2)
{
  return *(_DWORD *)(a1 + 4) + 32 * ((*(_DWORD *)a1 - *(_DWORD *)a2) >> 2) - *(_DWORD *)(a2 + 4);
}

//----- (080496C8) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, 0, 0);
}

//----- (080496EC) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::_Bit_iterator(std::_Bit_iterator *this, unsigned __int32 *a2, unsigned int a3)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, a2, a3);
}

//----- (0804970E) --------------------------------------------------------
std::_Bit_reference *__stdcall std::_Bit_iterator::operator*(std::_Bit_reference *a1, int a2)
{
  std::_Bit_reference::_Bit_reference(a1, *(unsigned __int32 **)a2, 1 << *(_DWORD *)(a2 + 4));
  return a1;
}

//----- (08049742) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator++(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_up(a1);
  return a1;
}

//----- (08049758) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_iterator::operator+=(std::_Bit_iterator_base *a1, int a2)
{
  std::_Bit_iterator_base::_M_incr(a1, a2);
  return a1;
}

//----- (08049776) --------------------------------------------------------
int __userpurge std::_Bit_iterator::operator+@<eax>(int a1, int a2, int a3)
{
  int v3; // edx@1
  std::_Bit_iterator_base *v4; // eax@1
  int v5; // edx@1
  int v7; // [sp+18h] [bp-10h]@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  v7 = *(_DWORD *)a2;
  v8 = v3;
  v4 = std::_Bit_iterator::operator+=((std::_Bit_iterator_base *)&v7, a3);
  v5 = *((_DWORD *)v4 + 1);
  *(_DWORD *)a1 = *(_DWORD *)v4;
  *(_DWORD *)(a1 + 4) = v5;
  return a1;
}

//----- (080497B0) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, unsigned __int32 *a2, unsigned int a3)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, a2, a3);
}

//----- (080497D2) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_const_iterator *this, const std::_Bit_iterator *a2)
{
  return std::_Bit_iterator_base::_Bit_iterator_base(this, *(unsigned __int32 **)a2, *((_DWORD *)a2 + 1));
}

//----- (080497F8) --------------------------------------------------------
bool __cdecl std::_Bit_const_iterator::operator*(int a1)
{
  char v2; // [sp+18h] [bp-10h]@1

  std::_Bit_reference::_Bit_reference((std::_Bit_reference *)&v2, *(unsigned __int32 **)a1, 1 << *(_DWORD *)(a1 + 4));
  return std::_Bit_reference::operator bool((int)&v2);
}

//----- (08049832) --------------------------------------------------------
std::_Bit_iterator_base *__cdecl std::_Bit_const_iterator::operator++(std::_Bit_iterator_base *a1)
{
  std::_Bit_iterator_base::_M_bump_up(a1);
  return a1;
}

//----- (08049848) --------------------------------------------------------
unsigned int __cdecl std::__deque_buf_size(unsigned int a1)
{
  unsigned int result; // eax@2

  if ( a1 > 0x1FF )
    result = 1;
  else
    result = 0x200 / a1;
  return result;
}

//----- (0804986A) --------------------------------------------------------
void __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::~queue(int a1)
{
  std::deque<int,std::allocator<int>>::~deque(a1);
}

//----- (0804987D) --------------------------------------------------------
int __cdecl std::fill<unsigned long *,int>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<unsigned long *>(a2);
  v4 = std::__niter_base<unsigned long *>(a1);
  return std::__fill_a<unsigned long *,int>(v4, v3, a3);
}

//----- (080498B6) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (080498CA) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(a1);
}

//----- (080498DE) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1, int a2)
{
  int v2; // eax@1
  int v3; // ST1C_4@1
  int v5; // [sp+27h] [bp-21h]@1
  unsigned __int32 *v6; // [sp+30h] [bp-18h]@1
  int v7; // [sp+34h] [bp-14h]@1
  int v8; // [sp+38h] [bp-10h]@1
  int v9; // [sp+3Ch] [bp-Ch]@1

  std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(a2);
  std::allocator<bool>::allocator<unsigned long>();
  std::_Bvector_base<std::allocator<bool>>::_Bvector_base(a1);
  std::allocator<bool>::~allocator();
  v2 = std::vector<bool,std::allocator<bool>>::size(a2);
  std::vector<bool,std::allocator<bool>>::_M_initialize((int)a1, v2);
  std::vector<bool,std::allocator<bool>>::end((std::_Bit_const_iterator *)&v6, a2);
  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v8, (std::_Bit_iterator *)a2);
  v3 = *((_DWORD *)a1 + 1);
  return std::vector<bool,std::allocator<bool>>::_M_copy_aligned(
           (int)((char *)&v5 + 1),
           (int)a1,
           v8,
           v9,
           v6,
           v7,
           *(_DWORD *)a1);
}

//----- (080499D6) --------------------------------------------------------
void __cdecl std::vector<bool,std::allocator<bool>>::~vector(int a1)
{
  std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(a1);
}

//----- (080499EA) --------------------------------------------------------
std::_Bit_reference *__stdcall std::vector<bool,std::allocator<bool>>::operator[](std::_Bit_reference *a1, int a2, unsigned int a3)
{
  char v4; // [sp+18h] [bp-10h]@1

  std::_Bit_iterator::_Bit_iterator(
    (std::_Bit_iterator *)&v4,
    (unsigned __int32 *)(4 * (a3 >> 5) + *(_DWORD *)a2),
    a3 & 0x1F);
  std::_Bit_iterator::operator*(a1, (int)&v4);
  return a1;
}

//----- (08049A38) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1)
{
  return std::_Deque_base<int,std::allocator<int>>::_Deque_base(a1);
}

//----- (08049A4C) --------------------------------------------------------
void __cdecl std::deque<int,std::allocator<int>>::~deque(int a1)
{
  char v1; // [sp+10h] [bp-28h]@1
  char v2; // [sp+20h] [bp-18h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::deque<int,std::allocator<int>>::end((int)&v1, a1);
  std::deque<int,std::allocator<int>>::begin((int)&v2, a1);
  std::deque<int,std::allocator<int>>::_M_destroy_data();
  std::_Deque_base<int,std::allocator<int>>::~_Deque_base(a1);
}

//----- (08049AD6) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::queue(int a1, int a2)
{
  return std::deque<int,std::allocator<int>>::deque(a1, a2);
}

//----- (08049AF0) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::push(int a1, int a2)
{
  return std::deque<int,std::allocator<int>>::push_back(a1, a2);
}

//----- (08049B0A) --------------------------------------------------------
bool __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::empty(int a1)
{
  return std::deque<int,std::allocator<int>>::empty(a1);
}

//----- (08049B1E) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::front(int a1)
{
  return std::deque<int,std::allocator<int>>::front(a1);
}

//----- (08049B32) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::pop(int a1)
{
  return std::deque<int,std::allocator<int>>::pop_front(a1);
}

//----- (08049B46) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (08049B5E) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (08049B7E) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049BA0) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (08049BCC) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (08049BE2) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (08049BEC) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::clear(int a1)
{
  return std::vector<int,std::allocator<int>>::_M_erase_at_end(a1, *(_DWORD *)a1);
}

//----- (08049C08) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::resize(int a1, unsigned int a2, char a3)
{
  unsigned int v3; // ebx@2
  int v4; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<int,std::allocator<int>>::size(a1) < a2 )
  {
    v3 = a2 - std::vector<int,std::allocator<int>>::size(a1);
    std::vector<int,std::allocator<int>>::end((int)&v4, a1);
    std::vector<int,std::allocator<int>>::insert(a1, v4, v3, (int)&a3);
  }
  else if ( std::vector<int,std::allocator<int>>::size(a1) > a2 )
  {
    std::vector<int,std::allocator<int>>::_M_erase_at_end(a1, 4 * a2 + *(_DWORD *)a1);
  }
}

//----- (08049CA0) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049CB2) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::clear(int a1)
{
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
           a1,
           *(_DWORD *)a1);
}

//----- (08049CCE) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08049D26) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (08049DDE) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::resize(int a1, unsigned int a2, int a3)
{
  unsigned int v3; // ebx@2
  int v4; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) < a2 )
  {
    v3 = a2
       - std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
      (int)&v4,
      a1);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(
      a1,
      v4,
      v3,
      a3);
  }
  else if ( std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1) > a2 )
  {
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(
      a1,
      *(_DWORD *)a1 + 12 * a2);
  }
}

//----- (08049E7C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (08049EF0) --------------------------------------------------------
void std::allocator<bool>::allocator()
{
  __gnu_cxx::new_allocator<bool>::new_allocator();
}

//----- (08049F04) --------------------------------------------------------
void std::allocator<bool>::~allocator()
{
  __gnu_cxx::new_allocator<bool>::~new_allocator();
}

//----- (08049F18) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::vector(std::_Bit_iterator *a1, int a2, int a3)
{
  signed int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@4

  std::_Bvector_base<std::allocator<bool>>::_Bvector_base(a1);
  std::vector<bool,std::allocator<bool>>::_M_initialize((int)a1, a2);
  if ( *(_BYTE *)a3 )
    v3 = -1;
  else
    v3 = 0;
  v5 = v3;
  return std::fill<unsigned long *,int>(*(_DWORD *)a1, *((_DWORD *)a1 + 4), (int)&v5);
}

//----- (08049F9C) --------------------------------------------------------
bool __cdecl std::vector<int,std::allocator<int>>::empty(int a1)
{
  char v2; // [sp+18h] [bp-10h]@1
  char v3; // [sp+1Ch] [bp-Ch]@1

  std::vector<int,std::allocator<int>>::end((int)&v2, a1);
  std::vector<int,std::allocator<int>>::begin((int)&v3, a1);
  return __gnu_cxx::operator==<int const*,std::vector<int,std::allocator<int>>>((int)&v3, (int)&v2);
}

//----- (08049FEC) --------------------------------------------------------
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804A006) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804A01F) --------------------------------------------------------
bool __cdecl std::operator==<int,int>(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
}

//----- (0804A048) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::back(int a1)
{
  char v2; // [sp+14h] [bp-14h]@1
  int v3; // [sp+18h] [bp-10h]@1
  char v4; // [sp+1Ch] [bp-Ch]@1

  v3 = 1;
  std::vector<int,std::allocator<int>>::end((int)&v4, a1);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-((int)&v2, (int)&v4, (int)&v3);
  return __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v2);
}

//----- (0804A094) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::pop_back(int a1)
{
  int v1; // ST04_4@1

  *(_DWORD *)(a1 + 4) -= 4;
  v1 = *(_DWORD *)(a1 + 4);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
}

//----- (0804A0C0) --------------------------------------------------------
int __cdecl std::__niter_base<unsigned long *>(int a1)
{
  return std::_Iter_base<unsigned long *,false>::_S_base(a1);
}

//----- (0804A0D3) --------------------------------------------------------
int __cdecl std::__fill_a<unsigned long *,int>(int a1, int a2, int a3)
{
  int result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    *(_DWORD *)a1 = v4;
    a1 += 4;
  }
  return result;
}

//----- (0804A0FA) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804A10E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A122) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A182) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (0804A196) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A1AA) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A22C) --------------------------------------------------------
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_get_Bit_allocator(int a1)
{
  return a1;
}

//----- (0804A234) --------------------------------------------------------
void std::allocator<bool>::allocator<unsigned long>()
{
  __gnu_cxx::new_allocator<bool>::new_allocator();
}

//----- (0804A248) --------------------------------------------------------
void std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl()
{
  std::allocator<unsigned long>::~allocator();
}

//----- (0804A25C) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_base(std::_Bit_iterator *a1)
{
  std::allocator<unsigned long>::allocator<bool>();
  std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(a1);
  std::allocator<unsigned long>::~allocator();
}

//----- (0804A294) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(int a1)
{
  std::_Bvector_base<std::allocator<bool>>::_M_deallocate(a1);
  std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::~_Bvector_impl();
}

//----- (0804A2D0) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::_M_initialize(int a1, int a2)
{
  int v2; // edx@1
  int result; // eax@1
  int v4; // edx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+24h] [bp-14h]@1
  int v8; // [sp+28h] [bp-10h]@1
  unsigned __int32 *v9; // [sp+2Ch] [bp-Ch]@1

  v9 = (unsigned __int32 *)std::_Bvector_base<std::allocator<bool>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 16) = &v9[std::_Bvector_base<std::allocator<bool>>::_S_nword(a2)];
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v7, v9, 0);
  v2 = v8;
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v2;
  std::_Bit_iterator::operator+((int)&v5, a1, a2);
  result = v5;
  v4 = v6;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v4;
  return result;
}

//----- (0804A362) --------------------------------------------------------
int __cdecl std::vector<bool,std::allocator<bool>>::size(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1
  char v3; // [sp+18h] [bp-10h]@1

  std::vector<bool,std::allocator<bool>>::begin((std::_Bit_const_iterator *)&v2, (std::_Bit_iterator *)a1);
  std::vector<bool,std::allocator<bool>>::end((std::_Bit_const_iterator *)&v3, a1);
  return std::operator-((int)&v3, (int)&v2);
}

//----- (0804A3A6) --------------------------------------------------------
int __userpurge std::vector<bool,std::allocator<bool>>::_M_copy_aligned@<eax>(int a1, int a2, int a3, int a4, unsigned __int32 *a5, int a6, int a7)
{
  int v8; // [sp+2Ch] [bp-1Ch]@1
  int v9; // [sp+30h] [bp-18h]@1
  int v10; // [sp+34h] [bp-14h]@1
  int v11; // [sp+38h] [bp-10h]@1
  unsigned __int32 *v12; // [sp+3Ch] [bp-Ch]@1

  v12 = (unsigned __int32 *)std::copy<unsigned long *,unsigned long *>(a3, (int)a5, a7);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)&v8, v12, 0);
  std::_Bit_const_iterator::_Bit_const_iterator((std::_Bit_const_iterator *)&v10, a5, 0);
  std::copy<std::_Bit_const_iterator,std::_Bit_iterator>(a1, v10, v11, (int)a5, a6, v8, v9);
  return a1;
}

//----- (0804A446) --------------------------------------------------------
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::begin(std::_Bit_const_iterator *a1, std::_Bit_iterator *a2)
{
  std::_Bit_const_iterator::_Bit_const_iterator(a1, a2);
  return a1;
}

//----- (0804A466) --------------------------------------------------------
std::_Bit_const_iterator *__stdcall std::vector<bool,std::allocator<bool>>::end(std::_Bit_const_iterator *a1, int a2)
{
  std::_Bit_const_iterator::_Bit_const_iterator(a1, (const std::_Bit_iterator *)(a2 + 8));
  return a1;
}

//----- (0804A488) --------------------------------------------------------
void std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804A49C) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1)
{
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(a1, 0);
}

//----- (0804A4E0) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::~_Deque_base(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(a1, *(void ***)(a1 + 20), *(_DWORD *)(a1 + 36) + 4);
    v1 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(a1, *(void **)a1);
  }
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl();
}

//----- (0804A55A) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (0804A57C) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (0804A59E) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A5A6) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (0804A5DA) --------------------------------------------------------
void std::deque<int,std::allocator<int>>::_M_destroy_data()
{
  ;
}

//----- (0804A5E2) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1, int a2)
{
  unsigned int v2; // ebx@1
  int v3; // eax@1
  char v5; // [sp+30h] [bp-48h]@1
  char v6; // [sp+40h] [bp-38h]@1
  int v7; // [sp+50h] [bp-28h]@1
  int v8; // [sp+54h] [bp-24h]@1
  int v9; // [sp+58h] [bp-20h]@1
  int v10; // [sp+5Ch] [bp-1Ch]@1
  int v11; // [sp+60h] [bp-18h]@1
  int v12; // [sp+64h] [bp-14h]@1
  int v13; // [sp+68h] [bp-10h]@1
  int v14; // [sp+6Ch] [bp-Ch]@1

  v2 = std::deque<int,std::allocator<int>>::size(a2);
  v3 = std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  std::_Deque_base<int,std::allocator<int>>::_Deque_base(a1, v3, v2);
  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v6, a1 + 8);
  std::deque<int,std::allocator<int>>::end((int)&v7, a2);
  std::deque<int,std::allocator<int>>::begin((int)&v11, a2);
  return std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>(
           (int)&v5,
           v11,
           v12,
           v13,
           v14,
           v7,
           v8,
           v9,
           v10,
           (int)&v6);
}

//----- (0804A6D0) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 32) - 4 )
  {
    result = std::deque<int,std::allocator<int>>::_M_push_back_aux(a1, a2);
  }
  else
  {
    __gnu_cxx::new_allocator<int>::construct(a1, *(void **)(a1 + 24), a2);
    result = a1;
    *(_DWORD *)(a1 + 24) += 4;
  }
  return result;
}

//----- (0804A72A) --------------------------------------------------------
bool __cdecl std::deque<int,std::allocator<int>>::empty(int a1)
{
  return std::operator==<int,int &,int *>(a1 + 24, a1 + 8);
}

//----- (0804A74A) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::front(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1

  std::deque<int,std::allocator<int>>::begin((int)&v2, a1);
  return std::_Deque_iterator<int,int &,int *>::operator*((int)&v2);
}

//----- (0804A772) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::pop_front(int a1)
{
  int v1; // ST04_4@2
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 8) == *(_DWORD *)(a1 + 16) - 4 )
  {
    result = std::deque<int,std::allocator<int>>::_M_pop_front_aux(a1);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 8);
    __gnu_cxx::new_allocator<int>::destroy();
    result = a1;
    *(_DWORD *)(a1 + 8) += 4;
  }
  return result;
}

//----- (0804A7BE) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A7CE) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804A7D6) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_erase_at_end(int a1, int a2)
{
  int v2; // ST04_4@1
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v2 = *(_DWORD *)(a1 + 4);
  std::_Destroy<int *,int>();
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (0804A80C) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::insert(int a1, char a2, unsigned int a3, int a4)
{
  std::vector<int,std::allocator<int>>::_M_fill_insert(a1, a2, a3, a4);
}

//----- (0804A834) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_erase_at_end(int a1, int a2)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(a2, *(_DWORD *)(a1 + 4));
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (0804A86A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A872) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (0804A88C) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804A894) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A89C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (0804A8E6) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804A90E) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804A936) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804A958) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (0804A994) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804A9B6) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::insert(int a1, char a2, unsigned int a3, int a4)
{
  std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(
    a1,
    a2,
    a3,
    a4);
}

//----- (0804A9DE) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (0804AA00) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (0804AC9E) --------------------------------------------------------
void __gnu_cxx::new_allocator<bool>::new_allocator()
{
  ;
}

//----- (0804ACA4) --------------------------------------------------------
void __gnu_cxx::new_allocator<bool>::~new_allocator()
{
  ;
}

//----- (0804ACA9) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<int const*,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804ACD6) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804AD09) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (0804AD23) --------------------------------------------------------
int __cdecl std::_Iter_base<unsigned long *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AD2C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804AD5C) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (0804AD70) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804AD98) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804ADC8) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (0804ADDC) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (0804AE04) --------------------------------------------------------
void std::allocator<unsigned long>::allocator<bool>()
{
  __gnu_cxx::new_allocator<unsigned long>::new_allocator();
}

//----- (0804AE18) --------------------------------------------------------
void std::allocator<unsigned long>::~allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::~new_allocator();
}

//----- (0804AE2C) --------------------------------------------------------
std::_Bit_iterator *__cdecl std::_Bvector_base<std::allocator<bool>>::_Bvector_impl::_Bvector_impl(std::_Bit_iterator *a1)
{
  std::_Bit_iterator *result; // eax@1

  std::allocator<unsigned long>::allocator();
  std::_Bit_iterator::_Bit_iterator(a1);
  std::_Bit_iterator::_Bit_iterator((std::_Bit_iterator *)((char *)a1 + 8));
  result = a1;
  *((_DWORD *)a1 + 4) = 0;
  return result;
}

//----- (0804AE6A) --------------------------------------------------------
void __cdecl std::_Bvector_base<std::allocator<bool>>::_M_deallocate(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    v1 = (*(_DWORD *)(a1 + 16) - *(_DWORD *)a1) >> 2;
    __gnu_cxx::new_allocator<unsigned long>::deallocate(a1, *(void **)a1);
  }
}

//----- (0804AEAA) --------------------------------------------------------
int __cdecl std::_Bvector_base<std::allocator<bool>>::_M_allocate(int a1, int a2)
{
  unsigned int v2; // eax@1

  v2 = std::_Bvector_base<std::allocator<bool>>::_S_nword(a2);
  return __gnu_cxx::new_allocator<unsigned long>::allocate(a1, v2);
}

//----- (0804AED4) --------------------------------------------------------
unsigned int __cdecl std::_Bvector_base<std::allocator<bool>>::_S_nword(int a1)
{
  return (unsigned int)(a1 + 31) >> 5;
}

//----- (0804AEE2) --------------------------------------------------------
char *__cdecl std::copy<unsigned long *,unsigned long *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<unsigned long *>(a2);
  v4 = std::__miter_base<unsigned long *>(a1);
  return std::__copy_move_a2<false,unsigned long *,unsigned long *>(v4, v3, a3);
}

//----- (0804AF1A) --------------------------------------------------------
int __userpurge std::copy<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+20h] [bp-18h]@1
  int v9; // [sp+24h] [bp-14h]@1
  int v10; // [sp+28h] [bp-10h]@1
  int v11; // [sp+2Ch] [bp-Ch]@1

  std::__miter_base<std::_Bit_const_iterator>((int)&v8, a4, a5);
  std::__miter_base<std::_Bit_const_iterator>((int)&v10, a2, a3);
  std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>(a1, v10, v11, v8, v9, a6, a7);
  return a1;
}

//----- (0804AF98) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 24);
}

//----- (0804AFDA) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(int a1, unsigned int a2)
{
  unsigned int v2; // eax@1
  int v3; // ebx@1
  unsigned int v4; // edx@1
  int result; // eax@1
  unsigned int v6; // [sp+1Ch] [bp-2Ch]@1
  int v7; // [sp+20h] [bp-28h]@1
  unsigned int v8; // [sp+24h] [bp-24h]@1
  unsigned int v9; // [sp+28h] [bp-20h]@1
  unsigned int v10; // [sp+2Ch] [bp-1Ch]@1

  v2 = std::__deque_buf_size(4u);
  v10 = a2 / v2 + 1;
  v6 = a2 / v2 + 3;
  v7 = 8;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)std::max<unsigned int>((int)&v7, (int)&v6);
  *(_DWORD *)a1 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(a1, *(_DWORD *)(a1 + 4));
  v9 = *(_DWORD *)a1 + 4 * ((*(_DWORD *)(a1 + 4) - v10) >> 1);
  v8 = 4 * v10 + v9;
  std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(a1, v9, v8);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, v9);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, v8 - 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 28);
  v4 = v3 + 4 * (a2 % std::__deque_buf_size(4u));
  result = a1;
  *(_DWORD *)(a1 + 24) = v4;
  return result;
}

//----- (0804B146) --------------------------------------------------------
void **__cdecl std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3)
{
  void **result; // eax@3
  void **i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; ++i )
  {
    result = i;
    if ( (unsigned int)i >= a3 )
      break;
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(a1, *i);
  }
  return result;
}

//----- (0804B176) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(int a1, void *a2)
{
  int v2; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator((int)&v2, a1);
  __gnu_cxx::new_allocator<int *>::deallocate((int)&v2, a2);
  std::allocator<int *>::~allocator();
}

//----- (0804B1B8) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804B1C0) --------------------------------------------------------
unsigned int __cdecl std::deque<int,std::allocator<int>>::size(int a1)
{
  return std::operator-<int,int &,int *>(a1 + 24, a1 + 8);
}

//----- (0804B1E0) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1, int a2, unsigned int a3)
{
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(a1, a3);
}

//----- (0804B22A) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (0804B24C) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (0804B26E) --------------------------------------------------------
int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804B2E4) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804B30A) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_push_back_aux(int a1, int a2)
{
  int v2; // ebx@1
  int result; // eax@1

  std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(a1, 1);
  v2 = *(_DWORD *)(a1 + 36) + 4;
  *(_DWORD *)v2 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(a1);
  __gnu_cxx::new_allocator<int>::construct(a1, *(void **)(a1 + 24), a2);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, *(_DWORD *)(a1 + 36) + 4);
  result = a1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
  return result;
}

//----- (0804B3BD) --------------------------------------------------------
bool __cdecl std::operator==<int,int &,int *>(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (0804B3D2) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804B3DC) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804B3E2) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_pop_front_aux(int a1)
{
  int v1; // ST04_4@1
  int result; // eax@1

  v1 = *(_DWORD *)(a1 + 8);
  __gnu_cxx::new_allocator<int>::destroy();
  std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(a1, *(void **)(a1 + 12));
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, *(_DWORD *)(a1 + 20) + 4);
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return result;
}

//----- (0804B43C) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@6
  char *v13; // eax@6
  int v14; // esi@6
  int v15; // eax@6
  int v16; // ST04_4@6
  int v17; // ST00_4@6
  int v18; // ST08_4@6
  int v19; // [sp+1Ch] [bp-2Ch]@3
  char v20; // [sp+20h] [bp-28h]@3
  char v21; // [sp+24h] [bp-24h]@6
  void *v22; // [sp+28h] [bp-20h]@6
  int v23; // [sp+2Ch] [bp-1Ch]@6
  int v24; // [sp+30h] [bp-18h]@6
  int v25; // [sp+34h] [bp-14h]@3
  int v26; // [sp+38h] [bp-10h]@3
  void *v27; // [sp+3Ch] [bp-Ch]@6

  if ( a3 )
  {
    if ( (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2 < a3 )
    {
      v24 = std::vector<int,std::allocator<int>>::_M_check_len(a1, a3, "vector::_M_fill_insert");
      std::vector<int,std::allocator<int>>::begin((int)&v21, a1);
      v23 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v21);
      v22 = (void *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v24);
      v27 = v22;
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<int *,unsigned int,int,int>((int)((char *)v22 + 4 * v23), a3, a4);
      v27 = 0;
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
              *(_DWORD *)a1,
              *(_DWORD *)v12,
              (int)v22);
      v27 = &v13[4 * a3];
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
      v27 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v15, v14, (int)v27);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v16 = *(_DWORD *)(a1 + 4);
      v17 = *(_DWORD *)a1;
      std::_Destroy<int *,int>();
      v18 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v22;
      *(_DWORD *)(a1 + 4) = v27;
      *(_DWORD *)(a1 + 8) = (char *)v22 + 4 * v24;
    }
    else
    {
      v19 = *(_DWORD *)a4;
      std::vector<int,std::allocator<int>>::end((int)&v20, a1);
      v26 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&v20, (int)&a2);
      v25 = *(_DWORD *)(a1 + 4);
      if ( v26 <= a3 )
      {
        std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)(a1 + 4), a3 - v26, (int)&v19);
        *(_DWORD *)(a1 + 4) += 4 * (a3 - v26);
        std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::__uninitialized_move_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v25, v9);
        *(_DWORD *)(a1 + 4) += 4 * v26;
        v11 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::fill<int *,int>(*(_DWORD *)v11, v25, (int)&v19);
      }
      else
      {
        std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<int *,int *,std::allocator<int>>(
          -4 * a3 + *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 4 * a3;
        v4 = -4 * a3 + v25;
        v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v25);
        v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 4 * a3;
        v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::fill<int *,int>(*(_DWORD *)v8, v7, (int)&v19);
      }
    }
  }
}

//----- (0804B87A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804B882) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804B89C) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804B8B6) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B8EE) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804B92C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B93B) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B95C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B96C) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@7
  int v13; // eax@7
  int v14; // esi@7
  int v15; // eax@7
  int v16; // ST08_4@7
  char v17; // [sp+14h] [bp-44h]@3
  char v18; // [sp+20h] [bp-38h]@3
  char v19; // [sp+24h] [bp-34h]@7
  void *v20; // [sp+28h] [bp-30h]@7
  int v21; // [sp+2Ch] [bp-2Ch]@7
  int v22; // [sp+30h] [bp-28h]@7
  int v23; // [sp+34h] [bp-24h]@3
  int v24; // [sp+38h] [bp-20h]@3
  void *v25; // [sp+3Ch] [bp-1Ch]@7

  if ( a3 )
  {
    if ( -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2) < a3 )
    {
      v22 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(
              a1,
              a3,
              "vector::_M_fill_insert");
      std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin(
        (int)&v19,
        a1);
      v21 = __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(
              (int)&a2,
              (int)&v19);
      v20 = (void *)std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                      a1,
                      v22);
      v25 = v20;
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
        (int)((char *)v20 + 12 * v21),
        a3,
        a4);
      v25 = 0;
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
              *(_DWORD *)a1,
              *(_DWORD *)v12,
              (int)v20);
      v25 = (void *)(12 * a3 + v13);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
      v25 = (void *)std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
                      *(_DWORD *)v15,
                      v14,
                      (int)v25);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
      std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
        *(_DWORD *)a1,
        *(_DWORD *)(a1 + 4));
      v16 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
      std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
        a1,
        *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 4) = v25;
      *(_DWORD *)(a1 + 8) = (char *)v20 + 12 * v22;
    }
    else
    {
      std::vector<int,std::allocator<int>>::vector((int)&v17, a4);
      std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::end(
        (int)&v18,
        a1);
      v24 = __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(
              (int)&v18,
              (int)&a2);
      v23 = *(_DWORD *)(a1 + 4);
      if ( v24 <= a3 )
      {
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)(a1 + 4),
          a3 - v24,
          (int)&v17);
        *(_DWORD *)(a1 + 4) += 12 * (a3 - v24);
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
          *(_DWORD *)v10,
          v23,
          v9);
        *(_DWORD *)(a1 + 4) += 12 * v24;
        v11 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)v11,
          v23,
          (int)&v17);
      }
      else
      {
        std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(
          *(_DWORD *)(a1 + 4) + -12 * a3,
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 12 * a3;
        v4 = -12 * a3 + v23;
        v5 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
          *(_DWORD *)v5,
          v4,
          v23);
        v6 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 12 * a3;
        v8 = __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base((int)&a2);
        std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
          *(_DWORD *)v8,
          v7,
          (int)&v17);
      }
      std::vector<int,std::allocator<int>>::~vector((int)&v17);
    }
  }
}

//----- (0804BE5E) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804BE96) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (0804BF3A) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (0804BF6A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804BF99) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804BFC2) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804BFCA) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804BFDE) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804BFE4) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804BFF8) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804C00C) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (0804C012) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C026) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::new_allocator()
{
  ;
}

//----- (0804C02C) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::~new_allocator()
{
  ;
}

//----- (0804C032) --------------------------------------------------------
void std::allocator<unsigned long>::allocator()
{
  __gnu_cxx::new_allocator<unsigned long>::new_allocator();
}

//----- (0804C04C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<unsigned long>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C060) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<unsigned long>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<unsigned long>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804C090) --------------------------------------------------------
int __cdecl std::__miter_base<unsigned long *>(int a1)
{
  return std::_Iter_base<unsigned long *,false>::_S_base(a1);
}

//----- (0804C0A3) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,unsigned long *,unsigned long *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<unsigned long *>(a3);
  v4 = std::__niter_base<unsigned long *>(a2);
  v5 = std::__niter_base<unsigned long *>(a1);
  return std::__copy_move_a<false,unsigned long *,unsigned long *>((void *)v5, v4, (void *)v3);
}

//----- (0804C0E7) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_const_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804C110) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // [sp+28h] [bp-20h]@1
  int v9; // [sp+2Ch] [bp-1Ch]@1
  int v10; // [sp+30h] [bp-18h]@1
  int v11; // [sp+34h] [bp-14h]@1
  int v12; // [sp+38h] [bp-10h]@1
  int v13; // [sp+3Ch] [bp-Ch]@1

  std::__niter_base<std::_Bit_iterator>((int)&v8, a6, a7);
  std::__niter_base<std::_Bit_const_iterator>((int)&v10, a4, a5);
  std::__niter_base<std::_Bit_const_iterator>((int)&v12, a2, a3);
  std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>(a1, v12, v13, v10, v11, v8, v9);
  return a1;
}

//----- (0804C1AA) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1)
{
  int result; // eax@1

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = a1;
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

//----- (0804C1D6) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804C1F2) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(int a1, unsigned int a2)
{
  int v2; // ebx@1
  char v4; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator((int)&v4, a1);
  v2 = __gnu_cxx::new_allocator<int *>::allocate((int)&v4, a2);
  std::allocator<int *>::~allocator();
  return v2;
}

//----- (0804C256) --------------------------------------------------------
unsigned int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3)
{
  unsigned int result; // eax@3
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; i += 4 )
  {
    result = i;
    if ( i >= a3 )
      break;
    *(_DWORD *)i = std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(a1);
  }
  return result;
}

//----- (0804C2C0) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 4 * std::_Deque_iterator<int,int &,int *>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804C2F8) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(int a1, void *a2)
{
  std::__deque_buf_size(4u);
  __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804C322) --------------------------------------------------------
int __userpurge std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator@<eax>(int a1, int a2)
{
  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  std::allocator<int *>::allocator<int>();
  return a1;
}

//----- (0804C34A) --------------------------------------------------------
void std::allocator<int *>::~allocator()
{
  __gnu_cxx::new_allocator<int *>::~new_allocator();
}

//----- (0804C35E) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int *>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804C371) --------------------------------------------------------
unsigned int __cdecl std::operator-<int,int &,int *>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<int,int &,int *>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 2)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 2);
}

//----- (0804C3C6) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 24);
}

//----- (0804C410) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (0804C443) --------------------------------------------------------
int __userpurge std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804C4BA) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(int a1, int a2)
{
  int result; // eax@1

  result = *(_DWORD *)(a1 + 4) - ((*(_DWORD *)(a1 + 36) - *(_DWORD *)a1) >> 2);
  if ( a2 + 1 > (unsigned int)result )
    result = std::deque<int,std::allocator<int>>::_M_reallocate_map(a1, a2, 0);
  return result;
}

//----- (0804C50A) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(int a1)
{
  unsigned int v1; // eax@1

  v1 = std::__deque_buf_size(4u);
  return __gnu_cxx::new_allocator<int>::allocate(a1, v1);
}

//----- (0804C535) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804C55D) --------------------------------------------------------
int __cdecl std::fill<int *,int>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<int *>(a2);
  v4 = std::__niter_base<int *>(a1);
  return std::__fill_a<int *,int>(v4, v3, a3);
}

//----- (0804C595) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804C5B6) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804C5D0) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804C5D6) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804C5F0) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804C611) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(a1);
  return -1431655765
       * ((v2
         - *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(a2)) >> 2);
}

//----- (0804C663) --------------------------------------------------------
int __cdecl std::__uninitialized_move_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804C68C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::base(int a1)
{
  return a1;
}

//----- (0804C694) --------------------------------------------------------
int __cdecl std::copy_backward<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::vector<int,std::allocator<int>> *>(a2);
  v4 = std::__miter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           v4,
           v3,
           a3);
}

//----- (0804C6CC) --------------------------------------------------------
int __cdecl std::fill<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a2);
  v4 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(v4, v3, a3);
}

//----- (0804C704) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804C726) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1);
  v4 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1),
        v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(a1);
  return result;
}

//----- (0804C7CA) --------------------------------------------------------
int __userpurge std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<int,std::allocator<int>> *,std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804C7EA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804C819) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::allocator<std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804C841) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804C854) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804C898) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804C8B4) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804C8E4) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804C906) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804C90C) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804C912) --------------------------------------------------------
void __gnu_cxx::new_allocator<unsigned long>::new_allocator()
{
  ;
}

//----- (0804C918) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<unsigned long>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804C922) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,unsigned long *,unsigned long *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(src, a2, dest);
}

//----- (0804C947) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Bit_const_iterator,false>::_S_base@<eax>(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  return a1;
}

//----- (0804C95F) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Bit_const_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_const_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804C988) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Bit_iterator>@<eax>(int a1, int a2, int a3)
{
  std::_Iter_base<std::_Bit_iterator,false>::_S_base(a1, a2, a3);
  return a1;
}

//----- (0804C9B1) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7);
  return a1;
}

//----- (0804C9FA) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int *>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int *>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804CA2A) --------------------------------------------------------
unsigned int std::_Deque_iterator<int,int &,int *>::_S_buffer_size()
{
  return std::__deque_buf_size(4u);
}

//----- (0804CA3E) --------------------------------------------------------
void std::allocator<int *>::allocator<int>()
{
  __gnu_cxx::new_allocator<int *>::new_allocator();
}

//----- (0804CA52) --------------------------------------------------------
void __gnu_cxx::new_allocator<int *>::~new_allocator()
{
  ;
}

//----- (0804CA57) --------------------------------------------------------
int __userpurge std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804CACE) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_reallocate_map(int a1, int a2, char a3)
{
  int v3; // eax@3
  int v4; // ebx@8
  int v5; // eax@9
  int v6; // ST08_4@11
  char v8; // [sp+Ch] [bp-2Ch]@1
  int v9; // [sp+1Ch] [bp-1Ch]@8
  unsigned int v10; // [sp+20h] [bp-18h]@8
  int v11; // [sp+24h] [bp-14h]@1
  int v12; // [sp+28h] [bp-10h]@1
  int v13; // [sp+2Ch] [bp-Ch]@5

  v8 = a3;
  v12 = ((*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 20)) >> 2) + 1;
  v11 = a2 + v12;
  if ( *(_DWORD *)(a1 + 4) <= (unsigned int)(2 * (a2 + v12)) )
  {
    v4 = *(_DWORD *)(a1 + 4);
    v10 = v4 + *(_DWORD *)std::max<unsigned int>(a1 + 4, (int)&a2) + 2;
    v9 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(a1, v10);
    if ( v8 )
      v5 = 4 * a2;
    else
      v5 = 0;
    v13 = v5 + 4 * ((v10 - v11) >> 1) + v9;
    std::copy<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
    v6 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(a1, *(void **)a1);
    *(_DWORD *)a1 = v9;
    *(_DWORD *)(a1 + 4) = v10;
  }
  else
  {
    if ( a3 )
      v3 = 4 * a2;
    else
      v3 = 0;
    v13 = *(_DWORD *)a1 + 4 * ((unsigned int)(*(_DWORD *)(a1 + 4) - v11) >> 1) + v3;
    if ( *(_DWORD *)(a1 + 20) <= (unsigned int)v13 )
      std::copy_backward<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, 4 * v12 + v13);
    else
      std::copy<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
  }
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, v13);
  return std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, v13 + 4 * (v12 + 0x3FFFFFFF));
}

//----- (0804CCA5) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804CCB8) --------------------------------------------------------
int __cdecl std::__fill_a<int *,int>(int a1, int a2, int a3)
{
  int result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    *(_DWORD *)a1 = v4;
    a1 += 4;
  }
  return result;
}

//----- (0804CCDE) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804CCFF) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804CD28) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804CD2D) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804CD78) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804CD99) --------------------------------------------------------
int __cdecl std::__miter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804CDAC) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a3);
  v4 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a2);
  v5 = std::__niter_base<std::vector<int,std::allocator<int>> *>(a1);
  return std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           v5,
           v4,
           v3);
}

//----- (0804CDF0) --------------------------------------------------------
int __cdecl std::__niter_base<std::vector<int,std::allocator<int>> *>(int a1)
{
  return std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(a1);
}

//----- (0804CE03) --------------------------------------------------------
int __cdecl std::__fill_a<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    std::vector<int,std::allocator<int>>::operator=(a1, a3);
    a1 += 12;
  }
  return result;
}

//----- (0804CE2B) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804CE4C) --------------------------------------------------------
signed int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::max_size(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size();
}

//----- (0804CE68) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804CE9E) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804CEA6) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804CECB) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804CEDE) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804CEE8) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804CF09) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804CF52) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Bit_iterator,false>::_S_base@<eax>(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  return a1;
}

//----- (0804CF6A) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator,std::_Bit_iterator>@<eax>(int a1, char a2, int a3, char a4, int a5, int a6, int a7)
{
  bool v7; // bl@2
  int v8; // edx@4
  char v10; // [sp+14h] [bp-14h]@2
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = std::operator-((int)&a4, (int)&a2); i > 0; --i )
  {
    v7 = std::_Bit_const_iterator::operator*((int)&a2);
    std::_Bit_iterator::operator*((std::_Bit_reference *)&v10, (int)&a6);
    std::_Bit_reference::operator=((int)&v10, v7);
    std::_Bit_const_iterator::operator++((std::_Bit_iterator_base *)&a2);
    std::_Bit_iterator::operator++((std::_Bit_iterator_base *)&a6);
  }
  v8 = a7;
  *(_DWORD *)a1 = a6;
  *(_DWORD *)(a1 + 4) = v8;
  return a1;
}

//----- (0804CFF2) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int *>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804CFFC) --------------------------------------------------------
void __gnu_cxx::new_allocator<int *>::new_allocator()
{
  ;
}

//----- (0804D001) --------------------------------------------------------
int __userpurge std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-38h]@1
  int v12; // [sp+40h] [bp-28h]@1
  int v13; // [sp+44h] [bp-24h]@1
  int v14; // [sp+48h] [bp-20h]@1
  int v15; // [sp+4Ch] [bp-1Ch]@1
  int v16; // [sp+50h] [bp-18h]@1
  int v17; // [sp+54h] [bp-14h]@1
  int v18; // [sp+58h] [bp-10h]@1
  int v19; // [sp+5Ch] [bp-Ch]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v12, a6, a7, a8, a9);
  std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v16, a2, a3, a4, a5);
  std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    v16,
    v17,
    v18,
    v19,
    v12,
    v13,
    v14,
    v15,
    (int)&v11);
  return a1;
}

//----- (0804D0CB) --------------------------------------------------------
char *__cdecl std::copy<int **,int **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int **>(a2);
  v4 = std::__miter_base<int **>(a1);
  return std::__copy_move_a2<false,int **,int **>(v4, v3, a3);
}

//----- (0804D103) --------------------------------------------------------
int __cdecl std::copy_backward<int **,int **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int **>(a2);
  v4 = std::__miter_base<int **>(a1);
  return std::__copy_move_backward_a2<false,int **,int **>(v4, v3, a3);
}

//----- (0804D13B) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804D15C) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804D164) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804D177) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804D199) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804D1DD) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804D1FE) --------------------------------------------------------
int __cdecl std::_Iter_base<std::vector<int,std::allocator<int>> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804D206) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(
           a1,
           a2,
           a3);
}

//----- (0804D22C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator=(int a1, int a2)
{
  int v2; // ST04_4@3
  void *v3; // ST00_4@3
  int v4; // ST08_4@3
  void *v5; // ebx@6
  int v6; // esi@6
  int v7; // eax@6
  int v8; // edi@6
  int v9; // esi@6
  int v10; // ST1C_4@6
  int v11; // eax@6
  int v13; // [sp+2Ch] [bp-3Ch]@3
  int v14; // [sp+30h] [bp-38h]@3
  int v15; // [sp+34h] [bp-34h]@5
  int v16; // [sp+38h] [bp-30h]@5
  int v17; // [sp+3Ch] [bp-2Ch]@5
  int v18; // [sp+40h] [bp-28h]@5
  int v19; // [sp+44h] [bp-24h]@5
  int v20; // [sp+48h] [bp-20h]@3
  unsigned int v21; // [sp+4Ch] [bp-1Ch]@2

  if ( a2 != a1 )
  {
    v21 = std::vector<int,std::allocator<int>>::size(a2);
    if ( std::vector<int,std::allocator<int>>::capacity(a1) < v21 )
    {
      std::vector<int,std::allocator<int>>::end((int)&v13, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v14, a2);
      v20 = std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(
              a1,
              v21,
              v14,
              v13);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v2 = *(_DWORD *)(a1 + 4);
      v3 = *(void **)a1;
      std::_Destroy<int *,int>();
      v4 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * v21;
    }
    else if ( std::vector<int,std::allocator<int>>::size(a1) >= v21 )
    {
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      std::vector<int,std::allocator<int>>::end((int)&v15, a1);
      std::vector<int,std::allocator<int>>::begin((int)&v16, a1);
      std::vector<int,std::allocator<int>>::end((int)&v17, a2);
      std::vector<int,std::allocator<int>>::begin((int)&v18, a2);
      std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
        (int)&v19,
        v18,
        v17,
        v16);
      std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>();
    }
    else
    {
      v5 = *(void **)a1;
      v6 = *(_DWORD *)a2;
      v7 = std::vector<int,std::allocator<int>>::size(a1);
      std::copy<int *,int *>(*(_DWORD *)a2, v6 + 4 * v7, (int)v5);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v8 = *(_DWORD *)(a1 + 4);
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)a2;
      v11 = std::vector<int,std::allocator<int>>::size(a1);
      std::__uninitialized_copy_a<int *,int *,int>(v10 + 4 * v11, v9, v8);
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)a1 + 4 * v21;
  }
  return a1;
}

//----- (0804D472) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804D4E0) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<int,std::allocator<int>>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
}

//----- (0804D4F4) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804D4FC) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804D506) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804D55B) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804D57C) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base(a1, a2, a3, a4, a5);
  return a1;
}

//----- (0804D5B3) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-48h]@1
  char v12; // [sp+40h] [bp-38h]@1
  int v13; // [sp+50h] [bp-28h]@1
  int v14; // [sp+54h] [bp-24h]@1
  int v15; // [sp+58h] [bp-20h]@1
  int v16; // [sp+5Ch] [bp-1Ch]@1
  int v17; // [sp+60h] [bp-18h]@1
  int v18; // [sp+64h] [bp-14h]@1
  int v19; // [sp+68h] [bp-10h]@1
  int v20; // [sp+6Ch] [bp-Ch]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v12, a10);
  std::__niter_base<std::_Deque_iterator<int,int &,int *>>((int)&v11, (int)&v12);
  std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v13, a6, a7, a8, a9);
  std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v17, a2, a3, a4, a5);
  std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    v17,
    v18,
    v19,
    v20,
    v13,
    v14,
    v15,
    v16,
    (int)&v11);
  return a1;
}

//----- (0804D694) --------------------------------------------------------
int __cdecl std::__miter_base<int **>(int a1)
{
  return std::_Iter_base<int **,false>::_S_base(a1);
}

//----- (0804D6A7) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int **,int **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int **>(a3);
  v4 = std::__niter_base<int **>(a2);
  v5 = std::__niter_base<int **>(a1);
  return std::__copy_move_a<false,int **,int **>((void *)v5, v4, (void *)v3);
}

//----- (0804D6EB) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int **,int **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int **>(a3);
  v4 = std::__niter_base<int **>(a2);
  v5 = std::__niter_base<int **>(a1);
  return std::__copy_move_backward_a<false,int **,int **>((void *)v5, v4, v3);
}

//----- (0804D72F) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804D758) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804D76A) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804D77D) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804D7A2) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v3, a1);
    a1 += 12;
    v5 += 12;
  }
  return v5;
}

//----- (0804D816) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>> *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = -1431655765 * ((a2 - a1) >> 2); i > 0; --i )
  {
    a2 -= 12;
    a3 -= 12;
    std::vector<int,std::allocator<int>>::operator=(a3, a2);
  }
  return a3;
}

//----- (0804D878) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::capacity(int a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
}

//----- (0804D892) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(int a1, int a2, int a3, int a4)
{
  int v4; // ST1C_4@1

  v4 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
    a3,
    a4,
    v4);
  return v4;
}

//----- (0804D918) --------------------------------------------------------
int __userpurge std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804D972) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>()
{
  std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804D98C) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804D9C4) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804DA19) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

//----- (0804DA3D) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base(a1, a2, a3, a4, a5);
  return a1;
}

//----- (0804DA74) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2)
{
  char v3; // [sp+10h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v3, a2);
  std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base(a1, (int)&v3);
  return a1;
}

//----- (0804DAA8) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+3Ch] [bp-1Ch]@1
  char v12; // [sp+4Fh] [bp-9h]@1

  v12 = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804DB22) --------------------------------------------------------
int __cdecl std::_Iter_base<int **,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804DB2A) --------------------------------------------------------
int __cdecl std::__niter_base<int **>(int a1)
{
  return std::_Iter_base<int **,false>::_S_base(a1);
}

//----- (0804DB3D) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int **,int **>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(src, a2, dest);
}

//----- (0804DB62) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int **,int **>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(src, a2, a3);
}

//----- (0804DB87) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804DBB7) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804DBCC) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804DC15) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  char *v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_a<false,int const*,int *>((void *)v6, v5, (void *)v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804DC73) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>();
}

//----- (0804DC8D) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804DCD1) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2);
  return a1;
}

//----- (0804DCF0) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  int v10; // ebx@2
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = std::operator-<int,int const&,int const*>((int)&a6, (int)&a2); (signed int)i > 0; --i )
  {
    v10 = std::_Deque_iterator<int,int &,int *>::operator*(a10);
    *(_DWORD *)v10 = *(_DWORD *)std::_Deque_iterator<int,int const&,int const*>::operator*((int)&a2);
    std::_Deque_iterator<int,int const&,int const*>::operator++((int)&a2);
    std::_Deque_iterator<int,int &,int *>::operator++(a10);
  }
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a10);
  return a1;
}

//----- (0804DD66) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804DDAF) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804DE04) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804DE17) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>()
{
  ;
}

//----- (0804DE1C) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804DE41) --------------------------------------------------------
unsigned int __cdecl std::operator-<int,int const&,int const*>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 2)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 2);
}

//----- (0804DE96) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804DEA0) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<int,int const&,int const*>::_M_set_node(a1, *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (0804DEEA) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<int,int &,int *>::_M_set_node(a1, *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (0804DF34) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804DF49) --------------------------------------------------------
unsigned int std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size()
{
  return std::__deque_buf_size(4u);
}

//----- (0804DF5E) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 4 * std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804DF96) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (0804DFF0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804E000) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804E05A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804E060) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_80528A0;
  v3 = (void (__cdecl *)())off_80528A0;
  if ( off_80528A0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 80528A0: using guessed type int (*off_80528A0)();

//----- (0804E088) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 329 function(s)"
