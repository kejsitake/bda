/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// void *memset(void *s, int c, size_t n);
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// long double acosl(long double x);
// void *memmove(void *dest, const void *src, size_t n);
// int __fastcall std::ostream::operator<<(_DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
void *init(void);
__int64 __cdecl add_edge(int a1, int a2, __int64 a3, __int64 a4);
int __cdecl mf_update(int a1, int a2, __int64 a3);
int __cdecl main(int argc, const char **argv, const char **envp);
void __cdecl __static_initialization_and_destruction_0(int a1, int a2);
void GLOBAL__sub_I_vis();
void *__cdecl operator new(unsigned int a1, void *a2);
unsigned int __cdecl std::__deque_buf_size(unsigned int a1);
long double __cdecl std::acos(long double x);
void __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::~queue(int a1);
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1);
void __cdecl std::deque<int,std::allocator<int>>::~deque(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::queue(int a1, int a2);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::push(int a1, int a2);
bool __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::empty(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::front(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::pop(int a1);
int __cdecl std::min<long long>(int a1, int a2);
void std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl();
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1);
void __cdecl std::_Deque_base<int,std::allocator<int>>::~_Deque_base(int a1);
// int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1, int a2);
void std::deque<int,std::allocator<int>>::_M_destroy_data();
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1, int a2);
int __cdecl std::deque<int,std::allocator<int>>::push_back(int a1, int a2);
bool __cdecl std::deque<int,std::allocator<int>>::empty(int a1);
int __cdecl std::deque<int,std::allocator<int>>::front(int a1);
int __cdecl std::deque<int,std::allocator<int>>::pop_front(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1);
void std::allocator<int>::~allocator();
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(int a1, unsigned int a2);
void **__cdecl std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3);
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(int a1, void *a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
unsigned int __cdecl std::deque<int,std::allocator<int>>::size(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1, int a2, unsigned int a3);
// int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2);
// int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl std::deque<int,std::allocator<int>>::_M_push_back_aux(int a1, int a2);
bool __cdecl std::operator==<int,int &,int *>(int a1, int a2);
int __cdecl std::_Deque_iterator<int,int &,int *>::operator*(int a1);
void __gnu_cxx::new_allocator<int>::destroy();
int __cdecl std::deque<int,std::allocator<int>>::_M_pop_front_aux(int a1);
void std::allocator<int>::allocator();
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1);
void __gnu_cxx::new_allocator<int>::~new_allocator();
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(int a1, unsigned int a2);
unsigned int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3);
int __cdecl std::_Deque_iterator<int,int &,int *>::_M_set_node(int a1, int a2);
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(int a1, void *a2);
// int __userpurge std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator@<eax>(int a1, int a2);
void std::allocator<int *>::~allocator();
void __cdecl __gnu_cxx::new_allocator<int *>::deallocate(int a1, void *a2);
unsigned int __cdecl std::operator-<int,int &,int *>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(int a1, int a2);
// int __userpurge std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(int a1);
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<int *>::allocate(int a1, unsigned int a2);
unsigned int std::_Deque_iterator<int,int &,int *>::_S_buffer_size();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::allocator<int *>::allocator<int>();
void __gnu_cxx::new_allocator<int *>::~new_allocator();
void std::allocator<int>::allocator();
// int __userpurge std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_reallocate_map(int a1, int a2, char a3);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
signed int __gnu_cxx::new_allocator<int *>::max_size();
void __gnu_cxx::new_allocator<int *>::new_allocator();
void __gnu_cxx::new_allocator<int>::new_allocator();
// int __userpurge std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
char *__cdecl std::copy<int **,int **>(int a1, int a2, int a3);
int __cdecl std::copy_backward<int **,int **>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<int>::max_size();
// int __userpurge std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::__miter_base<int **>(int a1);
char *__cdecl std::__copy_move_a2<false,int **,int **>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward_a2<false,int **,int **>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__niter_base<std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
int __cdecl std::_Iter_base<int **,false>::_S_base(int a1);
int __cdecl std::__niter_base<int **>(int a1);
char *__cdecl std::__copy_move_a<false,int **,int **>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward_a<false,int **,int **>(void *src, int, int); // idb
// int __userpurge std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base@<eax>(int a1, int a2);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(void *src, int, int); // idb
unsigned int __cdecl std::operator-<int,int const&,int const*>(int a1, int a2);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator*(int a1);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator++(int a1);
int __cdecl std::_Deque_iterator<int,int &,int *>::operator++(int a1);
unsigned int std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size();
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_M_set_node(int a1, int a2);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
_UNKNOWN unk_804B290; // weak
int (*off_804D004)() = &GLOBAL__sub_I_vis; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
_UNKNOWN std::cout; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
int par[]; // weak
int first[]; // weak
int nxt[]; // weak
int ep[]; // weak
int m; // weak
int e; // weak
int dword_847F7C0[]; // weak
int dword_847F7C4[]; // weak
int flo[]; // weak
int dword_8542CE4[]; // weak
int cap[]; // weak
int dword_86C9704[]; // weak
int cost[]; // weak
int dword_8850124[]; // weak
_UNKNOWN std::__ioinit; // weak
_DWORD PI; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048800) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048850: using guessed type int __gmon_start__(void);

//----- (08048990) --------------------------------------------------------
#error "8048993: positive sp value has been found (funcsize=2)"

//----- (080489C0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 80489C0: could not find valid save-restore pair for ebp

//----- (080489F0) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 80489F0: could not find valid save-restore pair for ebp

//----- (08048A30) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804D00C: using guessed type int _DTOR_LIST__[];
// 804D34C: using guessed type char completed_3328;
// 804D350: using guessed type int dtor_idx_3330;

//----- (08048A80) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048A80: could not find valid save-restore pair for ebp

//----- (08048AB0) --------------------------------------------------------
void *init(void)
{
  m = 0;
  memset(first, -1, 0x61A88u);
  return memset(flo, 0, 0x186A20u);
}
// 81108A0: using guessed type int first[];
// 82F8D70: using guessed type int m;
// 8542CE0: using guessed type int flo[];

//----- (08048AFA) --------------------------------------------------------
__int64 __cdecl add_edge(int a1, int a2, __int64 a3, __int64 a4)
{
  int v4; // edx@1
  int v5; // eax@1
  int v6; // ecx@1
  int v7; // ecx@1
  int v8; // edx@1
  int v9; // eax@1
  int v10; // eax@1
  int v11; // ecx@1
  __int64 result; // rax@1

  v4 = m;
  v5 = m;
  ep[m] = a1;
  nxt[v4] = first[ep[v5]];
  first[ep[m]] = m;
  v6 = m;
  cap[2 * m] = a3;
  dword_86C9704[2 * v6] = HIDWORD(a3);
  v7 = m++;
  cost[2 * v7] = a4;
  dword_8850124[2 * v7] = HIDWORD(a4);
  v8 = m;
  v9 = m;
  ep[m] = a2;
  nxt[v8] = first[ep[v9]];
  first[ep[m]] = m;
  v10 = m;
  cap[2 * m] = 0;
  dword_86C9704[2 * v10] = 0;
  v11 = m++;
  result = -a4;
  cost[2 * v11] = -(signed int)a4;
  dword_8850124[2 * v11] = (unsigned __int64)-a4 >> 32;
  return result;
}
// 81108A0: using guessed type int first[];
// 8172340: using guessed type int nxt[];
// 8235860: using guessed type int ep[];
// 82F8D70: using guessed type int m;
// 86C9700: using guessed type int cap[];
// 86C9704: using guessed type int dword_86C9704[];
// 8850120: using guessed type int cost[];
// 8850124: using guessed type int dword_8850124[];

//----- (08048C22) --------------------------------------------------------
int __cdecl mf_update(int a1, int a2, __int64 a3)
{
  int v3; // eax@1
  __int64 v4; // rax@4
  __int64 v5; // rcx@4
  bool v6; // al@5
  int v7; // eax@8
  int v8; // edx@8
  int v9; // ecx@8
  int v10; // ebx@13
  int v11; // esi@15
  __int64 v12; // rcx@15
  __int64 v13; // rax@15
  __int64 v14; // rax@15
  int v15; // esi@15
  __int64 v16; // rax@15
  int v17; // esi@17
  __int64 v19; // [sp+18h] [bp-90h]@1
  char v20; // [sp+28h] [bp-80h]@1
  __int64 v21; // [sp+50h] [bp-58h]@4
  char v22; // [sp+5Ch] [bp-4Ch]@1
  int v23; // [sp+84h] [bp-24h]@8
  __int64 v24; // [sp+88h] [bp-20h]@3
  int v25; // [sp+90h] [bp-18h]@2
  int v26; // [sp+94h] [bp-14h]@2
  int i; // [sp+9Ch] [bp-Ch]@14

  v19 = a3;
  memset(dword_847F7C0, 0, 0xC3510u);
  memset(par, -1, 0x61A88u);
  std::deque<int,std::allocator<int>>::deque((int)&v22);
  std::queue<int,std::deque<int,std::allocator<int>>>::queue((int)&v20, (int)&v22);
  std::deque<int,std::allocator<int>>::~deque((int)&v22);
  std::queue<int,std::deque<int,std::allocator<int>>>::push((int)&v20, (int)&a1);
  par[a1] = -2;
  v3 = a1;
  dword_847F7C0[2 * a1] = 1061109567;
  dword_847F7C4[2 * v3] = 0;
  while ( !std::queue<int,std::deque<int,std::allocator<int>>>::empty((int)&v20) )
  {
    v25 = *(_DWORD *)std::queue<int,std::deque<int,std::allocator<int>>>::front((int)&v20);
    v26 = v25 >> 31;
    std::queue<int,std::deque<int,std::allocator<int>>>::pop((int)&v20);
    for ( e = first[v25]; e != -1; e = nxt[e] )
    {
      v24 = ep[e ^ 1];
      v6 = 0;
      if ( par[(signed int)v24] == -1 )
      {
        HIDWORD(v4) = dword_86C9704[2 * e];
        LODWORD(v4) = cap[2 * e];
        HIDWORD(v5) = dword_8542CE4[2 * e];
        LODWORD(v5) = flo[2 * e];
        v21 = v4 - v5;
        if ( v4 - v5 >= v19 )
          v6 = 1;
      }
      if ( v6 )
      {
        v23 = v24;
        std::queue<int,std::deque<int,std::allocator<int>>>::push((int)&v20, (int)&v23);
        par[(signed int)v24] = e;
        v7 = std::min<long long>((int)&dword_847F7C0[2 * v25], (int)&v21);
        v8 = *(_DWORD *)(v7 + 4);
        v9 = v24;
        dword_847F7C0[2 * (signed int)v24] = *(_DWORD *)v7;
        dword_847F7C4[2 * v9] = v8;
      }
    }
  }
  if ( par[a2] == -1 )
  {
    v10 = 0;
  }
  else
  {
    for ( i = a2; i != a1; i = ep[e] )
    {
      e = par[i];
      v11 = e;
      LODWORD(v12) = flo[2 * e];
      HIDWORD(v12) = dword_8542CE4[2 * e];
      HIDWORD(v13) = dword_847F7C4[2 * a2];
      LODWORD(v13) = dword_847F7C0[2 * a2];
      v14 = v12 + v13;
      flo[2 * e] = v14;
      dword_8542CE4[2 * v11] = HIDWORD(v14);
      v15 = e ^ 1;
      HIDWORD(v14) = dword_8542CE4[2 * (e ^ 1)];
      LODWORD(v14) = flo[2 * (e ^ 1)];
      HIDWORD(v12) = dword_847F7C4[2 * a2];
      LODWORD(v12) = dword_847F7C0[2 * a2];
      v16 = v14 - v12;
      flo[2 * v15] = v16;
      dword_8542CE4[2 * v15] = HIDWORD(v16);
    }
    v10 = dword_847F7C0[2 * a2];
    v17 = dword_847F7C4[2 * a2];
  }
  std::queue<int,std::deque<int,std::allocator<int>>>::~queue((int)&v20);
  return v10;
}
// 80AEE00: using guessed type int par[];
// 81108A0: using guessed type int first[];
// 8172340: using guessed type int nxt[];
// 8235860: using guessed type int ep[];
// 82F8D74: using guessed type int e;
// 847F7C0: using guessed type int dword_847F7C0[];
// 847F7C4: using guessed type int dword_847F7C4[];
// 8542CE0: using guessed type int flo[];
// 8542CE4: using guessed type int dword_8542CE4[];
// 86C9700: using guessed type int cap[];
// 86C9704: using guessed type int dword_86C9704[];

//----- (08048F63) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@2
  int v4; // eax@2
  int v5; // eax@9
  int v6; // eax@9
  int v7; // eax@9
  __int64 v8; // kr00_8@39
  __int64 v9; // ST18_8@39
  __int64 v10; // ST04_8@39
  int v11; // eax@39
  int v12; // eax@39
  int v13; // ecx@39
  int v14; // eax@39
  __int64 v15; // rax@40
  __int64 v16; // kr08_8@44
  int v17; // ecx@44
  int v18; // eax@44
  int v19; // eax@44
  __int64 v20; // ST04_8@44
  int v21; // eax@44
  int v23; // [sp+8h] [bp-30DF0h]@39
  int v24; // [sp+20h] [bp-30DD8h]@4
  __int64 v25; // [sp+30D60h] [bp-98h]@9
  __int64 v26; // [sp+30D68h] [bp-90h]@9
  int v27; // [sp+30D70h] [bp-88h]@9
  int v28; // [sp+30D78h] [bp-80h]@9
  __int64 v29; // [sp+30D80h] [bp-78h]@2
  __int64 v30; // [sp+30D88h] [bp-70h]@2
  __int64 v31; // [sp+30D90h] [bp-68h]@2
  __int64 v32; // [sp+30D98h] [bp-60h]@1
  __int64 v33; // [sp+30DA0h] [bp-58h]@40
  int v34; // [sp+30DA8h] [bp-50h]@39
  int v35; // [sp+30DACh] [bp-4Ch]@39
  int v36; // [sp+30DB0h] [bp-48h]@39
  int v37; // [sp+30DB4h] [bp-44h]@39
  __int64 ll; // [sp+30DB8h] [bp-40h]@39
  __int64 v39; // [sp+30DC0h] [bp-38h]@39
  int kk; // [sp+30DC8h] [bp-30h]@21
  int jj; // [sp+30DCCh] [bp-2Ch]@20
  int ii; // [sp+30DD0h] [bp-28h]@17
  int n; // [sp+30DD4h] [bp-24h]@10
  int m; // [sp+30DD8h] [bp-20h]@9
  int l; // [sp+30DDCh] [bp-1Ch]@8
  int k; // [sp+30DE0h] [bp-18h]@3
  int j; // [sp+30DE4h] [bp-14h]@2
  __int64 i; // [sp+30DE8h] [bp-10h]@1

  std::istream::operator>>(&std::cin, &v32);
  for ( i = 0LL; i < v32; ++i )
  {
    v3 = std::istream::operator>>(&std::cin, &v31);
    v4 = std::istream::operator>>(v3, &v30);
    std::istream::operator>>(v4, &v29);
    for ( j = 0; j < v31; ++j )
    {
      for ( k = 0; k < v30; ++k )
        *(&v24 + k + 500 * j) = 0;
    }
    for ( l = 0; l < v29; ++l )
    {
      v5 = std::istream::operator>>(&std::cin, &v28);
      v6 = std::istream::operator>>(v5, &v27);
      v7 = std::istream::operator>>(v6, &v26);
      std::istream::operator>>(v7, &v25);
      for ( m = v28; m <= v26; ++m )
      {
        for ( n = v27; n <= v25; ++n )
          *(&v24 + n + 500 * m) = 1;
      }
    }
    init();
    for ( ii = 0; ii < v31; ++ii )
    {
      add_edge(100000, ii + 50000, 1LL, 0LL);
      add_edge(v31 * (v30 - 1) + ii, 100001, 1LL, 0LL);
    }
    for ( jj = 0; jj < v31; ++jj )
    {
      for ( kk = 0; kk < v30; ++kk )
      {
        if ( !*(&v24 + kk + 500 * jj) )
        {
          add_edge(kk * v31 + jj + 50000, kk * v31 + jj, 1LL, 0LL);
          if ( *(&v24 + kk + 500 * (jj + 1)) && jj + 1 < v31 )
            add_edge(kk * v31 + jj, kk * v31 + jj + 50001, 1LL, 0LL);
          if ( *(&v24 + kk + 500 * (jj - 1)) && jj - 1 >= 0 )
            add_edge(kk * v31 + jj, kk * v31 + jj + 49999, 1LL, 0LL);
          if ( *(&v24 + kk + 1 + 500 * jj) && kk + 1 < v30 )
            add_edge(kk * v31 + jj, kk * v31 + jj + v31 + 50000, 1LL, 0LL);
          if ( *(&v24 + kk - 1 + 500 * jj) && kk - 1 >= 0 )
            add_edge(kk * v31 + jj, kk * v31 + jj - v31 + 50000, 1LL, 0LL);
        }
      }
    }
    v36 = 100000;
    v37 = 0;
    v34 = 100001;
    v35 = 0;
    v39 = 0LL;
    v8 = v29;
    v9 = v30;
    v10 = v31;
    v11 = std::ostream::operator<<(jj);
    std::operator<<<std::char_traits<char>>(v11, &unk_804B290, HIDWORD(v10));
    v12 = std::ostream::operator<<(HIDWORD(v9));
    std::operator<<<std::char_traits<char>>(v12, &unk_804B290, HIDWORD(v9));
    v14 = std::ostream::operator<<(v13);
    std::ostream::operator<<(v14, (const char *)&std::endl<char,std::char_traits<char>>, HIDWORD(v8));
    for ( ll = 1061109567LL; ll; ll /= 2LL )
    {
      while ( 1 )
      {
        LODWORD(v15) = mf_update(v36, v34, ll);
        v33 = v15;
        if ( !v15 )
          break;
        v39 += v33;
      }
    }
    v16 = i + 1;
    std::operator<<<std::char_traits<char>>(&std::cout, "Case #", v23);
    v18 = std::ostream::operator<<(v17);
    v19 = std::operator<<<std::char_traits<char>>(v18, ": ", HIDWORD(v16));
    v20 = v39;
    v21 = std::ostream::operator<<(v19);
    std::ostream::operator<<(v21, (const char *)&std::endl<char,std::char_traits<char>>, HIDWORD(v20));
  }
  return 0;
}
// 80488C0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD, _DWORD);
// 8048900: using guessed type int __fastcall std::ostream::operator<<(_DWORD);
// 8048910: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 8048940: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);

//----- (08049A17) --------------------------------------------------------
void __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
    *(long double *)&PI = std::acos(-1.0);
  }
}
// 8048840: using guessed type int __cxa_atexit(const char *, ...);
// 89D6B50: using guessed type _DWORD PI;

//----- (08049A7B) --------------------------------------------------------
void GLOBAL__sub_I_vis()
{
  __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08049A97) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08049A9F) --------------------------------------------------------
unsigned int __cdecl std::__deque_buf_size(unsigned int a1)
{
  unsigned int result; // eax@2

  if ( a1 > 0x1FF )
    result = 1;
  else
    result = 0x200 / a1;
  return result;
}

//----- (08049AC1) --------------------------------------------------------
long double __cdecl std::acos(long double x)
{
  return acosl(x);
}

//----- (08049AE2) --------------------------------------------------------
void __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::~queue(int a1)
{
  std::deque<int,std::allocator<int>>::~deque(a1);
}

//----- (08049AF6) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1)
{
  return std::_Deque_base<int,std::allocator<int>>::_Deque_base(a1);
}

//----- (08049B0A) --------------------------------------------------------
void __cdecl std::deque<int,std::allocator<int>>::~deque(int a1)
{
  char v1; // [sp+10h] [bp-28h]@1
  char v2; // [sp+20h] [bp-18h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::deque<int,std::allocator<int>>::end((int)&v1, a1);
  std::deque<int,std::allocator<int>>::begin((int)&v2, a1);
  std::deque<int,std::allocator<int>>::_M_destroy_data();
  std::_Deque_base<int,std::allocator<int>>::~_Deque_base(a1);
}

//----- (08049B94) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::queue(int a1, int a2)
{
  return std::deque<int,std::allocator<int>>::deque(a1, a2);
}

//----- (08049BAE) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::push(int a1, int a2)
{
  return std::deque<int,std::allocator<int>>::push_back(a1, a2);
}

//----- (08049BC8) --------------------------------------------------------
bool __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::empty(int a1)
{
  return std::deque<int,std::allocator<int>>::empty(a1);
}

//----- (08049BDC) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::front(int a1)
{
  return std::deque<int,std::allocator<int>>::front(a1);
}

//----- (08049BF0) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::pop(int a1)
{
  return std::deque<int,std::allocator<int>>::pop_front(a1);
}

//----- (08049C03) --------------------------------------------------------
int __cdecl std::min<long long>(int a1, int a2)
{
  __int64 v2; // rcx@1
  __int64 v3; // rax@1
  int result; // eax@2

  LODWORD(v3) = *(_DWORD *)a1;
  HIDWORD(v2) = *(_DWORD *)(a2 + 4);
  HIDWORD(v3) = *(_DWORD *)(a1 + 4);
  LODWORD(v2) = *(_DWORD *)a2;
  if ( v2 >= v3 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049C2E) --------------------------------------------------------
void std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049C42) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1)
{
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(a1, 0);
}

//----- (08049C86) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::~_Deque_base(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(a1, *(void ***)(a1 + 20), *(_DWORD *)(a1 + 36) + 4);
    v1 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(a1, *(void **)a1);
  }
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl();
}

//----- (08049D00) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (08049D22) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (08049D44) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049D4C) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (08049D80) --------------------------------------------------------
void std::deque<int,std::allocator<int>>::_M_destroy_data()
{
  ;
}

//----- (08049D88) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1, int a2)
{
  unsigned int v2; // ebx@1
  int v3; // eax@1
  char v5; // [sp+30h] [bp-48h]@1
  char v6; // [sp+40h] [bp-38h]@1
  int v7; // [sp+50h] [bp-28h]@1
  int v8; // [sp+54h] [bp-24h]@1
  int v9; // [sp+58h] [bp-20h]@1
  int v10; // [sp+5Ch] [bp-1Ch]@1
  int v11; // [sp+60h] [bp-18h]@1
  int v12; // [sp+64h] [bp-14h]@1
  int v13; // [sp+68h] [bp-10h]@1
  int v14; // [sp+6Ch] [bp-Ch]@1

  v2 = std::deque<int,std::allocator<int>>::size(a2);
  v3 = std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  std::_Deque_base<int,std::allocator<int>>::_Deque_base(a1, v3, v2);
  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v6, a1 + 8);
  std::deque<int,std::allocator<int>>::end((int)&v7, a2);
  std::deque<int,std::allocator<int>>::begin((int)&v11, a2);
  return std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>(
           (int)&v5,
           v11,
           v12,
           v13,
           v14,
           v7,
           v8,
           v9,
           v10,
           (int)&v6);
}

//----- (08049E76) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 32) - 4 )
  {
    result = std::deque<int,std::allocator<int>>::_M_push_back_aux(a1, a2);
  }
  else
  {
    __gnu_cxx::new_allocator<int>::construct(a1, *(void **)(a1 + 24), a2);
    result = a1;
    *(_DWORD *)(a1 + 24) += 4;
  }
  return result;
}

//----- (08049ED0) --------------------------------------------------------
bool __cdecl std::deque<int,std::allocator<int>>::empty(int a1)
{
  return std::operator==<int,int &,int *>(a1 + 24, a1 + 8);
}

//----- (08049EF0) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::front(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1

  std::deque<int,std::allocator<int>>::begin((int)&v2, a1);
  return std::_Deque_iterator<int,int &,int *>::operator*((int)&v2);
}

//----- (08049F18) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::pop_front(int a1)
{
  int v1; // ST04_4@2
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 8) == *(_DWORD *)(a1 + 16) - 4 )
  {
    result = std::deque<int,std::allocator<int>>::_M_pop_front_aux(a1);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 8);
    __gnu_cxx::new_allocator<int>::destroy();
    result = a1;
    *(_DWORD *)(a1 + 8) += 4;
  }
  return result;
}

//----- (08049F64) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 24);
}

//----- (08049FA6) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049FBA) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(int a1, unsigned int a2)
{
  unsigned int v2; // eax@1
  int v3; // ebx@1
  unsigned int v4; // edx@1
  int result; // eax@1
  unsigned int v6; // [sp+1Ch] [bp-2Ch]@1
  int v7; // [sp+20h] [bp-28h]@1
  unsigned int v8; // [sp+24h] [bp-24h]@1
  unsigned int v9; // [sp+28h] [bp-20h]@1
  unsigned int v10; // [sp+2Ch] [bp-1Ch]@1

  v2 = std::__deque_buf_size(4u);
  v10 = a2 / v2 + 1;
  v6 = a2 / v2 + 3;
  v7 = 8;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)std::max<unsigned int>((int)&v7, (int)&v6);
  *(_DWORD *)a1 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(a1, *(_DWORD *)(a1 + 4));
  v9 = *(_DWORD *)a1 + 4 * ((*(_DWORD *)(a1 + 4) - v10) >> 1);
  v8 = 4 * v10 + v9;
  std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(a1, v9, v8);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, v9);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, v8 - 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 28);
  v4 = v3 + 4 * (a2 % std::__deque_buf_size(4u));
  result = a1;
  *(_DWORD *)(a1 + 24) = v4;
  return result;
}

//----- (0804A126) --------------------------------------------------------
void **__cdecl std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3)
{
  void **result; // eax@3
  void **i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; ++i )
  {
    result = i;
    if ( (unsigned int)i >= a3 )
      break;
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(a1, *i);
  }
  return result;
}

//----- (0804A156) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(int a1, void *a2)
{
  int v2; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator((int)&v2, a1);
  __gnu_cxx::new_allocator<int *>::deallocate((int)&v2, a2);
  std::allocator<int *>::~allocator();
}

//----- (0804A198) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A1A0) --------------------------------------------------------
unsigned int __cdecl std::deque<int,std::allocator<int>>::size(int a1)
{
  return std::operator-<int,int &,int *>(a1 + 24, a1 + 8);
}

//----- (0804A1C0) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1, int a2, unsigned int a3)
{
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(a1, a3);
}

//----- (0804A20A) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (0804A22C) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (0804A24E) --------------------------------------------------------
int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804A2C4) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804A2EA) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_push_back_aux(int a1, int a2)
{
  int v2; // ebx@1
  int result; // eax@1

  std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(a1, 1);
  v2 = *(_DWORD *)(a1 + 36) + 4;
  *(_DWORD *)v2 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(a1);
  __gnu_cxx::new_allocator<int>::construct(a1, *(void **)(a1 + 24), a2);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, *(_DWORD *)(a1 + 36) + 4);
  result = a1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
  return result;
}

//----- (0804A39D) --------------------------------------------------------
bool __cdecl std::operator==<int,int &,int *>(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (0804A3B2) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A3BC) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804A3C2) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_pop_front_aux(int a1)
{
  int v1; // ST04_4@1
  int result; // eax@1

  v1 = *(_DWORD *)(a1 + 8);
  __gnu_cxx::new_allocator<int>::destroy();
  std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(a1, *(void **)(a1 + 12));
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, *(_DWORD *)(a1 + 20) + 4);
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return result;
}

//----- (0804A41C) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A430) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1)
{
  int result; // eax@1

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = a1;
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

//----- (0804A45C) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804A461) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804A47C) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(int a1, unsigned int a2)
{
  int v2; // ebx@1
  char v4; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator((int)&v4, a1);
  v2 = __gnu_cxx::new_allocator<int *>::allocate((int)&v4, a2);
  std::allocator<int *>::~allocator();
  return v2;
}

//----- (0804A4E0) --------------------------------------------------------
unsigned int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3)
{
  unsigned int result; // eax@3
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; i += 4 )
  {
    result = i;
    if ( i >= a3 )
      break;
    *(_DWORD *)i = std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(a1);
  }
  return result;
}

//----- (0804A54A) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 4 * std::_Deque_iterator<int,int &,int *>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804A582) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(int a1, void *a2)
{
  std::__deque_buf_size(4u);
  __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804A5AC) --------------------------------------------------------
int __userpurge std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator@<eax>(int a1, int a2)
{
  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  std::allocator<int *>::allocator<int>();
  return a1;
}

//----- (0804A5D4) --------------------------------------------------------
void std::allocator<int *>::~allocator()
{
  __gnu_cxx::new_allocator<int *>::~new_allocator();
}

//----- (0804A5E8) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int *>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A5FB) --------------------------------------------------------
unsigned int __cdecl std::operator-<int,int &,int *>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<int,int &,int *>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 2)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 2);
}

//----- (0804A650) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 24);
}

//----- (0804A69A) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (0804A6CD) --------------------------------------------------------
int __userpurge std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804A744) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(int a1, int a2)
{
  int result; // eax@1

  result = *(_DWORD *)(a1 + 4) - ((*(_DWORD *)(a1 + 36) - *(_DWORD *)a1) >> 2);
  if ( a2 + 1 > (unsigned int)result )
    result = std::deque<int,std::allocator<int>>::_M_reallocate_map(a1, a2, 0);
  return result;
}

//----- (0804A794) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(int a1)
{
  unsigned int v1; // eax@1

  v1 = std::__deque_buf_size(4u);
  return __gnu_cxx::new_allocator<int>::allocate(a1, v1);
}

//----- (0804A7C0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804A7C6) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int *>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int *>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804A7F6) --------------------------------------------------------
unsigned int std::_Deque_iterator<int,int &,int *>::_S_buffer_size()
{
  return std::__deque_buf_size(4u);
}

//----- (0804A80A) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A81E) --------------------------------------------------------
void std::allocator<int *>::allocator<int>()
{
  __gnu_cxx::new_allocator<int *>::new_allocator();
}

//----- (0804A832) --------------------------------------------------------
void __gnu_cxx::new_allocator<int *>::~new_allocator()
{
  ;
}

//----- (0804A838) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A852) --------------------------------------------------------
int __userpurge std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804A8C8) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_reallocate_map(int a1, int a2, char a3)
{
  int v3; // eax@3
  int v4; // ebx@8
  int v5; // eax@9
  int v6; // ST08_4@11
  char v8; // [sp+Ch] [bp-2Ch]@1
  int v9; // [sp+1Ch] [bp-1Ch]@8
  unsigned int v10; // [sp+20h] [bp-18h]@8
  int v11; // [sp+24h] [bp-14h]@1
  int v12; // [sp+28h] [bp-10h]@1
  int v13; // [sp+2Ch] [bp-Ch]@5

  v8 = a3;
  v12 = ((*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 20)) >> 2) + 1;
  v11 = a2 + v12;
  if ( *(_DWORD *)(a1 + 4) <= (unsigned int)(2 * (a2 + v12)) )
  {
    v4 = *(_DWORD *)(a1 + 4);
    v10 = v4 + *(_DWORD *)std::max<unsigned int>(a1 + 4, (int)&a2) + 2;
    v9 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(a1, v10);
    if ( v8 )
      v5 = 4 * a2;
    else
      v5 = 0;
    v13 = v5 + 4 * ((v10 - v11) >> 1) + v9;
    std::copy<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
    v6 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(a1, *(void **)a1);
    *(_DWORD *)a1 = v9;
    *(_DWORD *)(a1 + 4) = v10;
  }
  else
  {
    if ( a3 )
      v3 = 4 * a2;
    else
      v3 = 0;
    v13 = *(_DWORD *)a1 + 4 * ((unsigned int)(*(_DWORD *)(a1 + 4) - v11) >> 1) + v3;
    if ( *(_DWORD *)(a1 + 20) <= (unsigned int)v13 )
      std::copy_backward<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, 4 * v12 + v13);
    else
      std::copy<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
  }
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, v13);
  return std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, v13 + 4 * (v12 + 0x3FFFFFFF));
}

//----- (0804AAA0) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804AAD0) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int *>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804AADA) --------------------------------------------------------
void __gnu_cxx::new_allocator<int *>::new_allocator()
{
  ;
}

//----- (0804AAE0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804AAE5) --------------------------------------------------------
int __userpurge std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-38h]@1
  int v12; // [sp+40h] [bp-28h]@1
  int v13; // [sp+44h] [bp-24h]@1
  int v14; // [sp+48h] [bp-20h]@1
  int v15; // [sp+4Ch] [bp-1Ch]@1
  int v16; // [sp+50h] [bp-18h]@1
  int v17; // [sp+54h] [bp-14h]@1
  int v18; // [sp+58h] [bp-10h]@1
  int v19; // [sp+5Ch] [bp-Ch]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v12, a6, a7, a8, a9);
  std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v16, a2, a3, a4, a5);
  std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    v16,
    v17,
    v18,
    v19,
    v12,
    v13,
    v14,
    v15,
    (int)&v11);
  return a1;
}

//----- (0804ABAF) --------------------------------------------------------
char *__cdecl std::copy<int **,int **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int **>(a2);
  v4 = std::__miter_base<int **>(a1);
  return std::__copy_move_a2<false,int **,int **>(v4, v3, a3);
}

//----- (0804ABE7) --------------------------------------------------------
int __cdecl std::copy_backward<int **,int **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int **>(a2);
  v4 = std::__miter_base<int **>(a1);
  return std::__copy_move_backward_a2<false,int **,int **>(v4, v3, a3);
}

//----- (0804AC20) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804AC2A) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base(a1, a2, a3, a4, a5);
  return a1;
}

//----- (0804AC61) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-48h]@1
  char v12; // [sp+40h] [bp-38h]@1
  int v13; // [sp+50h] [bp-28h]@1
  int v14; // [sp+54h] [bp-24h]@1
  int v15; // [sp+58h] [bp-20h]@1
  int v16; // [sp+5Ch] [bp-1Ch]@1
  int v17; // [sp+60h] [bp-18h]@1
  int v18; // [sp+64h] [bp-14h]@1
  int v19; // [sp+68h] [bp-10h]@1
  int v20; // [sp+6Ch] [bp-Ch]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v12, a10);
  std::__niter_base<std::_Deque_iterator<int,int &,int *>>((int)&v11, (int)&v12);
  std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v13, a6, a7, a8, a9);
  std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v17, a2, a3, a4, a5);
  std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    v17,
    v18,
    v19,
    v20,
    v13,
    v14,
    v15,
    v16,
    (int)&v11);
  return a1;
}

//----- (0804AD42) --------------------------------------------------------
int __cdecl std::__miter_base<int **>(int a1)
{
  return std::_Iter_base<int **,false>::_S_base(a1);
}

//----- (0804AD55) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int **,int **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int **>(a3);
  v4 = std::__niter_base<int **>(a2);
  v5 = std::__niter_base<int **>(a1);
  return std::__copy_move_a<false,int **,int **>((void *)v5, v4, (void *)v3);
}

//----- (0804AD99) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int **,int **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int **>(a3);
  v4 = std::__niter_base<int **>(a2);
  v5 = std::__niter_base<int **>(a1);
  return std::__copy_move_backward_a<false,int **,int **>((void *)v5, v4, v3);
}

//----- (0804ADDD) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

//----- (0804AE01) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base(a1, a2, a3, a4, a5);
  return a1;
}

//----- (0804AE38) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2)
{
  char v3; // [sp+10h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v3, a2);
  std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base(a1, (int)&v3);
  return a1;
}

//----- (0804AE6C) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+3Ch] [bp-1Ch]@1
  char v12; // [sp+4Fh] [bp-9h]@1

  v12 = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804AEE6) --------------------------------------------------------
int __cdecl std::_Iter_base<int **,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AEEE) --------------------------------------------------------
int __cdecl std::__niter_base<int **>(int a1)
{
  return std::_Iter_base<int **,false>::_S_base(a1);
}

//----- (0804AF01) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int **,int **>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(src, a2, dest);
}

//----- (0804AF26) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int **,int **>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(src, a2, a3);
}

//----- (0804AF4B) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2);
  return a1;
}

//----- (0804AF6A) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  int v10; // ebx@2
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = std::operator-<int,int const&,int const*>((int)&a6, (int)&a2); (signed int)i > 0; --i )
  {
    v10 = std::_Deque_iterator<int,int &,int *>::operator*(a10);
    *(_DWORD *)v10 = *(_DWORD *)std::_Deque_iterator<int,int const&,int const*>::operator*((int)&a2);
    std::_Deque_iterator<int,int const&,int const*>::operator++((int)&a2);
    std::_Deque_iterator<int,int &,int *>::operator++(a10);
  }
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a10);
  return a1;
}

//----- (0804AFE0) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804B029) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804B07E) --------------------------------------------------------
unsigned int __cdecl std::operator-<int,int const&,int const*>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 2)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 2);
}

//----- (0804B0D4) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804B0DE) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<int,int const&,int const*>::_M_set_node(a1, *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (0804B128) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<int,int &,int *>::_M_set_node(a1, *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (0804B172) --------------------------------------------------------
unsigned int std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size()
{
  return std::__deque_buf_size(4u);
}

//----- (0804B186) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 4 * std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804B1C0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804B1D0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804B22A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804B230) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804D004;
  v3 = (void (__cdecl *)())off_804D004;
  if ( off_804D004 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804D004: using guessed type int (*off_804D004)();

//----- (0804B258) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 116 function(s)"
