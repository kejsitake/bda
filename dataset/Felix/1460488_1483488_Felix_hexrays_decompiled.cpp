/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __stdcall std::istream::operator>>(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
signed int __cdecl digits(int a1);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_p10();
int __cdecl std::__lg(int a1);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl back_to_front(int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, int a2);
// int __userpurge std::unique<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
void __cdecl std::vector<int,std::allocator<int>>::resize(int a1, unsigned int a2, char a3);
// int __userpurge std::upper_bound<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(char a1, int a2, int a3);
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
// int __userpurge std::adjacent_find<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3);
bool __cdecl __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
void __cdecl std::vector<int,std::allocator<int>>::insert(int a1, char a2, unsigned int a3, int a4);
int __cdecl std::vector<int,std::allocator<int>>::_M_erase_at_end(int a1, int a2);
int __cdecl std::distance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
int __cdecl std::advance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<int>::~allocator();
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3);
// int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3);
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
void __cdecl std::vector<int,std::allocator<int>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4);
int __stdcall std::__iterator_category<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1);
int __cdecl std::__distance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
int __cdecl std::__advance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(int a1, char a2);
void std::allocator<int>::allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::destroy();
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3);
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3);
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3);
// int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4);
// int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1);
char *__cdecl std::__uninitialized_move_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
int __cdecl std::fill<int *,int>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+=(int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
bool __cdecl __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--(int a1);
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
int __cdecl std::__fill_a<int *,int>(int a1, int a2, int a3);
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4);
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4);
int __cdecl std::swap<int>(int a1, int a2);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
void std::allocator<int>::allocator();
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
void __gnu_cxx::new_allocator<int>::new_allocator();
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804E78C)() = &GLOBAL__sub_I_p10; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
int p10[]; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080487A8) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048820: using guessed type int __gmon_start__(void);

//----- (08048930) --------------------------------------------------------
#error "8048933: positive sp value has been found (funcsize=2)"

//----- (08048960) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048960: could not find valid save-restore pair for ebp

//----- (08048990) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048990: could not find valid save-restore pair for ebp

//----- (080489D0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804E794: using guessed type int _DTOR_LIST__[];
// 804EA2C: using guessed type char completed_3328;
// 804EA30: using guessed type int dtor_idx_3330;

//----- (08048A20) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048A20: could not find valid save-restore pair for ebp

//----- (08048A50) --------------------------------------------------------
signed int __cdecl digits(int a1)
{
  signed int v2; // [sp+Ch] [bp-4h]@1

  v2 = 1;
  while ( a1 > 9 )
  {
    ++v2;
    a1 /= 10;
  }
  return v2;
}

//----- (08048A88) --------------------------------------------------------
#error "8048CF1: call analysis failed (funcsize=258)"

//----- (08048EA1) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048810: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048EE0) --------------------------------------------------------
int GLOBAL__sub_I_p10()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048EFC) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048F14) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048F1C) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08048F21) --------------------------------------------------------
int __cdecl back_to_front(int a1, int a2)
{
  int v2; // ebx@1

  v2 = a1 % p10[a2];
  return p10[digits(a1) - a2] * v2 + a1 / p10[a2];
}
// 804EA40: using guessed type int p10[];

//----- (08048F76) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (08048F8A) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08048FE2) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (08048FF6) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (0804900A) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (08049062) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (080490BA) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (080490D2) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (08049146) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (08049166) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049188) --------------------------------------------------------
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, int a2)
{
  bool result; // al@1
  int v3; // eax@2
  int v4; // eax@2

  result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&a1, (int)&a2);
  if ( result )
  {
    v3 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
    v4 = std::__lg(v3);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(a1, a2, 2 * v4);
    result = std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (080491EA) --------------------------------------------------------
int __userpurge std::unique<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3)
{
  int v3; // ebx@4
  int v4; // eax@5
  int v5; // ebx@5
  int v6; // eax@6
  int v8; // [sp+Ch] [bp-1Ch]@1
  int v9; // [sp+1Ch] [bp-Ch]@3

  std::adjacent_find<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v8, a2, a3);
  a2 = v8;
  if ( __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a3) )
  {
    *(_DWORD *)a1 = a3;
  }
  else
  {
    v9 = a2;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
    while ( 1 )
    {
      v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
      if ( !__gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(v6, (int)&a3) )
        break;
      v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
      if ( v3 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2) )
      {
        v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v9);
        v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(v4);
        *(_DWORD *)v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      }
    }
    *(_DWORD *)a1 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v9);
  }
  return a1;
}

//----- (080492D4) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (08049304) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::resize(int a1, unsigned int a2, char a3)
{
  unsigned int v3; // ebx@2
  int v4; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<int,std::allocator<int>>::size(a1) < a2 )
  {
    v3 = a2 - std::vector<int,std::allocator<int>>::size(a1);
    std::vector<int,std::allocator<int>>::end((int)&v4, a1);
    std::vector<int,std::allocator<int>>::insert(a1, v4, v3, (int)&a3);
  }
  else if ( std::vector<int,std::allocator<int>>::size(a1) > a2 )
  {
    std::vector<int,std::allocator<int>>::_M_erase_at_end(a1, 4 * a2 + *(_DWORD *)a1);
  }
}

//----- (0804939C) --------------------------------------------------------
int __userpurge std::upper_bound<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // ebx@2
  int v6; // [sp+14h] [bp-14h]@2
  int v7; // [sp+18h] [bp-10h]@2
  int v8; // [sp+1Ch] [bp-Ch]@1

  v8 = std::distance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2, a3);
  while ( v8 > 0 )
  {
    v7 = v8 >> 1;
    v6 = a2;
    std::advance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>((int)&v6, v8 >> 1);
    v4 = *(_DWORD *)a4;
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v6) )
    {
      v8 = v7;
    }
    else
    {
      a2 = v6;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
      v8 = v8 - v7 - 1;
    }
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (08049440) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049454) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049468) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (080494C8) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080494D0) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (080494EA) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (080494F0) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (080494F6) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (0804950A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (08049554) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (080495D6) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049614) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804961C) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (08049636) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (08049658) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (080498F6) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049905) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (08049931) --------------------------------------------------------
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(char a1, int a2, int a3)
{
  bool result; // al@3
  int v4; // [sp+1Ch] [bp-Ch]@4

  while ( 1 )
  {
    result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 16;
    if ( !result )
      break;
    if ( !a3 )
      return std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a2);
    --a3;
    std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      (int)&v4,
      a1,
      a2);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (080499C0) --------------------------------------------------------
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@2
  int v3; // [sp+10h] [bp-18h]@2
  int v4; // [sp+14h] [bp-14h]@2
  int v5; // [sp+18h] [bp-10h]@2
  int v6; // [sp+1Ch] [bp-Ch]@2

  if ( __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 16 )
  {
    v3 = 16;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v4, (int)&a1, (int)&v3);
    std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, v4);
    v5 = 16;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v6, (int)&a1, (int)&v5);
    result = std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
               v6,
               a2);
  }
  else
  {
    result = std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
  }
  return result;
}

//----- (08049A78) --------------------------------------------------------
int __userpurge std::adjacent_find<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3)
{
  int v3; // ebx@4
  int v4; // eax@7
  int i; // [sp+1Ch] [bp-Ch]@3

  if ( __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a3) )
  {
    *(_DWORD *)a1 = a3;
  }
  else
  {
    for ( i = a2; ; a2 = i )
    {
      v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i);
      if ( !__gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(v4, (int)&a3) )
        break;
      v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( v3 == *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&i) )
      {
        *(_DWORD *)a1 = a2;
        return a1;
      }
    }
    *(_DWORD *)a1 = a3;
  }
  return a1;
}

//----- (08049B15) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (08049B42) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (08049B58) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (08049B62) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (08049B6A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (08049B84) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::insert(int a1, char a2, unsigned int a3, int a4)
{
  std::vector<int,std::allocator<int>>::_M_fill_insert(a1, a2, a3, a4);
}

//----- (08049BAC) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_erase_at_end(int a1, int a2)
{
  int v2; // ST04_4@1
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v2 = *(_DWORD *)(a1 + 4);
  std::_Destroy<int *,int>();
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (08049BE1) --------------------------------------------------------
int __cdecl std::distance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  char v3; // [sp+Fh] [bp-19h]@1

  std::__iterator_category<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v3);
  return std::__distance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
}

//----- (08049C22) --------------------------------------------------------
int __cdecl std::advance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(int a1, int a2)
{
  char v3; // [sp+Fh] [bp-19h]@1
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = a2;
  std::__iterator_category<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v3);
  return std::__advance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(a1, v4);
}

//----- (08049C6A) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049C9A) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049CAE) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (08049CD5) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049CF0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049D28) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (08049D6C) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (08049D93) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (08049DB4) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (08049DCE) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (08049DF4) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (08049E2C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (08049ED0) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (08049EFF) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (08049F27) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (08049F41) --------------------------------------------------------
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3)
{
  std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a3);
  return std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
}

//----- (08049F74) --------------------------------------------------------
int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3)
{
  int v3; // ebx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+20h] [bp-18h]@1
  int v8; // [sp+24h] [bp-14h]@1
  int v9; // [sp+28h] [bp-10h]@1
  int v10; // [sp+2Ch] [bp-Ch]@1

  v6 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a3, (int)&a2) / 2;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v5, (int)&a2, (int)&v6);
  v7 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-((int)&v8, (int)&a3, (int)&v7);
  std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2, v5, v8);
  v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
  v9 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a2, (int)&v9);
  std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(
    a1,
    v10,
    a3,
    v3);
  return a1;
}

//----- (0804A058) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804A089) --------------------------------------------------------
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@1
  int v3; // ebx@3
  int v4; // eax@4
  int v5; // [sp+18h] [bp-20h]@2
  int v6; // [sp+1Ch] [bp-1Ch]@2
  char v7; // [sp+20h] [bp-18h]@4
  int v8; // [sp+24h] [bp-14h]@4
  int v9; // [sp+28h] [bp-10h]@4
  int v10; // [sp+2Ch] [bp-Ch]@4

  result = __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>((int)&a1, (int)&a2);
  if ( !result )
  {
    v6 = 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v5, (int)&a1, (int)&v6);
    while ( 1 )
    {
      result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v5, (int)&a2);
      if ( !result )
        break;
      v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v5);
      if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1) )
      {
        v10 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v5);
        v8 = 1;
        __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+(
          (int)&v9,
          (int)&v5,
          (int)&v8);
        std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
          (int)&v7,
          a1,
          v5,
          v9);
        v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
        *(_DWORD *)v4 = v10;
      }
      else
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(v5);
      }
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v5);
    }
  }
  return result;
}

//----- (0804A19F) --------------------------------------------------------
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&i, (int)&a2);
    if ( !result )
      break;
    std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(i);
  }
  return result;
}

//----- (0804A1E6) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::_M_fill_insert(int a1, char a2, unsigned int a3, int a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@6
  char *v13; // eax@6
  int v14; // esi@6
  int v15; // eax@6
  int v16; // ST04_4@6
  int v17; // ST00_4@6
  int v18; // ST08_4@6
  int v19; // [sp+1Ch] [bp-2Ch]@3
  char v20; // [sp+20h] [bp-28h]@3
  char v21; // [sp+24h] [bp-24h]@6
  void *v22; // [sp+28h] [bp-20h]@6
  int v23; // [sp+2Ch] [bp-1Ch]@6
  int v24; // [sp+30h] [bp-18h]@6
  int v25; // [sp+34h] [bp-14h]@3
  int v26; // [sp+38h] [bp-10h]@3
  void *v27; // [sp+3Ch] [bp-Ch]@6

  if ( a3 )
  {
    if ( (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2 < a3 )
    {
      v24 = std::vector<int,std::allocator<int>>::_M_check_len(a1, a3, "vector::_M_fill_insert");
      std::vector<int,std::allocator<int>>::begin((int)&v21, a1);
      v23 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v21);
      v22 = (void *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v24);
      v27 = v22;
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<int *,unsigned int,int,int>((int)((char *)v22 + 4 * v23), a3, a4);
      v27 = 0;
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
              *(_DWORD *)a1,
              *(_DWORD *)v12,
              (int)v22);
      v27 = &v13[4 * a3];
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
      v27 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v15, v14, (int)v27);
      std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
      v16 = *(_DWORD *)(a1 + 4);
      v17 = *(_DWORD *)a1;
      std::_Destroy<int *,int>();
      v18 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v22;
      *(_DWORD *)(a1 + 4) = v27;
      *(_DWORD *)(a1 + 8) = (char *)v22 + 4 * v24;
    }
    else
    {
      v19 = *(_DWORD *)a4;
      std::vector<int,std::allocator<int>>::end((int)&v20, a1);
      v26 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&v20, (int)&a2);
      v25 = *(_DWORD *)(a1 + 4);
      if ( v26 <= a3 )
      {
        std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)(a1 + 4), a3 - v26, (int)&v19);
        *(_DWORD *)(a1 + 4) += 4 * (a3 - v26);
        std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::__uninitialized_move_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v25, v9);
        *(_DWORD *)(a1 + 4) += 4 * v26;
        v11 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::fill<int *,int>(*(_DWORD *)v11, v25, (int)&v19);
      }
      else
      {
        std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<int *,int *,std::allocator<int>>(
          -4 * a3 + *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 4 * a3;
        v4 = -4 * a3 + v25;
        v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v25);
        v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 4 * a3;
        v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
        std::fill<int *,int>(*(_DWORD *)v8, v7, (int)&v19);
      }
    }
  }
}

//----- (0804A624) --------------------------------------------------------
int __stdcall std::__iterator_category<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1)
{
  return a1;
}

//----- (0804A62F) --------------------------------------------------------
int __cdecl std::__distance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  return __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
}

//----- (0804A649) --------------------------------------------------------
int __cdecl std::__advance<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(int a1, char a2)
{
  return __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+=(a1, (int)&a2);
}

//----- (0804A664) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A678) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804A67E) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A691) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804A696) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804A6B0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A6E0) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A6F3) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A714) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804A73D) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804A750) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804A794) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804A7AF) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804A7CA) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804A7FA) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804A81C) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804A821) --------------------------------------------------------
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3)
{
  int v3; // ebx@2
  bool result; // al@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
  for ( i = a2; ; __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>((int)&i, (int)&a3);
    if ( !result )
      break;
    v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&i);
    if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1) )
      std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, i);
  }
  return result;
}

//----- (0804A8AF) --------------------------------------------------------
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  bool result; // al@3

  while ( 1 )
  {
    result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 1;
    if ( !result )
      break;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a2);
    std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a2);
  }
  return result;
}

//----- (0804A8FA) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804A92D) --------------------------------------------------------
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3)
{
  int v3; // ebx@1
  int v4; // ebx@2
  char result; // al@3
  int v6; // ebx@4
  int v7; // ebx@6
  int v8; // ebx@7

  v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2) )
  {
    v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
    {
      result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                 a1,
                 a2);
    }
    else
    {
      v6 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
      result = v6 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
      if ( result )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a3);
    }
  }
  else
  {
    v7 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
    result = v7 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
    if ( !result )
    {
      v8 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( v8 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a3);
      else
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a2);
    }
  }
  return result;
}

//----- (0804AA40) --------------------------------------------------------
int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@3
  int v5; // ebx@6

  while ( 1 )
  {
    while ( 1 )
    {
      v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( *(_DWORD *)v4 >= *(_DWORD *)a4 )
        break;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
    }
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a3);
    while ( 1 )
    {
      v5 = *(_DWORD *)a4;
      if ( v5 >= *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
        break;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a3);
    }
    if ( !__gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a3) )
      break;
    std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      a2,
      a3);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804AAF3) --------------------------------------------------------
int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804AB4D) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1)
{
  int v1; // ebx@2
  int v2; // eax@3
  int result; // eax@4
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  v4 = a1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&v4);
  while ( 1 )
  {
    v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
    if ( *(_DWORD *)v2 <= v5 )
      break;
    v1 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
    *(_DWORD *)v1 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
    a1 = v4;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&v4);
  }
  result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  *(_DWORD *)result = v5;
  return result;
}

//----- (0804ABD1) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804ABF9) --------------------------------------------------------
int __cdecl std::fill<int *,int>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<int *>(a2);
  v4 = std::__niter_base<int *>(a1);
  return std::__fill_a<int *,int>(v4, v3, a3);
}

//----- (0804AC31) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804AC52) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+=(int a1, int a2)
{
  *(_DWORD *)a1 += 4 * *(_DWORD *)a2;
  return a1;
}

//----- (0804AC6E) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804AC74) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804AC7A) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804ACB0) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804AD1E) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804AD26) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804AD39) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AD41) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804AD54) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804AD79) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804AD8C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804AD94) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804AD9E) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804ADBF) --------------------------------------------------------
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  char result; // al@1
  int i; // [sp+10h] [bp-18h]@2
  char v4; // [sp+14h] [bp-14h]@3
  int v5; // [sp+18h] [bp-10h]@3
  int v6; // [sp+1Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) <= 1;
  if ( !result )
  {
    v6 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
    for ( i = (v6 - 2) / 2; ; --i )
    {
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v4, (int)&a1, (int)&i);
      v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
      std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
        a1,
        i,
        v6,
        v5);
      result = i;
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (0804AE75) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  unsigned int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804AEA1) --------------------------------------------------------
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3)
{
  int v3; // ST1C_4@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
  v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
  *(_DWORD *)v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  v5 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
  return std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
           a1,
           0,
           v5,
           v3);
}

//----- (0804AF0A) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 4;
  return a1;
}

//----- (0804AF1F) --------------------------------------------------------
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  return std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
           a1,
           a2);
}

//----- (0804AF39) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804AF5B) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_backward_a<false,int *,int *>((void *)v6, v5, v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804AFB9) --------------------------------------------------------
int __cdecl std::__fill_a<int *,int>(int a1, int a2, int a3)
{
  int result; // eax@3
  int v4; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    *(_DWORD *)a1 = v4;
    a1 += 4;
  }
  return result;
}

//----- (0804AFDF) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804B000) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804B00A) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804B05F) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804B0B4) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804B0D5) --------------------------------------------------------
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4)
{
  int v4; // ebx@2
  int v5; // ebx@4
  int v6; // ebx@8
  int i; // [sp+18h] [bp-40h]@1
  char v9; // [sp+1Ch] [bp-3Ch]@2
  char v10; // [sp+20h] [bp-38h]@2
  int v11; // [sp+24h] [bp-34h]@2
  char v12; // [sp+28h] [bp-30h]@4
  char v13; // [sp+2Ch] [bp-2Ch]@4
  char v14; // [sp+30h] [bp-28h]@8
  char v15; // [sp+34h] [bp-24h]@8
  int v16; // [sp+38h] [bp-20h]@8
  int v17; // [sp+3Ch] [bp-1Ch]@1

  v17 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v9, (int)&a1, (int)&i);
    v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
    v11 = i - 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a1, (int)&v11);
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10) )
      --i;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v12, (int)&a1, (int)&a2);
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v12);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v13, (int)&a1, (int)&i);
    *(_DWORD *)v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v13);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v14, (int)&a1, (int)&a2);
    v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v14);
    v16 = i - 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v15, (int)&a1, (int)&v16);
    *(_DWORD *)v6 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v15);
    a2 = i - 1;
  }
  return std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
           a1,
           a2,
           v17,
           a4);
}

//----- (0804B28E) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  int v2; // ebx@1
  int v3; // eax@1

  v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
  v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  return std::swap<int>(v3, v2);
}

//----- (0804B2BF) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804B2D1) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804B2E4) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804B306) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804B3BD) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804B3F5) --------------------------------------------------------
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4)
{
  int v4; // ebx@2
  int v5; // eax@4
  bool v6; // al@5
  int result; // eax@8
  int i; // [sp+1Ch] [bp-2Ch]@1
  char v9; // [sp+20h] [bp-28h]@2
  char v10; // [sp+24h] [bp-24h]@2
  char v11; // [sp+28h] [bp-20h]@4
  char v12; // [sp+2Ch] [bp-1Ch]@8

  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v6 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v11, (int)&a1, (int)&i);
      v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v11);
      if ( *(_DWORD *)v5 < a4 )
        v6 = 1;
    }
    if ( !v6 )
      break;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v9, (int)&a1, (int)&a2);
    v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a1, (int)&i);
    *(_DWORD *)v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10);
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v12, (int)&a1, (int)&a2);
  result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v12);
  *(_DWORD *)result = a4;
  return result;
}

//----- (0804B4F8) --------------------------------------------------------
int __cdecl std::swap<int>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (0804B51A) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804B52F) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804B558) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804B560) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (0804B5AA) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804B5D2) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804B5FA) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B61B) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804B65F) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804B690) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B6C8) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804B706) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B715) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B736) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804B75C) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804B776) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804B797) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804B7E0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804B7E5) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804B830) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804B852) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804B896) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804B8A8) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804B8BB) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804B8E0) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804B8F6) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804B900) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804B910) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804B96A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804B970) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804E78C;
  v3 = (void (__cdecl *)())off_804E78C;
  if ( off_804E78C != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804E78C: using guessed type int (*off_804E78C)();

//----- (0804B998) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 2 decompilation failure(s) on 175 function(s)"
