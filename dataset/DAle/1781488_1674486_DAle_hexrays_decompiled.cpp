/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cdecl std::ostream::operator<<(_DWORD, _DWORD); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl std::ios_base::sync_with_stdio(std::ios_base *this, bool); idb
// int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD); weak
// int __cdecl std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(_DWORD); weak
// int __cdecl std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int __cdecl std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(_DWORD, _DWORD, _DWORD); weak
// int std::ostream::operator<<(_DWORD, const char *, ...); weak
// int __cdecl std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(_DWORD); weak
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::operator|(__int64 a1);
unsigned int __cdecl std::__deque_buf_size(unsigned int a1);
void __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::~queue(int a1);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3);
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1);
void __cdecl std::deque<int,std::allocator<int>>::~deque(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::queue(int a1, int a2);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::push(int a1, int a2);
bool __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::empty(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::front(int a1);
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::pop(int a1);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3);
void std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl();
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1);
void __cdecl std::_Deque_base<int,std::allocator<int>>::~_Deque_base(int a1);
// int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1, int a2);
void std::deque<int,std::allocator<int>>::_M_destroy_data();
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1, int a2);
int __cdecl std::deque<int,std::allocator<int>>::push_back(int a1, int a2);
bool __cdecl std::deque<int,std::allocator<int>>::empty(int a1);
int __cdecl std::deque<int,std::allocator<int>>::front(int a1);
int __cdecl std::deque<int,std::allocator<int>>::pop_front(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(int a1, unsigned int a2);
void **__cdecl std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3);
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(int a1, void *a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
unsigned int __cdecl std::deque<int,std::allocator<int>>::size(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1, int a2, unsigned int a3);
// int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2);
// int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_push_back_aux(int a1, int a2);
bool __cdecl std::operator==<int,int &,int *>(int a1, int a2);
int __cdecl std::_Deque_iterator<int,int &,int *>::operator*(int a1);
void __gnu_cxx::new_allocator<int>::destroy();
int __cdecl std::deque<int,std::allocator<int>>::_M_pop_front_aux(int a1);
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
void std::allocator<int>::allocator();
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(int a1, unsigned int a2);
unsigned int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3);
int __cdecl std::_Deque_iterator<int,int &,int *>::_M_set_node(int a1, int a2);
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(int a1, void *a2);
// int __userpurge std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator@<eax>(int a1, int a2);
void std::allocator<int *>::~allocator();
void __cdecl __gnu_cxx::new_allocator<int *>::deallocate(int a1, void *a2);
unsigned int __cdecl std::operator-<int,int &,int *>(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(int a1, int a2);
// int __userpurge std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(int a1, int a2);
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(int a1);
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::new_allocator<int *>::allocate(int a1, unsigned int a2);
unsigned int std::_Deque_iterator<int,int &,int *>::_S_buffer_size();
void std::allocator<int *>::allocator<int>();
void __gnu_cxx::new_allocator<int *>::~new_allocator();
// int __userpurge std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<int,std::allocator<int>>::_M_reallocate_map(int a1, int a2, char a3);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<int *>::max_size();
void __gnu_cxx::new_allocator<int *>::new_allocator();
// int __userpurge std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
char *__cdecl std::copy<int **,int **>(int a1, int a2, int a3);
int __cdecl std::copy_backward<int **,int **>(int a1, int a2, int a3);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __cdecl std::__miter_base<int **>(int a1);
char *__cdecl std::__copy_move_a2<false,int **,int **>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward_a2<false,int **,int **>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5);
// int __userpurge std::__niter_base<std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
int __cdecl std::_Iter_base<int **,false>::_S_base(int a1);
int __cdecl std::__niter_base<int **>(int a1);
char *__cdecl std::__copy_move_a<false,int **,int **>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward_a<false,int **,int **>(void *src, int, int); // idb
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
// int __userpurge std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base@<eax>(int a1, int a2);
// int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
unsigned int __cdecl std::operator-<int,int const&,int const*>(int a1, int a2);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator*(int a1);
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator++(int a1);
int __cdecl std::_Deque_iterator<int,int &,int *>::operator++(int a1);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
unsigned int std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size();
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_M_set_node(int a1, int a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN std::endl<char,std::char_traits<char>>; weak
int _CTOR_LIST__ = 4294967295; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
char edata; // weak
_UNKNOWN unk_804F273; // weak
int dtor_idx_3330; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048840) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 80488A0: using guessed type int __gmon_start__(void);

//----- (080489E0) --------------------------------------------------------
#error "80489E3: positive sp value has been found (funcsize=2)"

//----- (08048A10) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804F273 - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804F273 - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048A10: could not find valid save-restore pair for ebp
// 804F270: using guessed type char edata;

//----- (08048A40) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048A40: could not find valid save-restore pair for ebp

//----- (08048A80) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804F114: using guessed type int _DTOR_LIST__[];
// 804F270: using guessed type char edata;
// 804F274: using guessed type int dtor_idx_3330;

//----- (08048AD0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048AD0: could not find valid save-restore pair for ebp

//----- (08048B00) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // ST08_4@1
  int v4; // eax@4
  int v5; // eax@4
  int v6; // ebx@12
  int v7; // eax@12
  unsigned int v8; // ebx@15
  int v9; // eax@15
  char v10[4]; // ebx@23
  int v11; // esi@25
  int v12; // eax@25
  int v13; // eax@25
  int v14; // eax@25
  int v15; // eax@25
  int v17; // [sp+8h] [bp-300h]@1
  int v18; // [sp+14h] [bp-2F4h]@10
  int v19; // [sp+3Ch] [bp-2CCh]@1
  int v20; // [sp+150h] [bp-1B8h]@1
  int v21; // [sp+268h] [bp-A0h]@12
  int v22; // [sp+26Ch] [bp-9Ch]@10
  int l; // [sp+278h] [bp-90h]@8
  int v24; // [sp+27Ch] [bp-8Ch]@4
  int v25; // [sp+280h] [bp-88h]@3
  int v26; // [sp+284h] [bp-84h]@2
  int v27; // [sp+290h] [bp-78h]@2
  unsigned int v28; // [sp+29Ch] [bp-6Ch]@2
  int v29; // [sp+2A0h] [bp-68h]@1
  int v30; // [sp+2A8h] [bp-60h]@2
  int v31; // [sp+2B8h] [bp-50h]@2
  int v32; // [sp+2C0h] [bp-48h]@10
  int v33; // [sp+2E8h] [bp-20h]@11
  unsigned int m; // [sp+2ECh] [bp-1Ch]@11
  char v35; // [sp+2F3h] [bp-15h]@8
  int k; // [sp+2F4h] [bp-14h]@3
  int j; // [sp+2F8h] [bp-10h]@2
  int i; // [sp+2FCh] [bp-Ch]@1

  std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(&v20, "a.in", 8);
  v3 = std::operator|(137438953488LL);
  std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(&v19);
  std::ios_base::sync_with_stdio(0, (unsigned int)"a.out");
  std::istream::operator>>(&v20, &v29, v3);
  for ( i = 0; i < v29; ++i )
  {
    std::istream::operator>>(&v20, &v28, v17);
    std::allocator<std::vector<int,std::allocator<int>>>::allocator();
    std::vector<int,std::allocator<int>>::vector((int)&v30);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v27,
      v28,
      (int)&v30);
    std::vector<int,std::allocator<int>>::~vector((int)&v30);
    std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
    std::allocator<int>::allocator();
    v31 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v26, v28, (int)&v31);
    std::allocator<int>::~allocator();
    for ( j = 0; j < (signed int)v28; ++j )
    {
      std::istream::operator>>(&v20, &v25, v17);
      for ( k = 0; k < v25; ++k )
      {
        std::istream::operator>>(&v20, &v24, v17);
        --v24;
        v4 = std::vector<int,std::allocator<int>>::operator[]((int)&v26, v24);
        ++*(_DWORD *)v4;
        v5 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
               (int)&v27,
               j);
        std::vector<int,std::allocator<int>>::push_back(v5, (int)&v24);
      }
    }
    v35 = 1;
    for ( l = 0; ; ++l )
    {
      if ( l < (signed int)v28 )
      {
        if ( *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v26, l) == 0 )
        {
          std::allocator<int>::allocator();
          std::vector<int,std::allocator<int>>::vector<int>((int)&v22, v28, 0);
          std::allocator<int>::~allocator();
          std::deque<int,std::allocator<int>>::deque((int)&v32);
          std::queue<int,std::deque<int,std::allocator<int>>>::queue((int)&v18, (int)&v32);
          std::deque<int,std::allocator<int>>::~deque((int)&v32);
          std::queue<int,std::deque<int,std::allocator<int>>>::push((int)&v18, (int)&l);
          *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v22, l) = 1;
          do
          {
            if ( std::queue<int,std::deque<int,std::allocator<int>>>::empty((int)&v18) )
              break;
            v33 = *(_DWORD *)std::queue<int,std::deque<int,std::allocator<int>>>::front((int)&v18);
            std::queue<int,std::deque<int,std::allocator<int>>>::pop((int)&v18);
            for ( m = 0; ; ++m )
            {
              v8 = m;
              v9 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                     (int)&v27,
                     v33);
              if ( v8 >= std::vector<int,std::allocator<int>>::size(v9) )
                break;
              v6 = m;
              v7 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                     (int)&v27,
                     v33);
              v21 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v7, v6);
              if ( *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v22, v21) != 0 )
              {
                v35 = 0;
                break;
              }
              *(_DWORD *)std::vector<int,std::allocator<int>>::operator[]((int)&v22, v21) = 1;
              std::queue<int,std::deque<int,std::allocator<int>>>::push((int)&v18, (int)&v21);
            }
          }
          while ( !((unsigned __int8)v35 ^ 1) );
          std::queue<int,std::deque<int,std::allocator<int>>>::~queue((int)&v18);
          std::vector<int,std::allocator<int>>::~vector((int)&v22);
        }
        if ( !((unsigned __int8)v35 ^ 1) )
          continue;
      }
      break;
    }
    if ( v35 )
      *(_DWORD *)v10 = "No";
    else
      *(_DWORD *)v10 = "Yes";
    v11 = i + 1;
    v12 = std::operator<<<std::char_traits<char>>(&v19, "Case #");
    v13 = std::ostream::operator<<(v12, v11);
    v14 = std::operator<<<std::char_traits<char>>(v13, ": ");
    v15 = std::operator<<<std::char_traits<char>>(v14, *(_DWORD *)v10);
    std::ostream::operator<<(v15, (const char *)&std::endl<char,std::char_traits<char>>);
    std::vector<int,std::allocator<int>>::~vector((int)&v26);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v27);
  }
  std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(&v19);
  std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(&v20);
  return 0;
}
// 8048890: using guessed type int __cdecl std::ostream::operator<<(_DWORD, _DWORD);
// 80488F0: using guessed type int __cdecl std::operator<<<std::char_traits<char>>(_DWORD, _DWORD);
// 8048900: using guessed type int __cdecl std::basic_ifstream<char,std::char_traits<char>>::~basic_ifstream(_DWORD);
// 8048910: using guessed type int __cdecl std::basic_ofstream<char,std::char_traits<char>>::~basic_ofstream(_DWORD);
// 8048930: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD, _DWORD);
// 8048950: using guessed type int __cdecl std::basic_ifstream<char,std::char_traits<char>>::basic_ifstream(_DWORD, _DWORD, _DWORD);
// 8048960: using guessed type int std::ostream::operator<<(_DWORD, const char *, ...);
// 8048970: using guessed type int __cdecl std::basic_ofstream<char,std::char_traits<char>>::basic_ofstream(_DWORD);

//----- (080491BB) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (080491C3) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (080491C8) --------------------------------------------------------
int __cdecl std::operator|(__int64 a1)
{
  return a1 | HIDWORD(a1);
}

//----- (080491D5) --------------------------------------------------------
unsigned int __cdecl std::__deque_buf_size(unsigned int a1)
{
  unsigned int result; // eax@2

  if ( a1 > 0x1FF )
    result = 1;
  else
    result = 0x200 / a1;
  return result;
}

//----- (080491F8) --------------------------------------------------------
void __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::~queue(int a1)
{
  std::deque<int,std::allocator<int>>::~deque(a1);
}

//----- (0804920C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (08049220) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (08049278) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804928C) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (080492A0) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (080492F8) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (08049350) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049364) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (08049378) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, a2);
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, a3);
}

//----- (080493D0) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (080493E2) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (080493FA) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (0804946E) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector<int>(int a1, unsigned int a2, char a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
  return std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(a1, a2, a3);
}

//----- (080494C4) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1)
{
  return std::_Deque_base<int,std::allocator<int>>::_Deque_base(a1);
}

//----- (080494D8) --------------------------------------------------------
void __cdecl std::deque<int,std::allocator<int>>::~deque(int a1)
{
  char v1; // [sp+10h] [bp-28h]@1
  char v2; // [sp+20h] [bp-18h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::deque<int,std::allocator<int>>::end((int)&v1, a1);
  std::deque<int,std::allocator<int>>::begin((int)&v2, a1);
  std::deque<int,std::allocator<int>>::_M_destroy_data();
  std::_Deque_base<int,std::allocator<int>>::~_Deque_base(a1);
}

//----- (08049562) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::queue(int a1, int a2)
{
  return std::deque<int,std::allocator<int>>::deque(a1, a2);
}

//----- (0804957C) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::push(int a1, int a2)
{
  return std::deque<int,std::allocator<int>>::push_back(a1, a2);
}

//----- (08049596) --------------------------------------------------------
bool __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::empty(int a1)
{
  return std::deque<int,std::allocator<int>>::empty(a1);
}

//----- (080495AA) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::front(int a1)
{
  return std::deque<int,std::allocator<int>>::front(a1);
}

//----- (080495BE) --------------------------------------------------------
int __cdecl std::queue<int,std::deque<int,std::allocator<int>>>::pop(int a1)
{
  return std::deque<int,std::allocator<int>>::pop_front(a1);
}

//----- (080495D2) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (080495EC) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049600) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049614) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (08049674) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804967C) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049696) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804969C) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (080496A2) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (080496B6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (08049700) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (08049782) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080497C0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080497C8) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (080497E2) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (080497E8) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (080497EE) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (08049838) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049876) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (08049898) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (08049B36) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (08049B58) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049B72) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_initialize_dispatch<int>(int a1, unsigned int a2, char a3)
{
  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, (int)&a3);
}

//----- (08049BBE) --------------------------------------------------------
void std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049BD2) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1)
{
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(a1, 0);
}

//----- (08049C16) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::~_Deque_base(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(a1, *(void ***)(a1 + 20), *(_DWORD *)(a1 + 36) + 4);
    v1 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(a1, *(void **)a1);
  }
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::~_Deque_impl();
}

//----- (08049C90) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (08049CB2) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (08049CD4) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049CDC) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (08049D10) --------------------------------------------------------
void std::deque<int,std::allocator<int>>::_M_destroy_data()
{
  ;
}

//----- (08049D18) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::deque(int a1, int a2)
{
  unsigned int v2; // ebx@1
  int v3; // eax@1
  char v5; // [sp+30h] [bp-48h]@1
  char v6; // [sp+40h] [bp-38h]@1
  int v7; // [sp+50h] [bp-28h]@1
  int v8; // [sp+54h] [bp-24h]@1
  int v9; // [sp+58h] [bp-20h]@1
  int v10; // [sp+5Ch] [bp-1Ch]@1
  int v11; // [sp+60h] [bp-18h]@1
  int v12; // [sp+64h] [bp-14h]@1
  int v13; // [sp+68h] [bp-10h]@1
  int v14; // [sp+6Ch] [bp-Ch]@1

  v2 = std::deque<int,std::allocator<int>>::size(a2);
  v3 = std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  std::_Deque_base<int,std::allocator<int>>::_Deque_base(a1, v3, v2);
  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v6, a1 + 8);
  std::deque<int,std::allocator<int>>::end((int)&v7, a2);
  std::deque<int,std::allocator<int>>::begin((int)&v11, a2);
  return std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>(
           (int)&v5,
           v11,
           v12,
           v13,
           v14,
           v7,
           v8,
           v9,
           v10,
           (int)&v6);
}

//----- (08049E06) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 32) - 4 )
  {
    result = std::deque<int,std::allocator<int>>::_M_push_back_aux(a1, a2);
  }
  else
  {
    __gnu_cxx::new_allocator<int>::construct(a1, *(void **)(a1 + 24), a2);
    result = a1;
    *(_DWORD *)(a1 + 24) += 4;
  }
  return result;
}

//----- (08049E60) --------------------------------------------------------
bool __cdecl std::deque<int,std::allocator<int>>::empty(int a1)
{
  return std::operator==<int,int &,int *>(a1 + 24, a1 + 8);
}

//----- (08049E80) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::front(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1

  std::deque<int,std::allocator<int>>::begin((int)&v2, a1);
  return std::_Deque_iterator<int,int &,int *>::operator*((int)&v2);
}

//----- (08049EA8) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::pop_front(int a1)
{
  int v1; // ST04_4@2
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 8) == *(_DWORD *)(a1 + 16) - 4 )
  {
    result = std::deque<int,std::allocator<int>>::_M_pop_front_aux(a1);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 8);
    __gnu_cxx::new_allocator<int>::destroy();
    result = a1;
    *(_DWORD *)(a1 + 8) += 4;
  }
  return result;
}

//----- (08049EF4) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049F24) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (08049F4B) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (08049F66) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049F9E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (08049FE2) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (0804A009) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A02A) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804A044) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A07C) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804A0B9) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A0DA) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804A100) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804A108) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804A140) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A14A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (0804A1EE) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (0804A20D) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (0804A23E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A26D) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804A295) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (0804A2B0) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A2C0) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 24);
}

//----- (0804A302) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(int a1, unsigned int a2)
{
  unsigned int v2; // eax@1
  int v3; // ebx@1
  unsigned int v4; // edx@1
  int result; // eax@1
  unsigned int v6; // [sp+1Ch] [bp-2Ch]@1
  int v7; // [sp+20h] [bp-28h]@1
  unsigned int v8; // [sp+24h] [bp-24h]@1
  unsigned int v9; // [sp+28h] [bp-20h]@1
  unsigned int v10; // [sp+2Ch] [bp-1Ch]@1

  v2 = std::__deque_buf_size(4u);
  v10 = a2 / v2 + 1;
  v6 = a2 / v2 + 3;
  v7 = 8;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)std::max<unsigned int>((int)&v7, (int)&v6);
  *(_DWORD *)a1 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(a1, *(_DWORD *)(a1 + 4));
  v9 = *(_DWORD *)a1 + 4 * ((*(_DWORD *)(a1 + 4) - v10) >> 1);
  v8 = 4 * v10 + v9;
  std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(a1, v9, v8);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, v9);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, v8 - 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 28);
  v4 = v3 + 4 * (a2 % std::__deque_buf_size(4u));
  result = a1;
  *(_DWORD *)(a1 + 24) = v4;
  return result;
}

//----- (0804A46E) --------------------------------------------------------
void **__cdecl std::_Deque_base<int,std::allocator<int>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3)
{
  void **result; // eax@3
  void **i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; ++i )
  {
    result = i;
    if ( (unsigned int)i >= a3 )
      break;
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(a1, *i);
  }
  return result;
}

//----- (0804A49E) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(int a1, void *a2)
{
  int v2; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator((int)&v2, a1);
  __gnu_cxx::new_allocator<int *>::deallocate((int)&v2, a2);
  std::allocator<int *>::~allocator();
}

//----- (0804A4E0) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A4E8) --------------------------------------------------------
unsigned int __cdecl std::deque<int,std::allocator<int>>::size(int a1)
{
  return std::operator-<int,int &,int *>(a1 + 24, a1 + 8);
}

//----- (0804A508) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_base(int a1, int a2, unsigned int a3)
{
  std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<int,std::allocator<int>>::_M_initialize_map(a1, a3);
}

//----- (0804A552) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (0804A574) --------------------------------------------------------
int __userpurge std::deque<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (0804A596) --------------------------------------------------------
int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>,int>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804A60C) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_push_back_aux(int a1, int a2)
{
  int v2; // ebx@1
  int result; // eax@1

  std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(a1, 1);
  v2 = *(_DWORD *)(a1 + 36) + 4;
  *(_DWORD *)v2 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(a1);
  __gnu_cxx::new_allocator<int>::construct(a1, *(void **)(a1 + 24), a2);
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, *(_DWORD *)(a1 + 36) + 4);
  result = a1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
  return result;
}

//----- (0804A6BF) --------------------------------------------------------
bool __cdecl std::operator==<int,int &,int *>(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (0804A6D4) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804A6DE) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804A6E4) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_pop_front_aux(int a1)
{
  int v1; // ST04_4@1
  int result; // eax@1

  v1 = *(_DWORD *)(a1 + 8);
  __gnu_cxx::new_allocator<int>::destroy();
  std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(a1, *(void **)(a1 + 12));
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, *(_DWORD *)(a1 + 20) + 4);
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return result;
}

//----- (0804A73E) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A751) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804A756) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804A770) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A7A0) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A7B3) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A7D4) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804A7FE) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A818) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A839) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804A84C) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804A890) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804A8AB) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804A8C6) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804A8F6) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804A918) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_Deque_iterator(int a1)
{
  int result; // eax@1

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = a1;
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

//----- (0804A944) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(int a1, unsigned int a2)
{
  int v2; // ebx@1
  char v4; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator((int)&v4, a1);
  v2 = __gnu_cxx::new_allocator<int *>::allocate((int)&v4, a2);
  std::allocator<int *>::~allocator();
  return v2;
}

//----- (0804A9A8) --------------------------------------------------------
unsigned int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3)
{
  unsigned int result; // eax@3
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; i += 4 )
  {
    result = i;
    if ( i >= a3 )
      break;
    *(_DWORD *)i = std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(a1);
  }
  return result;
}

//----- (0804AA12) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 4 * std::_Deque_iterator<int,int &,int *>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804AA4A) --------------------------------------------------------
void __cdecl std::_Deque_base<int,std::allocator<int>>::_M_deallocate_node(int a1, void *a2)
{
  std::__deque_buf_size(4u);
  __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804AA74) --------------------------------------------------------
int __userpurge std::_Deque_base<int,std::allocator<int>>::_M_get_map_allocator@<eax>(int a1, int a2)
{
  std::_Deque_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  std::allocator<int *>::allocator<int>();
  return a1;
}

//----- (0804AA9C) --------------------------------------------------------
void std::allocator<int *>::~allocator()
{
  __gnu_cxx::new_allocator<int *>::~new_allocator();
}

//----- (0804AAB0) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int *>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804AAC3) --------------------------------------------------------
unsigned int __cdecl std::operator-<int,int &,int *>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<int,int &,int *>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 2)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 2);
}

//----- (0804AB18) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1 + 24);
}

//----- (0804AB62) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (0804AB95) --------------------------------------------------------
int __userpurge std::uninitialized_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804AC0C) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_reserve_map_at_back(int a1, int a2)
{
  int result; // eax@1

  result = *(_DWORD *)(a1 + 4) - ((*(_DWORD *)(a1 + 36) - *(_DWORD *)a1) >> 2);
  if ( a2 + 1 > (unsigned int)result )
    result = std::deque<int,std::allocator<int>>::_M_reallocate_map(a1, a2, 0);
  return result;
}

//----- (0804AC5C) --------------------------------------------------------
int __cdecl std::_Deque_base<int,std::allocator<int>>::_M_allocate_node(int a1)
{
  unsigned int v1; // eax@1

  v1 = std::__deque_buf_size(4u);
  return __gnu_cxx::new_allocator<int>::allocate(a1, v1);
}

//----- (0804AC88) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804AC8E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804ACC4) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804AD32) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804AD3A) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804AD4E) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804AD53) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804AD74) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AD7C) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804AD8F) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804ADB4) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804ADC8) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804ADD0) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804ADDA) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804ADFC) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int *>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int *>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804AE2C) --------------------------------------------------------
unsigned int std::_Deque_iterator<int,int &,int *>::_S_buffer_size()
{
  return std::__deque_buf_size(4u);
}

//----- (0804AE40) --------------------------------------------------------
void std::allocator<int *>::allocator<int>()
{
  __gnu_cxx::new_allocator<int *>::new_allocator();
}

//----- (0804AE54) --------------------------------------------------------
void __gnu_cxx::new_allocator<int *>::~new_allocator()
{
  ;
}

//----- (0804AE59) --------------------------------------------------------
int __userpurge std::__uninitialized_copy<true>::__uninit_copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804AED0) --------------------------------------------------------
int __cdecl std::deque<int,std::allocator<int>>::_M_reallocate_map(int a1, int a2, char a3)
{
  int v3; // eax@3
  int v4; // ebx@8
  int v5; // eax@9
  int v6; // ST08_4@11
  char v8; // [sp+Ch] [bp-2Ch]@1
  int v9; // [sp+1Ch] [bp-1Ch]@8
  unsigned int v10; // [sp+20h] [bp-18h]@8
  int v11; // [sp+24h] [bp-14h]@1
  int v12; // [sp+28h] [bp-10h]@1
  int v13; // [sp+2Ch] [bp-Ch]@5

  v8 = a3;
  v12 = ((*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 20)) >> 2) + 1;
  v11 = a2 + v12;
  if ( *(_DWORD *)(a1 + 4) <= (unsigned int)(2 * (a2 + v12)) )
  {
    v4 = *(_DWORD *)(a1 + 4);
    v10 = v4 + *(_DWORD *)std::max<unsigned int>(a1 + 4, (int)&a2) + 2;
    v9 = std::_Deque_base<int,std::allocator<int>>::_M_allocate_map(a1, v10);
    if ( v8 )
      v5 = 4 * a2;
    else
      v5 = 0;
    v13 = v5 + 4 * ((v10 - v11) >> 1) + v9;
    std::copy<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
    v6 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<int,std::allocator<int>>::_M_deallocate_map(a1, *(void **)a1);
    *(_DWORD *)a1 = v9;
    *(_DWORD *)(a1 + 4) = v10;
  }
  else
  {
    if ( a3 )
      v3 = 4 * a2;
    else
      v3 = 0;
    v13 = *(_DWORD *)a1 + 4 * ((unsigned int)(*(_DWORD *)(a1 + 4) - v11) >> 1) + v3;
    if ( *(_DWORD *)(a1 + 20) <= (unsigned int)v13 )
      std::copy_backward<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, 4 * v12 + v13);
    else
      std::copy<int **,int **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
  }
  std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 8, v13);
  return std::_Deque_iterator<int,int &,int *>::_M_set_node(a1 + 24, v13 + 4 * (v12 + 0x3FFFFFFF));
}

//----- (0804B0A8) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804B0B2) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804B107) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804B130) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804B185) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804B1A6) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int *>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804B1B0) --------------------------------------------------------
void __gnu_cxx::new_allocator<int *>::new_allocator()
{
  ;
}

//----- (0804B1B5) --------------------------------------------------------
int __userpurge std::copy<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-38h]@1
  int v12; // [sp+40h] [bp-28h]@1
  int v13; // [sp+44h] [bp-24h]@1
  int v14; // [sp+48h] [bp-20h]@1
  int v15; // [sp+4Ch] [bp-1Ch]@1
  int v16; // [sp+50h] [bp-18h]@1
  int v17; // [sp+54h] [bp-14h]@1
  int v18; // [sp+58h] [bp-10h]@1
  int v19; // [sp+5Ch] [bp-Ch]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v12, a6, a7, a8, a9);
  std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v16, a2, a3, a4, a5);
  std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    v16,
    v17,
    v18,
    v19,
    v12,
    v13,
    v14,
    v15,
    (int)&v11);
  return a1;
}

//----- (0804B27F) --------------------------------------------------------
char *__cdecl std::copy<int **,int **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int **>(a2);
  v4 = std::__miter_base<int **>(a1);
  return std::__copy_move_a2<false,int **,int **>(v4, v3, a3);
}

//----- (0804B2B7) --------------------------------------------------------
int __cdecl std::copy_backward<int **,int **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int **>(a2);
  v4 = std::__miter_base<int **>(a1);
  return std::__copy_move_backward_a2<false,int **,int **>(v4, v3, a3);
}

//----- (0804B2F0) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804B3A7) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804B3D7) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804B40F) --------------------------------------------------------
int __userpurge std::__miter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base(a1, a2, a3, a4, a5);
  return a1;
}

//----- (0804B446) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-48h]@1
  char v12; // [sp+40h] [bp-38h]@1
  int v13; // [sp+50h] [bp-28h]@1
  int v14; // [sp+54h] [bp-24h]@1
  int v15; // [sp+58h] [bp-20h]@1
  int v16; // [sp+5Ch] [bp-1Ch]@1
  int v17; // [sp+60h] [bp-18h]@1
  int v18; // [sp+64h] [bp-14h]@1
  int v19; // [sp+68h] [bp-10h]@1
  int v20; // [sp+6Ch] [bp-Ch]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v12, a10);
  std::__niter_base<std::_Deque_iterator<int,int &,int *>>((int)&v11, (int)&v12);
  std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v13, a6, a7, a8, a9);
  std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>((int)&v17, a2, a3, a4, a5);
  std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    v17,
    v18,
    v19,
    v20,
    v13,
    v14,
    v15,
    v16,
    (int)&v11);
  return a1;
}

//----- (0804B527) --------------------------------------------------------
int __cdecl std::__miter_base<int **>(int a1)
{
  return std::_Iter_base<int **,false>::_S_base(a1);
}

//----- (0804B53A) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int **,int **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int **>(a3);
  v4 = std::__niter_base<int **>(a2);
  v5 = std::__niter_base<int **>(a1);
  return std::__copy_move_a<false,int **,int **>((void *)v5, v4, (void *)v3);
}

//----- (0804B57E) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int **,int **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int **>(a3);
  v4 = std::__niter_base<int **>(a2);
  v5 = std::__niter_base<int **>(a1);
  return std::__copy_move_backward_a<false,int **,int **>((void *)v5, v4, v3);
}

//----- (0804B5C2) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804B5CA) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804B5F2) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804B61A) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B63B) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804B67F) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  return a1;
}

//----- (0804B6A3) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Deque_iterator<int,int const&,int const*>>@<eax>(int a1, int a2, int a3, int a4, int a5)
{
  std::_Iter_base<std::_Deque_iterator<int,int const&,int const*>,false>::_S_base(a1, a2, a3, a4, a5);
  return a1;
}

//----- (0804B6DA) --------------------------------------------------------
int __userpurge std::__niter_base<std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, int a2)
{
  char v3; // [sp+10h] [bp-18h]@1

  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v3, a2);
  std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base(a1, (int)&v3);
  return a1;
}

//----- (0804B70E) --------------------------------------------------------
int __userpurge std::__copy_move_a<false,std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+3Ch] [bp-1Ch]@1
  char v12; // [sp+4Fh] [bp-9h]@1

  v12 = 0;
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator((int)&v11, a10);
  std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (0804B788) --------------------------------------------------------
int __cdecl std::_Iter_base<int **,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804B790) --------------------------------------------------------
int __cdecl std::__niter_base<int **>(int a1)
{
  return std::_Iter_base<int **,false>::_S_base(a1);
}

//----- (0804B7A3) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int **,int **>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(src, a2, dest);
}

//----- (0804B7C8) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int **,int **>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(src, a2, a3);
}

//----- (0804B7EE) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B7FD) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804B81E) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804B843) --------------------------------------------------------
int __userpurge std::_Iter_base<std::_Deque_iterator<int,int &,int *>,false>::_S_base@<eax>(int a1, int a2)
{
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a2);
  return a1;
}

//----- (0804B862) --------------------------------------------------------
int __userpurge std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::_Deque_iterator<int,int const&,int const*>,std::_Deque_iterator<int,int &,int *>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  int v10; // ebx@2
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = std::operator-<int,int const&,int const*>((int)&a6, (int)&a2); (signed int)i > 0; --i )
  {
    v10 = std::_Deque_iterator<int,int &,int *>::operator*(a10);
    *(_DWORD *)v10 = *(_DWORD *)std::_Deque_iterator<int,int const&,int const*>::operator*((int)&a2);
    std::_Deque_iterator<int,int const&,int const*>::operator++((int)&a2);
    std::_Deque_iterator<int,int &,int *>::operator++(a10);
  }
  std::_Deque_iterator<int,int &,int *>::_Deque_iterator(a1, a10);
  return a1;
}

//----- (0804B8D8) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int *>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804B921) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int *>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804B976) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804B997) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804B9E0) --------------------------------------------------------
unsigned int __cdecl std::operator-<int,int const&,int const*>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 2)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 2);
}

//----- (0804BA36) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804BA40) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<int,int const&,int const*>::_M_set_node(a1, *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (0804BA8A) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int &,int *>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<int,int &,int *>::_M_set_node(a1, *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (0804BAD4) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804BB1F) --------------------------------------------------------
unsigned int std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size()
{
  return std::__deque_buf_size(4u);
}

//----- (0804BB34) --------------------------------------------------------
int __cdecl std::_Deque_iterator<int,int const&,int const*>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 4 * std::_Deque_iterator<int,int const&,int const*>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804BB6C) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804BB8E) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804BBD2) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804BBE4) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804BBF7) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804BC1C) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804BC32) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804BC40) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804BC50) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804BCAA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804BCB0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int *v2; // ebx@1
  void (*v3)(void); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &_CTOR_LIST__;
  v3 = (void (*)(void))_CTOR_LIST__;
  if ( _CTOR_LIST__ != -1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (*)(void))*v2;
    }
    while ( *v2 != -1 );
  }
  return v5;
}
// 804F10C: using guessed type int _CTOR_LIST__;

//----- (0804BCD8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 213 function(s)"
