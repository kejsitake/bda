/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int scanf(const char *format, ...);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// int puts(const char *s);
// _DWORD std::__throw_bad_alloc(void); idb
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_main();
int __cdecl std::__lg(int a1);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1);
void __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(int a1);
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator();
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator();
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~vector(int a1);
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](int a1, int a2);
bool __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::empty(int a1);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::back(int a1);
// int __userpurge std::make_pair<char,int>@<eax>(int a1, char a2, char a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::push_back(int a1, int a2);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(int a1);
void std::allocator<int>::allocator();
void std::allocator<int>::~allocator();
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3);
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, int a2);
void std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~new_allocator();
void std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2);
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2);
bool __cdecl __gnu_cxx::operator==<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2);
// int __userpurge __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator-@<eax>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1);
int __cdecl std::pair<char,int>::pair(int a1, int a2, int a3);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(int a1, void *a2, int a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_insert_aux(int a1, char a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1);
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(char a1, int a2, int a3);
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::pair<char,int>>::~allocator();
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<std::pair<char,int> *>();
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2);
void *__cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1);
int __cdecl std::copy_backward<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::destroy();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3);
void std::_Destroy<int *>();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2);
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2);
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3);
// int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3);
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
void std::allocator<std::pair<char,int>>::allocator();
void __gnu_cxx::new_allocator<std::pair<char,int>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<std::pair<char,int> *>();
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator();
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2);
int __cdecl std::__miter_base<std::pair<char,int> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::pair<char,int>>::destroy();
void std::allocator<int>::allocator();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<int *>();
void std::allocator<std::vector<int,std::allocator<int>>>::allocator();
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2);
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2);
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2);
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3);
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3);
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
// int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4);
bool __cdecl __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1);
// int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1);
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocate(int a1, unsigned int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1);
void __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1);
int __cdecl std::_Iter_base<std::pair<char,int> *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::pair<char,int> *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::max_size();
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::pair<char,int>>::max_size();
int __cdecl std::uninitialized_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2);
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3);
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1);
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1);
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
bool __cdecl __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--(int a1);
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
signed int __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size();
void *__cdecl std::_Construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(void *a1, int a2);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<int>::max_size();
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size();
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2);
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4);
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1, int a2);
int __cdecl std::__addressof<std::pair<char,int>>(int a1);
void *__cdecl std::_Construct<std::pair<char,int>,std::pair<char,int>>(void *a1, int a2);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3);
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2);
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4);
int __cdecl std::swap<int>(int a1, int a2);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(char a1, char a2, int a3);
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
void std::allocator<std::pair<char,int>>::allocator();
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3);
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
bool __cdecl __gnu_cxx::operator!=<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator++(int a1);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1);
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1);
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804F6F0)() = &GLOBAL__sub_I_main; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
char edata; // weak
_UNKNOWN unk_804F847; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (08048698) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048700: using guessed type int __gmon_start__(void);

//----- (08048800) --------------------------------------------------------
#error "8048803: positive sp value has been found (funcsize=2)"

//----- (08048830) --------------------------------------------------------
signed int deregister_tm_clones()
{
  signed int result; // eax@1

  result = &unk_804F847 - (_UNKNOWN *)&edata;
  if ( (unsigned int)(&unk_804F847 - (_UNKNOWN *)&edata) > 6 )
    result = 0;
  return result;
}
// 8048830: could not find valid save-restore pair for ebp
// 804F844: using guessed type char edata;

//----- (08048860) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048860: could not find valid save-restore pair for ebp

//----- (080488A0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !edata )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    edata = 1;
  }
}
// 804F6F8: using guessed type int _DTOR_LIST__[];
// 804F844: using guessed type char edata;
// 804F848: using guessed type int dtor_idx_3330;

//----- (080488F0) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 80488F0: could not find valid save-restore pair for ebp

//----- (08048920) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@4
  int v4; // eax@5
  int v5; // eax@5
  bool v6; // al@6
  int v7; // eax@9
  int v8; // eax@10
  int v9; // eax@10
  int v10; // eax@15
  int v11; // eax@15
  int v12; // eax@16
  int v13; // ebx@16
  int v14; // eax@16
  int v15; // ebx@19
  int v16; // eax@19
  char v17; // ST1B_1@19
  int v18; // ebx@19
  int v19; // eax@19
  int v20; // ebx@21
  int v21; // eax@21
  int v22; // ebx@21
  int v23; // esi@21
  int v24; // eax@21
  int v25; // eax@22
  int v26; // eax@22
  int v27; // eax@28
  int v28; // eax@28
  int v29; // ebx@28
  int v30; // eax@28
  int v31; // ebx@29
  int v32; // eax@29
  int v33; // eax@29
  int v34; // eax@32
  char v36[128]; // [sp+2h] [bp-118h]@3
  char v37; // [sp+82h] [bp-98h]@15
  char v38; // [sp+8Eh] [bp-8Ch]@2
  unsigned int v39; // [sp+9Ah] [bp-80h]@2
  int v40; // [sp+9Eh] [bp-7Ch]@1
  char v41; // [sp+A6h] [bp-74h]@2
  char v42; // [sp+B2h] [bp-68h]@9
  char v43; // [sp+BEh] [bp-5Ch]@15
  int v44; // [sp+CEh] [bp-4Ch]@15
  int v45; // [sp+D2h] [bp-48h]@28
  int v46; // [sp+D6h] [bp-44h]@28
  int v47; // [sp+DAh] [bp-40h]@28
  unsigned int ii; // [sp+DEh] [bp-3Ch]@28
  int n; // [sp+E2h] [bp-38h]@27
  int v50; // [sp+E6h] [bp-34h]@27
  int m; // [sp+EAh] [bp-30h]@18
  int l; // [sp+EEh] [bp-2Ch]@15
  unsigned __int8 v53; // [sp+F5h] [bp-25h]@15
  int k; // [sp+F6h] [bp-24h]@3
  int j; // [sp+FAh] [bp-20h]@2
  int i; // [sp+FEh] [bp-1Ch]@1
  int *v57; // [sp+112h] [bp-8h]@1

  v57 = &argc;
  scanf("%d", &v40);
  for ( i = 1; i <= v40; ++i )
  {
    scanf("%d", &v39);
    std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator();
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector((int)&v41);
    std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::vector(
      (int)&v38,
      v39,
      (int)&v41);
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector((int)&v41);
    std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator();
    for ( j = 0; j < (signed int)v39; ++j )
    {
      scanf("%s", v36);
      for ( k = 0; v36[k]; ++k )
      {
        v3 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
               (int)&v38,
               j);
        v6 = 1;
        if ( !std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::empty(v3) )
        {
          v4 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                 (int)&v38,
                 j);
          v5 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::back(v4);
          if ( *(_BYTE *)v5 == v36[k] )
            v6 = 0;
        }
        if ( v6 )
        {
          std::make_pair<char,int>((int)&v42, v36[k], 1);
          v7 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                 (int)&v38,
                 j);
          std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::push_back(v7, (int)&v42);
        }
        else
        {
          v8 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                 (int)&v38,
                 j);
          v9 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::back(v8);
          ++*(_DWORD *)(v9 + 4);
        }
      }
    }
    printf("Case #%d: ", i);
    v53 = 1;
    std::allocator<std::vector<int,std::allocator<int>>>::allocator();
    std::allocator<int>::allocator();
    v44 = 0;
    std::vector<int,std::allocator<int>>::vector((int)&v43, v39, (int)&v44);
    v10 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
            (int)&v38,
            0);
    v11 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v10);
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(
      (int)&v37,
      v11,
      (int)&v43);
    std::vector<int,std::allocator<int>>::~vector((int)&v43);
    std::allocator<int>::~allocator();
    std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
    for ( l = 0; l < (signed int)v39; ++l )
    {
      v12 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v38,
              l);
      v13 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v12);
      v14 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v38,
              0);
      if ( v13 != std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v14) )
      {
        v53 = 0;
        break;
      }
      for ( m = 0; ; ++m )
      {
        v25 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                (int)&v38,
                0);
        v26 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v25);
        if ( v26 <= m )
          break;
        v15 = m;
        v16 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                (int)&v38,
                l);
        v17 = *(_BYTE *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](v16, v15);
        v18 = m;
        v19 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                (int)&v38,
                0);
        if ( v17 != *(_BYTE *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](v19, v18) )
        {
          v53 = 0;
          break;
        }
        v20 = l;
        v21 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                (int)&v37,
                m);
        v22 = std::vector<int,std::allocator<int>>::operator[](v21, v20);
        v23 = m;
        v24 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
                (int)&v38,
                l);
        *(_DWORD *)v22 = *(_DWORD *)(std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](
                                       v24,
                                       v23)
                                   + 4);
      }
      if ( v53 ^ 1 )
        break;
    }
    if ( v53 )
    {
      v50 = 0;
      for ( n = 0; ; ++n )
      {
        v34 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size((int)&v37);
        if ( v34 <= n )
          break;
        v27 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                (int)&v37,
                n);
        std::vector<int,std::allocator<int>>::end((int)&v45, v27);
        v28 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                (int)&v37,
                n);
        std::vector<int,std::allocator<int>>::begin((int)&v46, v28);
        std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(v46, v45);
        v29 = (signed int)v39 / 2;
        v30 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                (int)&v37,
                n);
        v47 = *(_DWORD *)std::vector<int,std::allocator<int>>::operator[](v30, v29);
        for ( ii = 0; (signed int)ii < (signed int)v39; ++ii )
        {
          v31 = ii;
          v32 = std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](
                  (int)&v37,
                  n);
          v33 = std::vector<int,std::allocator<int>>::operator[](v32, v31);
          v50 += (((*(_DWORD *)v33 - v47) >> 31) ^ (*(_DWORD *)v33 - v47)) - ((*(_DWORD *)v33 - v47) >> 31);
        }
      }
      printf("%d\n", v50);
    }
    else
    {
      puts("Fegla Won");
    }
    std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector((int)&v37);
    std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~vector((int)&v38);
  }
  return 0;
}
// 8048920: using guessed type char var_118[128];

//----- (08048F13) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80486F0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048F52) --------------------------------------------------------
int GLOBAL__sub_I_main()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048F6E) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (08048F86) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048F8E) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (08048F94) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1)
{
  return std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(a1);
}

//----- (08048FA8) --------------------------------------------------------
void __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~_Vector_base(a1);
}

//----- (08049000) --------------------------------------------------------
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator();
}

//----- (08049014) --------------------------------------------------------
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~new_allocator();
}

//----- (08049028) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (08049080) --------------------------------------------------------
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~_Vector_base(a1);
}

//----- (080490D8) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (080490F0) --------------------------------------------------------
bool __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::empty(int a1)
{
  char v2; // [sp+18h] [bp-10h]@1
  char v3; // [sp+1Ch] [bp-Ch]@1

  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v2, a1);
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v3, a1);
  return __gnu_cxx::operator==<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
           (int)&v3,
           (int)&v2);
}

//----- (08049140) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::back(int a1)
{
  char v2; // [sp+14h] [bp-14h]@1
  int v3; // [sp+18h] [bp-10h]@1
  char v4; // [sp+1Ch] [bp-Ch]@1

  v3 = 1;
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v4, a1);
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator-(
    (int)&v2,
    (int)&v4,
    (int)&v3);
  return __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*((int)&v2);
}

//----- (08049197) --------------------------------------------------------
int __userpurge std::make_pair<char,int>@<eax>(int a1, char a2, char a3)
{
  char v4; // [sp+Ch] [bp-Ch]@1

  v4 = a2;
  std::pair<char,int>::pair(a1, (int)&v4, (int)&a3);
  return a1;
}

//----- (080491C4) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v3, a1);
    result = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(
      a1,
      *(void **)(a1 + 4),
      a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 8;
  }
  return result;
}

//----- (08049238) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 3;
}

//----- (08049252) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (08049266) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (0804927A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, a2);
  return std::vector<int,std::allocator<int>>::_M_fill_initialize(a1, a2, a3);
}

//----- (080492D2) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (0804932A) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804933E) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator();
}

//----- (08049352) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector(int a1, unsigned int a2, int a3)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(
    a1,
    a2);
  return std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(
           a1,
           a2,
           a3);
}

//----- (080493AA) --------------------------------------------------------
void __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(a1);
}

//----- (08049402) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](int a1, int a2)
{
  return 8 * a2 + *(_DWORD *)a1;
}

//----- (08049414) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (0804942C) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (0804943E) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (0804947A) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (0804949A) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (080494BC) --------------------------------------------------------
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, int a2)
{
  bool result; // al@1
  int v3; // eax@2
  int v4; // eax@2

  result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&a1, (int)&a2);
  if ( result )
  {
    v3 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
    v4 = std::__lg(v3);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(a1, a2, 2 * v4);
    result = std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (0804951E) --------------------------------------------------------
void std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::pair<char,int>>::~allocator();
}

//----- (08049532) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049546) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::~_Vector_impl();
}

//----- (080495A6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080495AE) --------------------------------------------------------
void std::_Destroy<std::pair<char,int> *,std::pair<char,int>>()
{
  std::_Destroy<std::pair<char,int> *>();
}

//----- (080495C8) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator()
{
  ;
}

//----- (080495CE) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~new_allocator()
{
  ;
}

//----- (080495D4) --------------------------------------------------------
void std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator();
}

//----- (080495E8) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (08049632) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::~_Vector_impl();
}

//----- (080496B4) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (080496F2) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (080496FA) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a1, a2);
}

//----- (08049714) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (0804973C) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (08049763) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a2);
}

//----- (08049790) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (080497B2) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -8 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    (int)&v4);
  return a1;
}

//----- (080497E6) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (080497F0) --------------------------------------------------------
int __cdecl std::pair<char,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_BYTE *)a1 = *(_BYTE *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (0804980A) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<std::pair<char,int>>::construct(a1, a2, a3);
}

//----- (0804982C) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // ST14_4@2
  int v4; // ST18_4@2
  int v5; // esi@2
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // ecx@2
  int result; // eax@2
  int v10; // eax@3
  int v11; // eax@3
  int v12; // esi@3
  int v13; // eax@3
  int v14; // ST04_4@3
  int v15; // ST00_4@3
  int v16; // ST08_4@3
  char v17; // [sp+1Ch] [bp-1Ch]@3
  void *v18; // [sp+20h] [bp-18h]@3
  int v19; // [sp+24h] [bp-14h]@3
  int v20; // [sp+28h] [bp-10h]@3
  int v21; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v20 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_check_len(
            a1,
            1,
            "vector::_M_insert_aux");
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v17, a1);
    v19 = __gnu_cxx::operator-<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
            (int)&a2,
            (int)&v17);
    v10 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(a1, v20);
    v18 = (void *)v10;
    v21 = v10;
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(
      a1,
      (void *)(8 * v19 + v10),
      a3);
    v21 = 0;
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
    v11 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(
            *(_DWORD *)a1,
            *(_DWORD *)v11,
            (int)v18)
        + 8;
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
    v12 = *(_DWORD *)(a1 + 4);
    v13 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(
            *(_DWORD *)v13,
            v12,
            v21);
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
    v14 = *(_DWORD *)(a1 + 4);
    v15 = *(_DWORD *)a1;
    std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
    v16 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v18;
    *(_DWORD *)(a1 + 4) = v21;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v18 + 8 * v20;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(
      a1,
      *(void **)(a1 + 4),
      *(_DWORD *)(a1 + 4) - 8);
    *(_DWORD *)(a1 + 4) += 8;
    v3 = *(_DWORD *)a3;
    v4 = *(_DWORD *)(a3 + 4);
    v5 = *(_DWORD *)(a1 + 4) - 8;
    v6 = *(_DWORD *)(a1 + 4) - 16;
    v7 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a2);
    std::copy_backward<std::pair<char,int> *,std::pair<char,int> *>(*(_DWORD *)v7, v6, v5);
    v8 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*((int)&a2);
    result = v3;
    *(_DWORD *)v8 = v3;
    *(_DWORD *)(v8 + 4) = v4;
  }
  return result;
}

//----- (08049AE6) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (08049AEC) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (08049AF2) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (08049B06) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<int,std::allocator<int>>::_M_create_storage(a1, a2);
}

//----- (08049B50) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (08049BB0) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(*(_DWORD *)a1, a2, a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049BEE) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049BF6) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (08049C10) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (08049C16) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::~new_allocator()
{
  ;
}

//----- (08049C1C) --------------------------------------------------------
void std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<int,std::allocator<int>>>::~allocator();
}

//----- (08049C30) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(
           a1,
           a2);
}

//----- (08049C7A) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::~_Vector_impl();
}

//----- (08049CFC) --------------------------------------------------------
int __cdecl std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_fill_initialize(int a1, int a2, int a3)
{
  int result; // eax@1

  std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(
    *(_DWORD *)a1,
    a2,
    a3);
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (08049D3A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049D42) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (08049D5C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (08049D6B) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (08049D97) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (08049DC7) --------------------------------------------------------
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(char a1, int a2, int a3)
{
  bool result; // al@3
  int v4; // [sp+1Ch] [bp-Ch]@4

  while ( 1 )
  {
    result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 16;
    if ( !result )
      break;
    if ( !a3 )
      return std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a2);
    --a3;
    std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      (int)&v4,
      a1,
      a2);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (08049E56) --------------------------------------------------------
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@2
  int v3; // [sp+10h] [bp-18h]@2
  int v4; // [sp+14h] [bp-14h]@2
  int v5; // [sp+18h] [bp-10h]@2
  int v6; // [sp+1Ch] [bp-Ch]@2

  if ( __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 16 )
  {
    v3 = 16;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v4, (int)&a1, (int)&v3);
    std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, v4);
    v5 = 16;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v6, (int)&a1, (int)&v5);
    result = std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
               v6,
               a2);
  }
  else
  {
    result = std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
  }
  return result;
}

//----- (08049F0E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<char,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049F3E) --------------------------------------------------------
void std::allocator<std::pair<char,int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::~new_allocator();
}

//----- (08049F52) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::pair<char,int>>::deallocate(a1, a2);
}

//----- (08049F79) --------------------------------------------------------
void std::_Destroy<std::pair<char,int> *>()
{
  std::_Destroy_aux<true>::__destroy<std::pair<char,int> *>();
}

//----- (08049F94) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (08049FCC) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (0804A010) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::deallocate(a1, a2);
}

//----- (0804A037) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
           a1,
           a2,
           a3);
}

//----- (0804A058) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           a1,
           a2);
}

//----- (0804A072) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A082) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1)
{
  return a1;
}

//----- (0804A08A) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A09A) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1
  void *v4; // ecx@1
  int v5; // edx@2

  result = operator new(8u, a2);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(a3 + 4);
    result = *(void **)a3;
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *((_DWORD *)v4 + 1) = v5;
  }
  return result;
}

//----- (0804A0C8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1)
{
  return a1;
}

//----- (0804A0D0) --------------------------------------------------------
int __cdecl std::copy_backward<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<char,int> *>(a2);
  v4 = std::__miter_base<std::pair<char,int> *>(a1);
  return std::__copy_move_backward_a2<false,std::pair<char,int> *,std::pair<char,int> *>(v4, v3, a3);
}

//----- (0804A108) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(a1);
  v4 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  v9 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(a1);
  return result;
}

//----- (0804A1AC) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804A1CB) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a1);
  return (v2
        - *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a2)) >> 3;
}

//----- (0804A1FC) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::pair<char,int>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A22B) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(a1, a2, a3);
}

//----- (0804A253) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::destroy()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::destroy();
}

//----- (0804A26E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A2A6) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 4 * a2;
  return result;
}

//----- (0804A2E4) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804A30B) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n_a<int *,unsigned int,int,int>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A32C) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804A346) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<int,std::allocator<int>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A37E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(
                    a1,
                    a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 12 * a2;
  return result;
}

//----- (0804A3C2) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(a1, a2);
}

//----- (0804A3E9) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n_a<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A40A) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(a1, a2);
}

//----- (0804A424) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804A42C) --------------------------------------------------------
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3)
{
  std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a3);
  return std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
}

//----- (0804A45F) --------------------------------------------------------
int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3)
{
  int v3; // ebx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+20h] [bp-18h]@1
  int v8; // [sp+24h] [bp-14h]@1
  int v9; // [sp+28h] [bp-10h]@1
  int v10; // [sp+2Ch] [bp-Ch]@1

  v6 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a3, (int)&a2) / 2;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v5, (int)&a2, (int)&v6);
  v7 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-((int)&v8, (int)&a3, (int)&v7);
  std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2, v5, v8);
  v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
  v9 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a2, (int)&v9);
  std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(
    a1,
    v10,
    a3,
    v3);
  return a1;
}

//----- (0804A542) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804A573) --------------------------------------------------------
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@1
  int v3; // ebx@3
  int v4; // eax@4
  int v5; // [sp+18h] [bp-20h]@2
  int v6; // [sp+1Ch] [bp-1Ch]@2
  char v7; // [sp+20h] [bp-18h]@4
  int v8; // [sp+24h] [bp-14h]@4
  int v9; // [sp+28h] [bp-10h]@4
  int v10; // [sp+2Ch] [bp-Ch]@4

  result = __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>((int)&a1, (int)&a2);
  if ( !result )
  {
    v6 = 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v5, (int)&a1, (int)&v6);
    while ( 1 )
    {
      result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v5, (int)&a2);
      if ( !result )
        break;
      v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v5);
      if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1) )
      {
        v10 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v5);
        v8 = 1;
        __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+(
          (int)&v9,
          (int)&v5,
          (int)&v8);
        std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
          (int)&v7,
          a1,
          v5,
          v9);
        v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
        *(_DWORD *)v4 = v10;
      }
      else
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(v5);
      }
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v5);
    }
  }
  return result;
}

//----- (0804A689) --------------------------------------------------------
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&i, (int)&a2);
    if ( !result )
      break;
    std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(i);
  }
  return result;
}

//----- (0804A6D0) --------------------------------------------------------
void std::allocator<std::pair<char,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
}

//----- (0804A6E4) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::~new_allocator()
{
  ;
}

//----- (0804A6EA) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A6FD) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<std::pair<char,int> *>()
{
  ;
}

//----- (0804A702) --------------------------------------------------------
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator();
}

//----- (0804A71C) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocate(
               a1,
               a2);
  else
    result = 0;
  return result;
}

//----- (0804A74C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A75F) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
           a1,
           a2,
           a3);
}

//----- (0804A780) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(a1);
    std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804A7A9) --------------------------------------------------------
int __cdecl std::__miter_base<std::pair<char,int> *>(int a1)
{
  return std::_Iter_base<std::pair<char,int> *,false>::_S_base(a1);
}

//----- (0804A7BC) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<char,int> *>(a3);
  v4 = std::__niter_base<std::pair<char,int> *>(a2);
  v5 = std::__niter_base<std::pair<char,int> *>(a1);
  return std::__copy_move_backward_a<false,std::pair<char,int> *,std::pair<char,int> *>(v5, v4, v3);
}

//----- (0804A800) --------------------------------------------------------
signed int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(int a1)
{
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::max_size();
}

//----- (0804A81B) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804A836) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::pair<char,int>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (0804A866) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::pair<char,int> *,std::pair<char,int> *>(a1, a2, a3);
}

//----- (0804A888) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::destroy()
{
  ;
}

//----- (0804A88E) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804A8A8) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A8D8) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A8EB) --------------------------------------------------------
int __cdecl std::uninitialized_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804A90C) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804A912) --------------------------------------------------------
void std::allocator<std::vector<int,std::allocator<int>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator();
}

//----- (0804A92C) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804A95C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804A96F) --------------------------------------------------------
void *__cdecl std::uninitialized_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(
           a1,
           a2,
           a3);
}

//----- (0804A990) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<int,std::allocator<int>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<int,std::allocator<int>>>(a1);
    std::_Destroy<std::vector<int,std::allocator<int>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804A9B9) --------------------------------------------------------
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3)
{
  int v3; // ebx@2
  bool result; // al@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
  for ( i = a2; ; __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>((int)&i, (int)&a3);
    if ( !result )
      break;
    v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&i);
    if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1) )
      std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, i);
  }
  return result;
}

//----- (0804AA47) --------------------------------------------------------
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  bool result; // al@3

  while ( 1 )
  {
    result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 1;
    if ( !result )
      break;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a2);
    std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a2);
  }
  return result;
}

//----- (0804AA92) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804AAC5) --------------------------------------------------------
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3)
{
  int v3; // ebx@1
  int v4; // ebx@2
  char result; // al@3
  int v6; // ebx@4
  int v7; // ebx@6
  int v8; // ebx@7

  v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2) )
  {
    v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
    {
      result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                 a1,
                 a2);
    }
    else
    {
      v6 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
      result = v6 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
      if ( result )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a3);
    }
  }
  else
  {
    v7 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
    result = v7 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
    if ( !result )
    {
      v8 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( v8 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a3);
      else
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a2);
    }
  }
  return result;
}

//----- (0804ABD8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804ABE2) --------------------------------------------------------
int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@3
  int v5; // ebx@6

  while ( 1 )
  {
    while ( 1 )
    {
      v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( *(_DWORD *)v4 >= *(_DWORD *)a4 )
        break;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
    }
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a3);
    while ( 1 )
    {
      v5 = *(_DWORD *)a4;
      if ( v5 >= *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
        break;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a3);
    }
    if ( !__gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a3) )
      break;
    std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      a2,
      a3);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804AC95) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804ACC2) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (0804ACD7) --------------------------------------------------------
int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804AD31) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1)
{
  int v1; // ebx@2
  int v2; // eax@3
  int result; // eax@4
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  v4 = a1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&v4);
  while ( 1 )
  {
    v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
    if ( *(_DWORD *)v2 <= v5 )
      break;
    v1 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
    *(_DWORD *)v1 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
    a1 = v4;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&v4);
  }
  result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  *(_DWORD *)result = v5;
  return result;
}

//----- (0804ADB6) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator()
{
  ;
}

//----- (0804ADBC) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator()
{
  ;
}

//----- (0804ADC2) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804ADF8) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,unsigned int,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(v5);
    result = std::_Construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
               (void *)v4,
               a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804AE66) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1)
{
  return a1;
}

//----- (0804AE6E) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1)
{
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(a1);
}

//----- (0804AE81) --------------------------------------------------------
int __cdecl std::_Iter_base<std::pair<char,int> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804AE89) --------------------------------------------------------
int __cdecl std::__niter_base<std::pair<char,int> *>(int a1)
{
  return std::_Iter_base<std::pair<char,int> *,false>::_S_base(a1);
}

//----- (0804AE9C) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<char,int> *,std::pair<char,int> *>(
           a1,
           a2,
           a3);
}

//----- (0804AEC1) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::pair<char,int>>::max_size();
}

//----- (0804AED4) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804AEDC) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::pair<char,int>>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (0804AEE6) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::pair<char,int> *,std::pair<char,int> *>(a1, a2, a3);
}

//----- (0804AF08) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804AF0E) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804AF3E) --------------------------------------------------------
int __cdecl std::__uninitialized_fill_n<true>::__uninit_fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  return std::fill_n<int *,unsigned int,int>(a1, a2, a3);
}

//----- (0804AF60) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::new_allocator()
{
  ;
}

//----- (0804AF66) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804AF9C) --------------------------------------------------------
void *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int,std::allocator<int>> *,unsigned int,std::vector<int,std::allocator<int>>>(int a1, int a2, int a3)
{
  void *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (void *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::vector<int,std::allocator<int>>>(v5);
    result = std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>((void *)v4, a3);
    --a2;
    v5 += 12;
  }
  return result;
}

//----- (0804B00A) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<int,std::allocator<int>>>(int a1)
{
  return a1;
}

//----- (0804B012) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<int,std::allocator<int>>>(int a1)
{
  std::vector<int,std::allocator<int>>::~vector(a1);
}

//----- (0804B025) --------------------------------------------------------
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  char result; // al@1
  int i; // [sp+10h] [bp-18h]@2
  char v4; // [sp+14h] [bp-14h]@3
  int v5; // [sp+18h] [bp-10h]@3
  int v6; // [sp+1Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) <= 1;
  if ( !result )
  {
    v6 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
    for ( i = (v6 - 2) / 2; ; --i )
    {
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v4, (int)&a1, (int)&i);
      v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
      std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
        a1,
        i,
        v6,
        v5);
      result = i;
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (0804B0DB) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  unsigned int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804B107) --------------------------------------------------------
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3)
{
  int v3; // ST1C_4@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
  v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
  *(_DWORD *)v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  v5 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
  return std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
           a1,
           0,
           v5,
           v3);
}

//----- (0804B170) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 4;
  return a1;
}

//----- (0804B185) --------------------------------------------------------
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  return std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
           a1,
           a2);
}

//----- (0804B19F) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804B1C1) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_backward_a<false,int *,int *>((void *)v6, v5, v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804B220) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size()
{
  return 357913941;
}

//----- (0804B22A) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = (void *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector((int)result, a2);
  return result;
}

//----- (0804B27F) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // edx@2
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - a1) >> 3; i > 0; --i )
  {
    a3 -= 8;
    a2 -= 8;
    v3 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_DWORD *)(a3 + 4) = v3;
  }
  return a3;
}

//----- (0804B2BD) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::pair<char,int>>(v5);
    std::_Construct<std::pair<char,int>,std::pair<char,int>>((void *)v3, a1);
    a1 += 8;
    v5 += 8;
  }
  return v5;
}

//----- (0804B2FA) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804B304) --------------------------------------------------------
int __cdecl std::fill_n<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v3; // eax@1

  v3 = std::__niter_base<int *>(a1);
  return std::__fill_n_a<int *,unsigned int,int>(v3, a2, a3);
}

//----- (0804B32E) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<int,std::allocator<int>>>::max_size()
{
  return 357913941;
}

//----- (0804B338) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<int,std::allocator<int>>,std::vector<int,std::allocator<int>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = std::vector<int,std::allocator<int>>::vector((int)result, a2);
  return result;
}

//----- (0804B38D) --------------------------------------------------------
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4)
{
  int v4; // ebx@2
  int v5; // ebx@4
  int v6; // ebx@8
  int i; // [sp+18h] [bp-40h]@1
  char v9; // [sp+1Ch] [bp-3Ch]@2
  char v10; // [sp+20h] [bp-38h]@2
  int v11; // [sp+24h] [bp-34h]@2
  char v12; // [sp+28h] [bp-30h]@4
  char v13; // [sp+2Ch] [bp-2Ch]@4
  char v14; // [sp+30h] [bp-28h]@8
  char v15; // [sp+34h] [bp-24h]@8
  int v16; // [sp+38h] [bp-20h]@8
  int v17; // [sp+3Ch] [bp-1Ch]@1

  v17 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v9, (int)&a1, (int)&i);
    v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
    v11 = i - 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a1, (int)&v11);
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10) )
      --i;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v12, (int)&a1, (int)&a2);
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v12);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v13, (int)&a1, (int)&i);
    *(_DWORD *)v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v13);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v14, (int)&a1, (int)&a2);
    v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v14);
    v16 = i - 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v15, (int)&a1, (int)&v16);
    *(_DWORD *)v6 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v15);
    a2 = i - 1;
  }
  return std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
           a1,
           a2,
           v17,
           a4);
}

//----- (0804B546) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  int v2; // ebx@1
  int v3; // eax@1

  v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
  v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  return std::swap<int>(v3, v2);
}

//----- (0804B577) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804B589) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804B59C) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804B5C2) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  int result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::_S_select_on_copy(v2);
  v3 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a2);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(a1, v3);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v6, a2);
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804B679) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<char,int>>(int a1)
{
  return a1;
}

//----- (0804B681) --------------------------------------------------------
void *__cdecl std::_Construct<std::pair<char,int>,std::pair<char,int>>(void *a1, int a2)
{
  void *result; // eax@1
  void *v3; // ecx@1
  int v4; // edx@2

  result = operator new(8u, a1);
  v3 = result;
  if ( result )
  {
    v4 = *(_DWORD *)(a2 + 4);
    result = *(void **)a2;
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *((_DWORD *)v3 + 1) = v4;
  }
  return result;
}

//----- (0804B6AF) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804B6C2) --------------------------------------------------------
int __cdecl std::__fill_n_a<int *,unsigned int,int>(int a1, int a2, int a3)
{
  int v4; // [sp+8h] [bp-8h]@1
  int v5; // [sp+Ch] [bp-4h]@1

  v4 = *(_DWORD *)a3;
  v5 = a2;
  while ( v5 )
  {
    *(_DWORD *)a1 = v4;
    --v5;
    a1 += 4;
  }
  return a1;
}

//----- (0804B6F2) --------------------------------------------------------
char *__cdecl std::vector<int,std::allocator<int>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  char *result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(v2);
  v3 = std::vector<int,std::allocator<int>>::size(a2);
  std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1, v3);
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<int,std::allocator<int>>::end((int)&v6, a2);
  std::vector<int,std::allocator<int>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804B7A9) --------------------------------------------------------
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4)
{
  int v4; // ebx@2
  int v5; // eax@4
  bool v6; // al@5
  int result; // eax@8
  int i; // [sp+1Ch] [bp-2Ch]@1
  char v9; // [sp+20h] [bp-28h]@2
  char v10; // [sp+24h] [bp-24h]@2
  char v11; // [sp+28h] [bp-20h]@4
  char v12; // [sp+2Ch] [bp-1Ch]@8

  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v6 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v11, (int)&a1, (int)&i);
      v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v11);
      if ( *(_DWORD *)v5 < a4 )
        v6 = 1;
    }
    if ( !v6 )
      break;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v9, (int)&a1, (int)&a2);
    v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a1, (int)&i);
    *(_DWORD *)v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10);
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v12, (int)&a1, (int)&a2);
  result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v12);
  *(_DWORD *)result = a4;
  return result;
}

//----- (0804B8AC) --------------------------------------------------------
int __cdecl std::swap<int>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (0804B8CE) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804B8E3) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804B938) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804B940) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_create_storage(a1, a2);
}

//----- (0804B98A) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(char a1, char a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(
           a1,
           a2,
           a3);
}

//----- (0804B9AB) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804B9B4) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804B9CD) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804B9D6) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804B9DE) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804BA06) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v3);
  return a1;
}

//----- (0804BA2E) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804BA50) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<char,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804BA88) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * a2;
  return result;
}

//----- (0804BAC5) --------------------------------------------------------
int __cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(
           a1,
           a2,
           a3);
}

//----- (0804BAE6) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804BAF5) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           a1,
           a2,
           a3);
}

//----- (0804BB16) --------------------------------------------------------
void std::allocator<std::pair<char,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
}

//----- (0804BB30) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3)
{
  int v3; // ebx@2
  int v4; // eax@2
  int v6; // [sp+1Ch] [bp-Ch]@1

  v6 = a3;
  while ( __gnu_cxx::operator!=<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
            (int)&a1,
            (int)&a2) )
  {
    v3 = __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*((int)&a1);
    v4 = std::__addressof<std::pair<char,int>>(v6);
    std::_Construct<std::pair<char,int>,std::pair<char,int>>((void *)v4, v3);
    __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator++((int)&a1);
    v6 += 8;
  }
  return v6;
}

//----- (0804BB91) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  return std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(a1, a2, a3);
}

//----- (0804BBB2) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator()
{
  ;
}

//----- (0804BBB7) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a2);
}

//----- (0804BBE4) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 8;
  return a1;
}

//----- (0804BBFA) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804BC04) --------------------------------------------------------
char *__cdecl std::copy<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(int a1, int a2, int a3)
{
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v4, a2);
  std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>((int)&v5, a1);
  return std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(
           v5,
           v4,
           a3);
}

//----- (0804BC4F) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804BC71) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,int *>(char a1, char a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a2);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(a1);
  return std::__copy_move_a<false,int const*,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804BCB5) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804BCC7) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804BCDA) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int const*,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804BCFF) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804BD14) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804BD5E) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int const*,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804BD70) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804BD80) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804BDDA) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804BDE0) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804F6F0;
  v3 = (void (__cdecl *)())off_804F6F0;
  if ( off_804F6F0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804F6F0: using guessed type int (*off_804F6F0)();

//----- (0804BE08) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 242 function(s)"
