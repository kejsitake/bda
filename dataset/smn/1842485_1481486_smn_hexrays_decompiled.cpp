/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int puts(const char *s);
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
void __cdecl solve(int a1, int a2);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I_d();
void *__cdecl operator new(unsigned int a1, void *a2);
unsigned int __cdecl std::__deque_buf_size(unsigned int a1);
void __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~queue(int a1);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::deque(int a1);
void __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~deque(int a1);
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::queue(int a1, int a2);
// int __userpurge std::make_pair<int,int>@<eax>(int a1, char a2, char a3);
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::push(int a1, int a2);
bool __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::empty(int a1);
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::front(int a1);
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::pop(int a1);
int __cdecl std::min<long long>(int a1, int a2);
void std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::~_Deque_impl();
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_base(int a1);
void __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~_Deque_base(int a1);
// int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end@<eax>(int a1, int a2);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(int a1, int a2);
void std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_destroy_data();
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::deque(int a1, int a2);
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(int a1, int a2);
bool __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::empty(int a1);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::front(int a1);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::pop_front(int a1);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::_Deque_impl(int a1);
void std::allocator<std::pair<int,int>>::~allocator();
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_initialize_map(int a1, unsigned int a2);
void **__cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3);
void __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_map(int a1, void *a2);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1);
unsigned int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(int a1);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_base(int a1, int a2, unsigned int a3);
// int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end@<eax>(int a1, int a2);
// int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>,std::pair<int,int>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
void *__cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::construct(int a1, void *a2, int a3);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_push_back_aux(int a1, int a2);
bool __cdecl std::operator==<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>(int a1, int a2);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator*(int a1);
void __gnu_cxx::new_allocator<std::pair<int,int>>::destroy();
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_pop_front_aux(int a1);
void std::allocator<std::pair<int,int>>::allocator();
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(int a1);
void __gnu_cxx::new_allocator<std::pair<int,int>>::~new_allocator();
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_map(int a1, unsigned int a2);
unsigned int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(int a1, int a2);
void __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_node(int a1, void *a2);
// int __userpurge std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_map_allocator@<eax>(int a1, int a2);
void std::allocator<std::pair<int,int> *>::~allocator();
void __cdecl __gnu_cxx::new_allocator<std::pair<int,int> *>::deallocate(int a1, void *a2);
unsigned int __cdecl std::operator-<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>(int a1, int a2);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::_Deque_impl(int a1);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_Deque_iterator(int a1, int a2);
// int __userpurge std::uninitialized_copy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_reserve_map_at_back(int a1, int a2);
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_node(int a1);
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
int __cdecl __gnu_cxx::new_allocator<std::pair<int,int> *>::allocate(int a1, unsigned int a2);
unsigned int std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_S_buffer_size();
void __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::deallocate(int a1, void *a2);
void std::allocator<std::pair<int,int> *>::allocator<std::pair<int,int>>();
void __gnu_cxx::new_allocator<std::pair<int,int> *>::~new_allocator();
void std::allocator<std::pair<int,int>>::allocator();
// int __userpurge std::__uninitialized_copy<false>::__uninit_copy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10);
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_reallocate_map(int a1, int a2, char a3);
int __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::allocate(int a1, unsigned int a2);
signed int __gnu_cxx::new_allocator<std::pair<int,int> *>::max_size();
void __gnu_cxx::new_allocator<std::pair<int,int> *>::new_allocator();
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
int __cdecl std::operator!=<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>(int a1, int a2);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::operator++(int a1);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator++(int a1);
int __cdecl std::__addressof<std::pair<int,int>>(int a1);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::operator*(int a1);
void *__cdecl std::_Construct<std::pair<int,int>,std::pair<int,int>>(void *a1, int a2);
void __cdecl std::_Destroy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>(int a1, int a2);
char *__cdecl std::copy<std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3);
int __cdecl std::copy_backward<std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3);
signed int __gnu_cxx::new_allocator<std::pair<int,int>>::max_size();
bool __cdecl std::operator==<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>(int a1, int a2);
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_M_set_node(int a1, int a2);
void std::_Destroy_aux<true>::__destroy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>();
int __cdecl std::__miter_base<std::pair<int,int> **>(int a1);
char *__cdecl std::__copy_move_a2<false,std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward_a2<false,std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3);
unsigned int std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_S_buffer_size();
int __cdecl std::_Iter_base<std::pair<int,int> **,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::pair<int,int> **>(int a1);
char *__cdecl std::__copy_move_a<false,std::pair<int,int> **,std::pair<int,int> **>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward_a<false,std::pair<int,int> **,std::pair<int,int> **>(void *src, int, int); // idb
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<std::pair<int,int> *>(void *src, int a2, void *dest);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,int> *>(void *src, int, int); // idb
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_804C4A0)() = &GLOBAL__sub_I_d; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
char completed_3328; // weak
int dtor_idx_3330; // weak
__int64 d[]; // weak
int l[]; // weak
int dword_805FF84[]; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080486B0) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048700: using guessed type int __gmon_start__(void);

//----- (08048810) --------------------------------------------------------
#error "8048813: positive sp value has been found (funcsize=2)"

//----- (08048840) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048840: could not find valid save-restore pair for ebp

//----- (08048870) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048870: could not find valid save-restore pair for ebp

//----- (080488B0) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 804C4A8: using guessed type int _DTOR_LIST__[];
// 804C690: using guessed type char completed_3328;
// 804C694: using guessed type int dtor_idx_3330;

//----- (08048900) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048900: could not find valid save-restore pair for ebp

//----- (08048930) --------------------------------------------------------
void __cdecl solve(int a1, int a2)
{
  __int64 v2; // rax@3
  __int64 v3; // rcx@7
  __int64 v4; // rax@7
  int v5; // eax@7
  int v6; // edx@7
  signed __int64 v7; // rax@10
  char v8; // [sp+18h] [bp-A0h]@1
  char v9; // [sp+40h] [bp-78h]@1
  char v10; // [sp+68h] [bp-50h]@4
  __int64 v11; // [sp+70h] [bp-48h]@7
  unsigned __int64 v12; // [sp+78h] [bp-40h]@7
  char v13; // [sp+84h] [bp-34h]@11
  int v14; // [sp+8Ch] [bp-2Ch]@7
  int v15; // [sp+90h] [bp-28h]@7
  int v16; // [sp+94h] [bp-24h]@7
  int v17; // [sp+98h] [bp-20h]@1
  char v18; // [sp+9Fh] [bp-19h]@1

  v18 = 0;
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::deque((int)&v9);
  std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::queue(
    (int)&v8,
    (int)&v9);
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~deque((int)&v9);
  v17 = 1;
  if ( 2 * d[0] >= a2 )
    v18 = 1;
  while ( v17 < a1 )
  {
    LODWORD(v2) = LODWORD(d[v17]);
    HIDWORD(v2) = HIDWORD(d[v17]);
    if ( 2 * d[0] < v2 )
      break;
    std::make_pair<int,int>((int)&v10, 0, v17);
    std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::push(
      (int)&v8,
      (int)&v10);
    ++v17;
  }
  while ( !std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::empty((int)&v8) )
  {
    v16 = *(_DWORD *)std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::front((int)&v8);
    v15 = *(_DWORD *)(std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::front((int)&v8)
                    + 4);
    std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::pop((int)&v8);
    LODWORD(v3) = LODWORD(d[v15]);
    HIDWORD(v3) = HIDWORD(d[v15]);
    HIDWORD(v4) = dword_805FF84[2 * v15];
    LODWORD(v4) = l[2 * v15];
    v11 = v3 + v4;
    LODWORD(v3) = LODWORD(d[v15]);
    HIDWORD(v3) = HIDWORD(d[v15]);
    HIDWORD(v4) = HIDWORD(d[v15]);
    LODWORD(v4) = LODWORD(d[v15]);
    v12 = v3 + v4 - __PAIR__(HIDWORD(d[v16]), LODWORD(d[v16]));
    v5 = std::min<long long>((int)&v12, (int)&v11);
    v6 = *(_DWORD *)(v5 + 4);
    v14 = *(_DWORD *)v5;
    if ( v14 >= a2 )
      v18 = 1;
    while ( v17 < a1 )
    {
      LODWORD(v7) = LODWORD(d[v17]);
      HIDWORD(v7) = HIDWORD(d[v17]);
      if ( v14 < v7 )
        break;
      std::make_pair<int,int>((int)&v13, v15, v17);
      std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::push(
        (int)&v8,
        (int)&v13);
      ++v17;
    }
  }
  if ( v18 )
    puts("YES");
  else
    puts("NO");
  std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~queue((int)&v8);
}
// 804C6A0: using guessed type __int64 d[];
// 805FF80: using guessed type int l[];
// 805FF84: using guessed type int dword_805FF84[];

//----- (08048BEC) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int *v3; // ebx@3
  int v4; // eax@3
  int v6; // [sp+1Ch] [bp-18h]@2
  int v7; // [sp+20h] [bp-14h]@5
  int v8; // [sp+24h] [bp-10h]@1
  int j; // [sp+28h] [bp-Ch]@2
  int i; // [sp+2Ch] [bp-8h]@1

  std::istream::operator>>(&std::cin, &v8);
  for ( i = 0; i < v8; ++i )
  {
    std::istream::operator>>(&std::cin, &v6);
    for ( j = 0; j < v6; ++j )
    {
      v3 = &l[2 * j];
      v4 = std::istream::operator>>(&std::cin, 8 * j + 134530720);
      std::istream::operator>>(v4, v3);
    }
    std::istream::operator>>(&std::cin, &v7);
    printf("Case #%d: ", i + 1);
    solve(v6, v7);
  }
  return 0;
}
// 8048780: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 80487D0: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);
// 805FF80: using guessed type int l[];

//----- (08048CDB) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 80486F0: using guessed type int __cxa_atexit(const char *, ...);

//----- (08048D1A) --------------------------------------------------------
int GLOBAL__sub_I_d()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (08048D36) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (08048D3E) --------------------------------------------------------
unsigned int __cdecl std::__deque_buf_size(unsigned int a1)
{
  unsigned int result; // eax@2

  if ( a1 > 0x1FF )
    result = 1;
  else
    result = 0x200 / a1;
  return result;
}

//----- (08048D60) --------------------------------------------------------
void __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~queue(int a1)
{
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~deque(a1);
}

//----- (08048D74) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::deque(int a1)
{
  return std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_base(a1);
}

//----- (08048D88) --------------------------------------------------------
void __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~deque(int a1)
{
  char v1; // [sp+10h] [bp-28h]@1
  char v2; // [sp+20h] [bp-18h]@1

  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end((int)&v1, a1);
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin((int)&v2, a1);
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_destroy_data();
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~_Deque_base(a1);
}

//----- (08048E12) --------------------------------------------------------
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::queue(int a1, int a2)
{
  return std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::deque(a1, a2);
}

//----- (08048E2C) --------------------------------------------------------
int __userpurge std::make_pair<int,int>@<eax>(int a1, char a2, char a3)
{
  std::pair<int,int>::pair(a1, (int)&a2, (int)&a3);
  return a1;
}

//----- (08048E52) --------------------------------------------------------
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::push(int a1, int a2)
{
  return std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(a1, a2);
}

//----- (08048E6C) --------------------------------------------------------
bool __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::empty(int a1)
{
  return std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::empty(a1);
}

//----- (08048E80) --------------------------------------------------------
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::front(int a1)
{
  return std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::front(a1);
}

//----- (08048E94) --------------------------------------------------------
int __cdecl std::queue<std::pair<int,int>,std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::pop(int a1)
{
  return std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::pop_front(a1);
}

//----- (08048EA7) --------------------------------------------------------
int __cdecl std::min<long long>(int a1, int a2)
{
  __int64 v2; // rcx@1
  __int64 v3; // rax@1
  int result; // eax@2

  LODWORD(v3) = *(_DWORD *)a1;
  HIDWORD(v2) = *(_DWORD *)(a2 + 4);
  HIDWORD(v3) = *(_DWORD *)(a1 + 4);
  LODWORD(v2) = *(_DWORD *)a2;
  if ( v2 >= v3 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08048ED2) --------------------------------------------------------
void std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::~_Deque_impl()
{
  std::allocator<std::pair<int,int>>::~allocator();
}

//----- (08048EE6) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_base(int a1)
{
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_initialize_map(a1, 0);
}

//----- (08048F2A) --------------------------------------------------------
void __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~_Deque_base(int a1)
{
  int v1; // ST08_4@2

  if ( *(_DWORD *)a1 )
  {
    std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_destroy_nodes(
      a1,
      *(void ***)(a1 + 20),
      *(_DWORD *)(a1 + 36) + 4);
    v1 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_map(a1, *(void **)a1);
  }
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::~_Deque_impl();
}

//----- (08048FA4) --------------------------------------------------------
int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1, a2 + 8);
  return a1;
}

//----- (08048FC6) --------------------------------------------------------
int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1, a2 + 24);
  return a1;
}

//----- (08048FE8) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08048FF0) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (08049024) --------------------------------------------------------
void std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_destroy_data()
{
  ;
}

//----- (0804902C) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::deque(int a1, int a2)
{
  unsigned int v2; // ebx@1
  int v3; // eax@1
  char v5; // [sp+30h] [bp-48h]@1
  char v6; // [sp+40h] [bp-38h]@1
  int v7; // [sp+50h] [bp-28h]@1
  int v8; // [sp+54h] [bp-24h]@1
  int v9; // [sp+58h] [bp-20h]@1
  int v10; // [sp+5Ch] [bp-1Ch]@1
  int v11; // [sp+60h] [bp-18h]@1
  int v12; // [sp+64h] [bp-14h]@1
  int v13; // [sp+68h] [bp-10h]@1
  int v14; // [sp+6Ch] [bp-Ch]@1

  v2 = std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(a2);
  v3 = std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a2);
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_base(a1, v3, v2);
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a1);
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator((int)&v6, a1 + 8);
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end((int)&v7, a2);
  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin((int)&v11, a2);
  return std::__uninitialized_copy_a<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>,std::pair<int,int>>(
           (int)&v5,
           v11,
           v12,
           v13,
           v14,
           v7,
           v8,
           v9,
           v10,
           (int)&v6);
}

//----- (0804911A) --------------------------------------------------------
int __cdecl std::pair<int,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (08049134) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 32) - 8 )
  {
    result = std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_push_back_aux(a1, a2);
  }
  else
  {
    __gnu_cxx::new_allocator<std::pair<int,int>>::construct(a1, *(void **)(a1 + 24), a2);
    result = a1;
    *(_DWORD *)(a1 + 24) += 8;
  }
  return result;
}

//----- (0804918E) --------------------------------------------------------
bool __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::empty(int a1)
{
  return std::operator==<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>(a1 + 24, a1 + 8);
}

//----- (080491AE) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::front(int a1)
{
  char v2; // [sp+10h] [bp-18h]@1

  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin((int)&v2, a1);
  return std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator*((int)&v2);
}

//----- (080491D6) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::pop_front(int a1)
{
  int v1; // ST04_4@2
  int result; // eax@2

  if ( *(_DWORD *)(a1 + 8) == *(_DWORD *)(a1 + 16) - 8 )
  {
    result = std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_pop_front_aux(a1);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 8);
    __gnu_cxx::new_allocator<std::pair<int,int>>::destroy();
    result = a1;
    *(_DWORD *)(a1 + 8) += 8;
  }
  return result;
}

//----- (08049222) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<std::pair<int,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1 + 24);
}

//----- (08049264) --------------------------------------------------------
void std::allocator<std::pair<int,int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::~new_allocator();
}

//----- (08049278) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_initialize_map(int a1, unsigned int a2)
{
  unsigned int v2; // eax@1
  int v3; // ebx@1
  unsigned int v4; // edx@1
  int result; // eax@1
  unsigned int v6; // [sp+1Ch] [bp-2Ch]@1
  int v7; // [sp+20h] [bp-28h]@1
  unsigned int v8; // [sp+24h] [bp-24h]@1
  unsigned int v9; // [sp+28h] [bp-20h]@1
  unsigned int v10; // [sp+2Ch] [bp-1Ch]@1

  v2 = std::__deque_buf_size(8u);
  v10 = a2 / v2 + 1;
  v6 = a2 / v2 + 3;
  v7 = 8;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)std::max<unsigned int>((int)&v7, (int)&v6);
  *(_DWORD *)a1 = std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_map(
                    a1,
                    *(_DWORD *)(a1 + 4));
  v9 = *(_DWORD *)a1 + 4 * ((*(_DWORD *)(a1 + 4) - v10) >> 1);
  v8 = 4 * v10 + v9;
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_create_nodes(a1, v9, v8);
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(a1 + 8, v9);
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(a1 + 24, v8 - 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 28);
  v4 = v3 + 8 * (a2 % std::__deque_buf_size(8u));
  result = a1;
  *(_DWORD *)(a1 + 24) = v4;
  return result;
}

//----- (080493E4) --------------------------------------------------------
void **__cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_destroy_nodes(int a1, void **a2, unsigned int a3)
{
  void **result; // eax@3
  void **i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; ++i )
  {
    result = i;
    if ( (unsigned int)i >= a3 )
      break;
    std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_node(a1, *i);
  }
  return result;
}

//----- (08049414) --------------------------------------------------------
void __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_map(int a1, void *a2)
{
  int v2; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_map_allocator((int)&v2, a1);
  __gnu_cxx::new_allocator<std::pair<int,int> *>::deallocate((int)&v2, a2);
  std::allocator<std::pair<int,int> *>::~allocator();
}

//----- (08049456) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804945E) --------------------------------------------------------
unsigned int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(int a1)
{
  return std::operator-<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>(a1 + 24, a1 + 8);
}

//----- (0804947E) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_base(int a1, int a2, unsigned int a3)
{
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::_Deque_impl(a1);
  return std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_initialize_map(a1, a3);
}

//----- (080494C8) --------------------------------------------------------
int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::begin@<eax>(int a1, int a2)
{
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_Deque_iterator(
    a1,
    a2 + 8);
  return a1;
}

//----- (080494EA) --------------------------------------------------------
int __userpurge std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::end@<eax>(int a1, int a2)
{
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_Deque_iterator(
    a1,
    a2 + 24);
  return a1;
}

//----- (0804950C) --------------------------------------------------------
int __userpurge std::__uninitialized_copy_a<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>,std::pair<int,int>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator((int)&v11, a10);
  std::uninitialized_copy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (08049582) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1
  void *v4; // ecx@1
  int v5; // edx@2

  result = operator new(8u, a2);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(a3 + 4);
    result = *(void **)a3;
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *((_DWORD *)v4 + 1) = v5;
  }
  return result;
}

//----- (080495B0) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_push_back_aux(int a1, int a2)
{
  int v2; // ebx@1
  int result; // eax@1

  std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_reserve_map_at_back(a1, 1);
  v2 = *(_DWORD *)(a1 + 36) + 4;
  *(_DWORD *)v2 = std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_node(a1);
  __gnu_cxx::new_allocator<std::pair<int,int>>::construct(a1, *(void **)(a1 + 24), a2);
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(
    a1 + 24,
    *(_DWORD *)(a1 + 36) + 4);
  result = a1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
  return result;
}

//----- (08049663) --------------------------------------------------------
bool __cdecl std::operator==<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (08049678) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (08049682) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::destroy()
{
  ;
}

//----- (08049688) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_pop_front_aux(int a1)
{
  int v1; // ST04_4@1
  int result; // eax@1

  v1 = *(_DWORD *)(a1 + 8);
  __gnu_cxx::new_allocator<std::pair<int,int>>::destroy();
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_node(a1, *(void **)(a1 + 12));
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(
    a1 + 8,
    *(_DWORD *)(a1 + 20) + 4);
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return result;
}

//----- (080496E2) --------------------------------------------------------
void std::allocator<std::pair<int,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
}

//----- (080496F6) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(int a1)
{
  int result; // eax@1

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = a1;
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

//----- (08049722) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::~new_allocator()
{
  ;
}

//----- (08049727) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (08049742) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_map(int a1, unsigned int a2)
{
  int v2; // ebx@1
  char v4; // [sp+1Fh] [bp-9h]@1

  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_map_allocator((int)&v4, a1);
  v2 = __gnu_cxx::new_allocator<std::pair<int,int> *>::allocate((int)&v4, a2);
  std::allocator<std::pair<int,int> *>::~allocator();
  return v2;
}

//----- (080497A6) --------------------------------------------------------
unsigned int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_create_nodes(int a1, unsigned int a2, unsigned int a3)
{
  unsigned int result; // eax@3
  unsigned int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a2; ; i += 4 )
  {
    result = i;
    if ( i >= a3 )
      break;
    *(_DWORD *)i = std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_node(a1);
  }
  return result;
}

//----- (08049810) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2 + 8 * std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (08049848) --------------------------------------------------------
void __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_node(int a1, void *a2)
{
  std::__deque_buf_size(8u);
  __gnu_cxx::new_allocator<std::pair<int,int>>::deallocate(a1, a2);
}

//----- (08049872) --------------------------------------------------------
int __userpurge std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_map_allocator@<eax>(int a1, int a2)
{
  std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_get_Tp_allocator(a2);
  std::allocator<std::pair<int,int> *>::allocator<std::pair<int,int>>();
  return a1;
}

//----- (0804989A) --------------------------------------------------------
void std::allocator<std::pair<int,int> *>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int> *>::~new_allocator();
}

//----- (080498AE) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::pair<int,int> *>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (080498C1) --------------------------------------------------------
unsigned int __cdecl std::operator-<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>(int a1, int a2)
{
  return (((*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12)) >> 2) - 1)
       * std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_S_buffer_size()
       + ((*(_DWORD *)a1 - *(_DWORD *)(a1 + 4)) >> 3)
       + ((*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >> 3);
}

//----- (08049916) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Deque_impl::_Deque_impl(int a1)
{
  std::allocator<std::pair<int,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1 + 8);
  return std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1 + 24);
}

//----- (08049960) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_Deque_iterator(int a1, int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = a1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

//----- (08049993) --------------------------------------------------------
int __userpurge std::uninitialized_copy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  char v11; // [sp+30h] [bp-18h]@1

  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator((int)&v11, a10);
  std::__uninitialized_copy<false>::__uninit_copy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    (int)&v11);
  return a1;
}

//----- (08049A0A) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_reserve_map_at_back(int a1, int a2)
{
  int result; // eax@1

  result = *(_DWORD *)(a1 + 4) - ((*(_DWORD *)(a1 + 36) - *(_DWORD *)a1) >> 2);
  if ( a2 + 1 > (unsigned int)result )
    result = std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_reallocate_map(a1, a2, 0);
  return result;
}

//----- (08049A5A) --------------------------------------------------------
int __cdecl std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_node(int a1)
{
  unsigned int v1; // eax@1

  v1 = std::__deque_buf_size(8u);
  return __gnu_cxx::new_allocator<std::pair<int,int>>::allocate(a1, v1);
}

//----- (08049A86) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator()
{
  ;
}

//----- (08049A8C) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::pair<int,int> *>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::pair<int,int> *>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (08049ABC) --------------------------------------------------------
unsigned int std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_S_buffer_size()
{
  return std::__deque_buf_size(8u);
}

//----- (08049AD0) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (08049AE4) --------------------------------------------------------
void std::allocator<std::pair<int,int> *>::allocator<std::pair<int,int>>()
{
  __gnu_cxx::new_allocator<std::pair<int,int> *>::new_allocator();
}

//----- (08049AF8) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int> *>::~new_allocator()
{
  ;
}

//----- (08049AFE) --------------------------------------------------------
void std::allocator<std::pair<int,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator();
}

//----- (08049B18) --------------------------------------------------------
int __userpurge std::__uninitialized_copy<false>::__uninit_copy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>,std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>@<eax>(int a1, char a2, int a3, int a4, int a5, char a6, int a7, int a8, int a9, int a10)
{
  int v10; // ebx@2
  int v11; // eax@2
  int v12; // eax@2

  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator(a1, a10);
  while ( (unsigned __int8)std::operator!=<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>(
                             (int)&a2,
                             (int)&a6) )
  {
    v10 = std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::operator*((int)&a2);
    v11 = std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator*(a1);
    v12 = std::__addressof<std::pair<int,int>>(v11);
    std::_Construct<std::pair<int,int>,std::pair<int,int>>((void *)v12, v10);
    std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::operator++((int)&a2);
    std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator++(a1);
  }
  return a1;
}

//----- (08049BF0) --------------------------------------------------------
int __cdecl std::deque<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_reallocate_map(int a1, int a2, char a3)
{
  int v3; // eax@3
  int v4; // ebx@8
  int v5; // eax@9
  int v6; // ST08_4@11
  char v8; // [sp+Ch] [bp-2Ch]@1
  int v9; // [sp+1Ch] [bp-1Ch]@8
  unsigned int v10; // [sp+20h] [bp-18h]@8
  int v11; // [sp+24h] [bp-14h]@1
  int v12; // [sp+28h] [bp-10h]@1
  int v13; // [sp+2Ch] [bp-Ch]@5

  v8 = a3;
  v12 = ((*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 20)) >> 2) + 1;
  v11 = a2 + v12;
  if ( *(_DWORD *)(a1 + 4) <= (unsigned int)(2 * (a2 + v12)) )
  {
    v4 = *(_DWORD *)(a1 + 4);
    v10 = v4 + *(_DWORD *)std::max<unsigned int>(a1 + 4, (int)&a2) + 2;
    v9 = std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_allocate_map(a1, v10);
    if ( v8 )
      v5 = 4 * a2;
    else
      v5 = 0;
    v13 = v5 + 4 * ((v10 - v11) >> 1) + v9;
    std::copy<std::pair<int,int> **,std::pair<int,int> **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
    v6 = *(_DWORD *)(a1 + 4);
    std::_Deque_base<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_M_deallocate_map(a1, *(void **)a1);
    *(_DWORD *)a1 = v9;
    *(_DWORD *)(a1 + 4) = v10;
  }
  else
  {
    if ( a3 )
      v3 = 4 * a2;
    else
      v3 = 0;
    v13 = *(_DWORD *)a1 + 4 * ((unsigned int)(*(_DWORD *)(a1 + 4) - v11) >> 1) + v3;
    if ( *(_DWORD *)(a1 + 20) <= (unsigned int)v13 )
      std::copy_backward<std::pair<int,int> **,std::pair<int,int> **>(
        *(_DWORD *)(a1 + 20),
        *(_DWORD *)(a1 + 36) + 4,
        4 * v12 + v13);
    else
      std::copy<std::pair<int,int> **,std::pair<int,int> **>(*(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 36) + 4, v13);
  }
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(a1 + 8, v13);
  return std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(
           a1 + 24,
           v13 + 4 * (v12 + 0x3FFFFFFF));
}

//----- (08049DC8) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::pair<int,int>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::pair<int,int>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (08049DF8) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::pair<int,int> *>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (08049E02) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int> *>::new_allocator()
{
  ;
}

//----- (08049E08) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<int,int>>::new_allocator()
{
  ;
}

//----- (08049E0D) --------------------------------------------------------
int __cdecl std::operator!=<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>(int a1, int a2)
{
  int v2; // eax@1

  LOBYTE(v2) = std::operator==<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>(a1, a2);
  return v2 ^ 1;
}

//----- (08049E2A) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::operator++(int a1)
{
  *(_DWORD *)a1 += 8;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_M_set_node(
      a1,
      *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (08049E74) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::operator++(int a1)
{
  *(_DWORD *)a1 += 8;
  if ( *(_DWORD *)a1 == *(_DWORD *)(a1 + 8) )
  {
    std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_M_set_node(
      a1,
      *(_DWORD *)(a1 + 12) + 4);
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
  }
  return a1;
}

//----- (08049EBE) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<int,int>>(int a1)
{
  return a1;
}

//----- (08049EC6) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (08049ED0) --------------------------------------------------------
void *__cdecl std::_Construct<std::pair<int,int>,std::pair<int,int>>(void *a1, int a2)
{
  void *result; // eax@1
  void *v3; // ecx@1
  int v4; // edx@2

  result = operator new(8u, a1);
  v3 = result;
  if ( result )
  {
    v4 = *(_DWORD *)(a2 + 4);
    result = *(void **)a2;
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *((_DWORD *)v3 + 1) = v4;
  }
  return result;
}

//----- (08049EFE) --------------------------------------------------------
void __cdecl std::_Destroy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>(int a1, int a2)
{
  char v2; // [sp+10h] [bp-28h]@1
  char v3; // [sp+20h] [bp-18h]@1

  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator((int)&v2, a2);
  std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>::_Deque_iterator((int)&v3, a1);
  std::_Destroy_aux<true>::__destroy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>();
}

//----- (08049F3C) --------------------------------------------------------
char *__cdecl std::copy<std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<int,int> **>(a2);
  v4 = std::__miter_base<std::pair<int,int> **>(a1);
  return std::__copy_move_a2<false,std::pair<int,int> **,std::pair<int,int> **>(v4, v3, a3);
}

//----- (08049F74) --------------------------------------------------------
int __cdecl std::copy_backward<std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<int,int> **>(a2);
  v4 = std::__miter_base<std::pair<int,int> **>(a1);
  return std::__copy_move_backward_a2<false,std::pair<int,int> **,std::pair<int,int> **>(v4, v3, a3);
}

//----- (08049FAC) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::pair<int,int>>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (08049FB6) --------------------------------------------------------
bool __cdecl std::operator==<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>(int a1, int a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2;
}

//----- (08049FCA) --------------------------------------------------------
int __cdecl std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_M_set_node(int a1, int a2)
{
  int v2; // ebx@1
  unsigned int v3; // edx@1
  int result; // eax@1

  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = v2
     + 8
     * std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_S_buffer_size();
  result = a1;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

//----- (0804A002) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<std::_Deque_iterator<std::pair<int,int>,std::pair<int,int>&,std::pair<int,int>*>>()
{
  ;
}

//----- (0804A007) --------------------------------------------------------
int __cdecl std::__miter_base<std::pair<int,int> **>(int a1)
{
  return std::_Iter_base<std::pair<int,int> **,false>::_S_base(a1);
}

//----- (0804A01A) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<int,int> **>(a3);
  v4 = std::__niter_base<std::pair<int,int> **>(a2);
  v5 = std::__niter_base<std::pair<int,int> **>(a1);
  return std::__copy_move_a<false,std::pair<int,int> **,std::pair<int,int> **>((void *)v5, v4, (void *)v3);
}

//----- (0804A05E) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::pair<int,int> **,std::pair<int,int> **>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<int,int> **>(a3);
  v4 = std::__niter_base<std::pair<int,int> **>(a2);
  v5 = std::__niter_base<std::pair<int,int> **>(a1);
  return std::__copy_move_backward_a<false,std::pair<int,int> **,std::pair<int,int> **>((void *)v5, v4, v3);
}

//----- (0804A0A2) --------------------------------------------------------
unsigned int std::_Deque_iterator<std::pair<int,int>,std::pair<int,int> const&,std::pair<int,int> const*>::_S_buffer_size()
{
  return std::__deque_buf_size(8u);
}

//----- (0804A0B6) --------------------------------------------------------
int __cdecl std::_Iter_base<std::pair<int,int> **,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804A0BE) --------------------------------------------------------
int __cdecl std::__niter_base<std::pair<int,int> **>(int a1)
{
  return std::_Iter_base<std::pair<int,int> **,false>::_S_base(a1);
}

//----- (0804A0D1) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,std::pair<int,int> **,std::pair<int,int> **>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<std::pair<int,int> *>(src, a2, dest);
}

//----- (0804A0F6) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::pair<int,int> **,std::pair<int,int> **>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,int> *>(
           src,
           a2,
           a3);
}

//----- (0804A11B) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<std::pair<int,int> *>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804A164) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<std::pair<int,int> *>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804A1C0) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804A1D0) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804A22A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804A230) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_804C4A0;
  v3 = (void (__cdecl *)())off_804C4A0;
  if ( off_804C4A0 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 804C4A0: using guessed type int (*off_804C4A0)();

//----- (0804A258) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 111 function(s)"
