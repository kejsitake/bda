/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2014 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int init_proc();
// _DWORD __cdecl std::__throw_length_error(const char *); idb
// _DWORD std::string::string(std::string *this); idb
// int __cxa_atexit(const char *, ...); weak
// int __gmon_start__(void); weak
// int __cdecl std::string::operator[](_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD std::string::size(std::string *this); idb
// _DWORD std::ios_base::Init::Init(std::ios_base::Init *this); idb
// _DWORD __cdecl std::string::string(std::string *this, const std::string *); idb
// _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this); idb
// int __cdecl std::operator>><char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD); weak
// _DWORD __cdecl std::string::~string(std::string *this); idb
// FILE *freopen(const char *filename, const char *modes, FILE *stream);
// int printf(const char *format, ...);
// _DWORD __cdecl operator new(unsigned int); idb
// int __cdecl std::istream::operator>>(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// int puts(const char *s);
// _DWORD std::__throw_bad_alloc(void); idb
// int __cdecl std::string::operator=(_DWORD, _DWORD); weak
signed int deregister_tm_clones();
int register_tm_clones();
void _do_global_dtors_aux();
int frame_dummy();
void __cdecl Solved(int a1);
int __cdecl main(int argc, const char **argv, const char **envp);
int __cdecl __static_initialization_and_destruction_0(int a1, int a2);
int GLOBAL__sub_I__Z6Solvedi();
int __cdecl std::__lg(int a1);
void *__cdecl operator new(unsigned int a1, void *a2);
void __cdecl operator delete();
int __cdecl std::vector<std::string,std::allocator<std::string>>::vector(int a1);
void __cdecl std::vector<std::string,std::allocator<std::string>>::~vector(int a1);
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::vector(int a1);
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~vector(int a1);
void __cdecl std::vector<std::string,std::allocator<std::string>>::resize(int a1, int a2, std::string *a3);
int __cdecl std::vector<std::string,std::allocator<std::string>>::operator[](int a1, int a2);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1);
void __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(int a1);
// int __userpurge std::make_pair<char,int>@<eax>(int a1, char a2, char a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::push_back(int a1, int a2);
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::push_back(int a1, int a2);
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](int a1, int a2);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(int a1);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1);
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1);
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2);
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, int a2);
int __cdecl std::vector<int,std::allocator<int>>::size(int a1);
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2);
void std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::string *,std::string>(int a1, int a2);
void std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
int __cdecl std::vector<std::string,std::allocator<std::string>>::size(int a1);
// int __userpurge std::vector<std::string,std::allocator<std::string>>::end@<eax>(int a1, int a2);
void __cdecl std::vector<std::string,std::allocator<std::string>>::insert(int a1, char a2, int a3, std::string *a4);
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(int a1, int a2);
void std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
int __cdecl std::pair<char,int>::pair(int a1, int a2, int a3);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(int a1, void *a2, int a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2);
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, void *a2, int a3);
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_insert_aux(int a1, char a2, int a3);
// int __userpurge std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::end@<eax>(int a1, int a2);
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1);
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
void std::_Destroy<int *,int>();
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3);
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2);
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(char a1, int a2, int a3);
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::string>::~allocator();
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Destroy<std::string *>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator();
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(int a1, void *a2);
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(int a1, int a2);
void __cdecl std::vector<std::string,std::allocator<std::string>>::_M_fill_insert(int a1, char a2, int a3, std::string *a4);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<std::pair<char,int>>::~allocator();
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<std::pair<char,int> *>();
void *__cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1);
int __cdecl std::copy_backward<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::destroy();
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2);
void *__cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::construct(int a1, void *a2, int a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base(int a1);
int __cdecl std::copy_backward<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::operator*(int a1);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator=(int a1, int a2);
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::begin@<eax>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>(int a1, int a2);
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(int a1, int a2, int a3);
void __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::destroy(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::__normal_iterator(int a1, int a2);
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1);
void std::allocator<int>::~allocator();
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2);
void std::_Destroy<int *>();
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1);
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1);
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int, int, char *); // idb
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3);
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy();
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3);
// int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3);
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2);
void std::allocator<std::string>::allocator();
void __gnu_cxx::new_allocator<std::string>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::string>::deallocate(int a1, void *a2);
int __cdecl std::_Destroy_aux<false>::__destroy<std::string *>(int a1, int a2);
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator();
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::deallocate(int a1, void *a2);
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2);
int __cdecl __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2);
int __cdecl std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3);
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(int a1);
int __cdecl std::copy_backward<std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl std::fill<std::string *,std::string>(int a1, int a2, int a3);
std::string *__cdecl std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(int a1, int a2, std::string *a3);
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_check_len(int, int, char *); // idb
// int __userpurge std::vector<std::string,std::allocator<std::string>>::begin@<eax>(int a1, int a2);
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3);
void std::allocator<std::pair<char,int>>::allocator();
void __gnu_cxx::new_allocator<std::pair<char,int>>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<std::pair<char,int> *>();
int __cdecl std::__miter_base<std::pair<char,int> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
signed int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(int a1);
int __cdecl std::max<unsigned int>(int a1, int a2);
int __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<std::pair<char,int>>::destroy();
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::_S_select_on_copy(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1, unsigned int a2);
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2);
// int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2);
int __cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(char a1, char a2, int a3);
int __cdecl std::__miter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::capacity(int a1);
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(int a1, int a2, char a3, char a4);
// int __userpurge std::copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,__gnu_cxx::__normal_iterator<std::pair<char,int>*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>@<eax>(int a1, int a2, int a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>>();
int __cdecl std::copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::size(int a1);
signed int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocate(int a1, unsigned int a2);
int __cdecl std::__uninitialized_copy_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3);
void __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::destroy(int a1, int a2);
void std::allocator<int>::allocator();
void __gnu_cxx::new_allocator<int>::~new_allocator();
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2);
void std::_Destroy_aux<true>::__destroy<int *>();
int __cdecl std::__miter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3);
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2);
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::destroy();
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3);
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3);
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3);
// int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4);
bool __cdecl __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1);
// int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4);
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1);
void __gnu_cxx::new_allocator<std::string>::new_allocator();
int __cdecl std::__addressof<std::string>(int a1);
int __cdecl std::_Destroy<std::string>(std::string *); // idb
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator();
int __cdecl std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1);
void __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1);
int __cdecl std::__uninitialized_copy_a<std::string *,std::string *,std::string>(std::string *, int, int); // idb
int __cdecl std::__miter_base<std::string *>(int a1);
int __cdecl std::__copy_move_backward_a2<false,std::string *,std::string *>(int a1, int a2, int a3);
int __cdecl std::__niter_base<std::string *>(int a1);
int __cdecl std::__fill_a<std::string *,std::string>(int a1, int a2, int a3);
std::string *__cdecl std::uninitialized_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3);
signed int __cdecl std::vector<std::string,std::allocator<std::string>>::max_size(int a1);
int __cdecl __gnu_cxx::new_allocator<std::string>::allocate(int a1, unsigned int a2);
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
int __cdecl std::_Iter_base<std::pair<char,int> *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::pair<char,int> *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::max_size();
signed int __gnu_cxx::new_allocator<std::pair<char,int>>::max_size();
int __cdecl std::uninitialized_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1);
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_create_storage(int a1, unsigned int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2);
int __cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3);
int __cdecl std::_Iter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,false>::_S_base(int a1);
int __cdecl std::__niter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1);
int __cdecl std::__copy_move_backward_a<false,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,__gnu_cxx::__normal_iterator<std::pair<char,int>*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>@<eax>(int a1, char a2, char a3, char a4);
void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>();
int __cdecl std::__copy_move_a2<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size();
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size();
int __cdecl std::uninitialized_copy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3);
void __gnu_cxx::new_allocator<int>::new_allocator();
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1);
int __cdecl std::__niter_base<int *>(int a1);
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int, int); // idb
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<int>::max_size();
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3);
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
bool __cdecl __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>(int a1, int a2);
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3);
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--(int a1);
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2);
// int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4);
int __cdecl std::uninitialized_copy<std::string *,std::string *>(std::string *, int, int); // idb
int __cdecl std::_Iter_base<std::string *,false>::_S_base(int a1);
int __cdecl std::__copy_move_backward_a<false,std::string *,std::string *>(int a1, int a2, int a3);
std::string *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3);
signed int __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size();
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1);
signed int __gnu_cxx::new_allocator<std::string>::max_size();
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
void std::allocator<std::pair<char,int>>::allocator();
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3);
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(char a1);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(char a1);
int __cdecl std::__copy_move_a<false,std::pair<char,int> const*,std::pair<char,int>*>(int a1, int a2, int a3);
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>();
int __cdecl std::__copy_move_a<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3);
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int, int); // idb
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4);
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2);
// int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2);
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1);
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(std::string *, int, int); // idb
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(int a1, int a2, int a3);
std::string *__cdecl std::_Construct<std::string,std::string>(void *a1, std::string *a2);
int __cdecl std::__addressof<std::pair<char,int>>(int a1);
void *__cdecl std::_Construct<std::pair<char,int>,std::pair<char,int>>(void *a1, int a2);
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
bool __cdecl __gnu_cxx::operator!=<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator++(int a1);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,true>::_S_base(char a1);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,true>::_S_base(char a1);
int __cdecl std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::pair<char,int> const*,std::pair<char,int>*>(int a1, int a2, int a3);
int __cdecl std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3);
void *__cdecl std::_Construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(void *a1, int a2);
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3);
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4);
int __cdecl std::swap<int>(int a1, int a2);
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1);
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1);
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3);
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest);
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest);
void _libc_csu_fini(); // idb
void __cdecl _libc_csu_init();
void _i686_get_pc_thunk_bx();
int __fastcall _do_global_ctors_aux(int a1, int a2);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

int (*off_8051788)() = &GLOBAL__sub_I__Z6Solvedi; // weak
int _DTOR_LIST__[] = { 4294967295 }; // weak
_UNKNOWN _DTOR_END__; // weak
_UNKNOWN _dso_handle; // weak
_UNKNOWN std::cin; // weak
FILE *stdin; // idb
FILE *stdout; // idb
char completed_3328; // weak
int dtor_idx_3330; // weak
_UNKNOWN std::__ioinit; // weak
// extern _UNKNOWN _gmon_start__; weak


//----- (080488C0) --------------------------------------------------------
int init_proc()
{
  int v0; // edx@3
  int v1; // ecx@3
  int v3; // [sp+0h] [bp-8h]@0

  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  _do_global_ctors_aux(v1, v0);
  return v3;
}
// 8048930: using guessed type int __gmon_start__(void);

//----- (08048AA0) --------------------------------------------------------
#error "8048AA3: positive sp value has been found (funcsize=2)"

//----- (08048AD0) --------------------------------------------------------
signed int deregister_tm_clones()
{
  return 3;
}
// 8048AD0: could not find valid save-restore pair for ebp

//----- (08048B00) --------------------------------------------------------
int register_tm_clones()
{
  return 0;
}
// 8048B00: could not find valid save-restore pair for ebp

//----- (08048B40) --------------------------------------------------------
void _do_global_dtors_aux()
{
  int v0; // eax@2
  int i; // ebx@2

  if ( !completed_3328 )
  {
    v0 = dtor_idx_3330;
    for ( i = ((&_DTOR_END__ - (_UNKNOWN *)_DTOR_LIST__) >> 2) - 1; dtor_idx_3330 < (unsigned int)i; v0 = dtor_idx_3330 )
    {
      dtor_idx_3330 = v0 + 1;
      ((void (*)(void))_DTOR_LIST__[v0 + 1])();
    }
    deregister_tm_clones();
    completed_3328 = 1;
  }
}
// 8051790: using guessed type int _DTOR_LIST__[];
// 80519A4: using guessed type char completed_3328;
// 80519A8: using guessed type int dtor_idx_3330;

//----- (08048B90) --------------------------------------------------------
int frame_dummy()
{
  return register_tm_clones();
}
// 8048B90: could not find valid save-restore pair for ebp

//----- (08048BC0) --------------------------------------------------------
void __cdecl Solved(int a1)
{
  int v1; // eax@2
  int v2; // ebx@6
  int v3; // eax@6
  int v4; // ebx@7
  int v5; // eax@7
  char v6; // ST0F_1@7
  int v7; // ebx@7
  int v8; // eax@7
  bool v9; // al@8
  int v10; // ebx@11
  int v11; // eax@11
  char *v12; // eax@11
  int v13; // ebx@14
  int v14; // eax@14
  int v15; // eax@18
  int v16; // ebx@18
  int v17; // eax@18
  int v18; // ebx@21
  int v19; // eax@21
  char v20; // ST0F_1@21
  int v21; // ebx@21
  int v22; // eax@21
  unsigned int v23; // ebx@24
  int v24; // eax@24
  int v25; // ebx@29
  int v26; // eax@29
  int v27; // eax@29
  int v28; // ebx@32
  int v29; // eax@32
  int v30; // ebx@32
  int v31; // eax@32
  unsigned int v32; // ebx@35
  int v33; // eax@35
  char v34; // [sp+1Ch] [bp-7Ch]@28
  char v35; // [sp+28h] [bp-70h]@5
  char v36; // [sp+34h] [bp-64h]@1
  int v37; // [sp+40h] [bp-58h]@1
  int v38; // [sp+4Ch] [bp-4Ch]@1
  char v39; // [sp+50h] [bp-48h]@1
  char v40; // [sp+54h] [bp-44h]@11
  int v41; // [sp+5Ch] [bp-3Ch]@31
  int v42; // [sp+60h] [bp-38h]@31
  int v43; // [sp+64h] [bp-34h]@31
  int jj; // [sp+68h] [bp-30h]@31
  int ii; // [sp+6Ch] [bp-2Ch]@28
  unsigned int n; // [sp+70h] [bp-28h]@27
  unsigned int m; // [sp+74h] [bp-24h]@20
  int l; // [sp+78h] [bp-20h]@17
  int v49; // [sp+7Ch] [bp-1Ch]@17
  int k; // [sp+80h] [bp-18h]@5
  int v51; // [sp+84h] [bp-14h]@5
  int j; // [sp+88h] [bp-10h]@4
  int i; // [sp+8Ch] [bp-Ch]@1

  std::vector<std::string,std::allocator<std::string>>::vector((int)&v37);
  std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::vector((int)&v36);
  std::istream::operator>>(&std::cin, &v38);
  std::string::string((std::string *)&v39);
  std::vector<std::string,std::allocator<std::string>>::resize((int)&v37, v38, (std::string *)&v39);
  std::string::~string((std::string *)&v39);
  for ( i = 0; i < v38; ++i )
  {
    v1 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v37, i);
    std::operator>><char,std::char_traits<char>,std::allocator<char>>(&std::cin, v1);
  }
  for ( j = 0; j < v38; ++j )
  {
    v51 = 1;
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector((int)&v35);
    for ( k = 1; ; ++k )
    {
      v13 = k;
      v14 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v37, j);
      if ( (unsigned int)v13 > std::string::size((std::string *)v14) )
        break;
      v2 = k;
      v3 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v37, j);
      v9 = 1;
      if ( v2 != std::string::size((std::string *)v3) )
      {
        v4 = k - 1;
        v5 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v37, j);
        v6 = *(_BYTE *)std::string::operator[](v5, v4);
        v7 = k;
        v8 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v37, j);
        if ( v6 == *(_BYTE *)std::string::operator[](v8, v7) )
          v9 = 0;
      }
      if ( v9 )
      {
        v10 = k - 1;
        v11 = std::vector<std::string,std::allocator<std::string>>::operator[]((int)&v37, j);
        v12 = (char *)std::string::operator[](v11, v10);
        std::make_pair<char,int>((int)&v40, *v12, v51);
        std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::push_back((int)&v35, (int)&v40);
        v51 = 1;
      }
      else
      {
        ++v51;
      }
    }
    std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::push_back(
      (int)&v36,
      (int)&v35);
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector((int)&v35);
  }
  printf("Case #%d: ", a1);
  v49 = 0;
  for ( l = 0; l < v38; ++l )
  {
    v15 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
            (int)&v36,
            l);
    v16 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v15);
    v17 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
            (int)&v36,
            0);
    if ( v16 != std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v17) )
    {
      puts("Fegla Won");
      goto LABEL_37;
    }
    for ( m = 0; ; ++m )
    {
      v23 = m;
      v24 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v36,
              0);
      if ( v23 >= std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v24) )
        break;
      v18 = m;
      v19 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v36,
              0);
      v20 = *(_BYTE *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](v19, v18);
      v21 = m;
      v22 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v36,
              l);
      if ( v20 != *(_BYTE *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](v22, v21) )
      {
        puts("Fegla Won");
        goto LABEL_37;
      }
    }
  }
  for ( n = 0; ; ++n )
  {
    v32 = n;
    v33 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
            (int)&v36,
            0);
    if ( v32 >= std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(v33) )
      break;
    std::vector<int,std::allocator<int>>::vector((int)&v34);
    for ( ii = 0; ii < v38; ++ii )
    {
      v25 = n;
      v26 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v36,
              ii);
      v27 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](v26, v25);
      std::vector<int,std::allocator<int>>::push_back((int)&v34, v27 + 4);
    }
    std::vector<int,std::allocator<int>>::end((int)&v41, (int)&v34);
    std::vector<int,std::allocator<int>>::begin((int)&v42, (int)&v34);
    std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(v42, v41);
    v43 = (unsigned int)std::vector<int,std::allocator<int>>::size((int)&v34) >> 1;
    for ( jj = 0; jj < v38; ++jj )
    {
      v28 = n;
      v29 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](
              (int)&v36,
              jj);
      v30 = *(_DWORD *)(std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](v29, v28) + 4);
      v31 = std::vector<int,std::allocator<int>>::operator[]((int)&v34, v43);
      v49 += (((v30 - *(_DWORD *)v31) >> 31) ^ (v30 - *(_DWORD *)v31)) - ((v30 - *(_DWORD *)v31) >> 31);
    }
    std::vector<int,std::allocator<int>>::~vector((int)&v34);
  }
  printf("%d\n", v49);
LABEL_37:
  std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~vector((int)&v36);
  std::vector<std::string,std::allocator<std::string>>::~vector((int)&v37);
}
// 8048940: using guessed type int __cdecl std::string::operator[](_DWORD, _DWORD);
// 80489C0: using guessed type int __cdecl std::operator>><char,std::char_traits<char>,std::allocator<char>>(_DWORD, _DWORD);
// 8048A10: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);

//----- (080490E0) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v4; // [sp+18h] [bp-8h]@1
  int i; // [sp+1Ch] [bp-4h]@1

  freopen("A-small-attempt0.in", "r", stdin);
  freopen("A-small-attempt0.out", "w", stdout);
  v4 = 0;
  std::istream::operator>>(&std::cin, &v4);
  for ( i = 1; i <= v4; ++i )
    Solved(i);
  return 0;
}
// 8048A10: using guessed type int __cdecl std::istream::operator>>(_DWORD, _DWORD);

//----- (08049174) --------------------------------------------------------
int __cdecl __static_initialization_and_destruction_0(int a1, int a2)
{
  int result; // eax@3

  if ( a1 == 1 && a2 == 0xFFFF )
  {
    std::ios_base::Init::Init((std::ios_base::Init *)&std::__ioinit);
    result = __cxa_atexit((const char *)std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
  }
  return result;
}
// 8048920: using guessed type int __cxa_atexit(const char *, ...);

//----- (080491B3) --------------------------------------------------------
int GLOBAL__sub_I__Z6Solvedi()
{
  return __static_initialization_and_destruction_0(1, 0xFFFF);
}

//----- (080491CF) --------------------------------------------------------
int __cdecl std::__lg(int a1)
{
  _EAX = a1;
  __asm { bsr     eax, eax }
  return 32 - (_EAX ^ 0x1F) - 1;
}

//----- (080491E7) --------------------------------------------------------
void *__cdecl operator new(unsigned int a1, void *a2)
{
  return a2;
}

//----- (080491EF) --------------------------------------------------------
void __cdecl operator delete()
{
  ;
}

//----- (080491F4) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::vector(int a1)
{
  return std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(a1);
}

//----- (08049208) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::~vector(int a1)
{
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(a1);
}

//----- (08049260) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::vector(int a1)
{
  return std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_base(a1);
}

//----- (08049274) --------------------------------------------------------
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~vector(int a1)
{
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
    *(_DWORD *)a1,
    *(_DWORD *)(a1 + 4));
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~_Vector_base(a1);
}

//----- (080492CC) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::resize(int a1, int a2, std::string *a3)
{
  int v3; // ebx@2
  char v4[4]; // [sp+1Ch] [bp-Ch]@2

  if ( std::vector<std::string,std::allocator<std::string>>::size(a1) < (unsigned int)a2 )
  {
    v3 = a2 - std::vector<std::string,std::allocator<std::string>>::size(a1);
    std::vector<std::string,std::allocator<std::string>>::end((int)v4, a1);
    std::vector<std::string,std::allocator<std::string>>::insert(a1, v4[0], v3, a3);
  }
  else if ( std::vector<std::string,std::allocator<std::string>>::size(a1) > (unsigned int)a2 )
  {
    std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(a1, 4 * a2 + *(_DWORD *)a1);
  }
}

//----- (08049364) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (08049376) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1)
{
  return std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(a1);
}

//----- (0804938A) --------------------------------------------------------
void __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~_Vector_base(a1);
}

//----- (080493E1) --------------------------------------------------------
int __userpurge std::make_pair<char,int>@<eax>(int a1, char a2, char a3)
{
  char v4; // [sp+Ch] [bp-Ch]@1

  v4 = a2;
  std::pair<char,int>::pair(a1, (int)&v4, (int)&a3);
  return a1;
}

//----- (0804940E) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v3, a1);
    result = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(
      a1,
      *(void **)(a1 + 4),
      a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 8;
  }
  return result;
}

//----- (08049482) --------------------------------------------------------
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::push_back(int a1, int a2)
{
  int v2; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::end(
      (int)&v2,
      a1);
    std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_insert_aux(
      a1,
      v2,
      a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
      a1,
      *(void **)(a1 + 4),
      a2);
    *(_DWORD *)(a1 + 4) += 12;
  }
}

//----- (080494F6) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::operator[](int a1, int a2)
{
  return *(_DWORD *)a1 + 12 * a2;
}

//----- (0804950E) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 3;
}

//----- (08049528) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator[](int a1, int a2)
{
  return 8 * a2 + *(_DWORD *)a1;
}

//----- (0804953A) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::vector(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_base(a1);
}

//----- (0804954E) --------------------------------------------------------
void __cdecl std::vector<int,std::allocator<int>>::~vector(int a1)
{
  int v1; // ST04_4@1
  int v2; // ST00_4@1

  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1;
  std::_Destroy<int *,int>();
  std::_Vector_base<int,std::allocator<int>>::~_Vector_base(a1);
}

//----- (080495A6) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::push_back(int a1, int a2)
{
  int result; // eax@2
  int v3; // [sp+1Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<int,std::allocator<int>>::end((int)&v3, a1);
    result = std::vector<int,std::allocator<int>>::_M_insert_aux(a1, v3, a2);
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), a2);
    result = a1;
    *(_DWORD *)(a1 + 4) += 4;
  }
  return result;
}

//----- (0804961A) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2);
  return a1;
}

//----- (0804963A) --------------------------------------------------------
int __userpurge std::vector<int,std::allocator<int>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, a2 + 4);
  return a1;
}

//----- (0804965C) --------------------------------------------------------
bool __cdecl std::sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, int a2)
{
  bool result; // al@1
  int v3; // eax@2
  int v4; // eax@2

  result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&a1, (int)&a2);
  if ( result )
  {
    v3 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
    v4 = std::__lg(v3);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(a1, a2, 2 * v4);
    result = std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
               a1,
               a2);
  }
  return result;
}

//----- (080496BE) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (080496D8) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::operator[](int a1, int a2)
{
  return 4 * a2 + *(_DWORD *)a1;
}

//----- (080496EA) --------------------------------------------------------
void std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::string>::~allocator();
}

//----- (080496FE) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049712) --------------------------------------------------------
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::~_Vector_impl();
}

//----- (08049772) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804977A) --------------------------------------------------------
int __cdecl std::_Destroy<std::string *,std::string>(int a1, int a2)
{
  return std::_Destroy<std::string *>(a1, a2);
}

//----- (08049794) --------------------------------------------------------
void std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator();
}

//----- (080497A8) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (080497BC) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(
    a1,
    *(void **)a1);
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::~_Vector_impl();
}

//----- (0804983E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (08049846) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  return std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a1, a2);
}

//----- (08049860) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::size(int a1)
{
  return (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2;
}

//----- (0804987A) --------------------------------------------------------
int __userpurge std::vector<std::string,std::allocator<std::string>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804989C) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::insert(int a1, char a2, int a3, std::string *a4)
{
  std::vector<std::string,std::allocator<std::string>>::_M_fill_insert(a1, a2, a3, a4);
}

//----- (080498C4) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_erase_at_end(int a1, int a2)
{
  int result; // eax@1

  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  std::_Destroy<std::string *,std::string>(a2, *(_DWORD *)(a1 + 4));
  result = a1;
  *(_DWORD *)(a1 + 4) = a2;
  return result;
}

//----- (080498FA) --------------------------------------------------------
void std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<std::pair<char,int>>::~allocator();
}

//----- (0804990E) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1)
{
  return std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(a1);
}

//----- (08049922) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::~_Vector_impl();
}

//----- (08049982) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804998A) --------------------------------------------------------
void std::_Destroy<std::pair<char,int> *,std::pair<char,int>>()
{
  std::_Destroy<std::pair<char,int> *>();
}

//----- (080499A4) --------------------------------------------------------
int __cdecl std::pair<char,int>::pair(int a1, int a2, int a3)
{
  int result; // eax@1

  *(_BYTE *)a1 = *(_BYTE *)a2;
  result = a1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  return result;
}

//----- (080499BE) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<std::pair<char,int>>::construct(a1, a2, a3);
}

//----- (080499E0) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // ST14_4@2
  int v4; // ST18_4@2
  int v5; // esi@2
  int v6; // ebx@2
  int v7; // eax@2
  int v8; // ecx@2
  int result; // eax@2
  int v10; // eax@3
  int v11; // eax@3
  int v12; // esi@3
  int v13; // eax@3
  int v14; // ST04_4@3
  int v15; // ST00_4@3
  int v16; // ST08_4@3
  char v17; // [sp+1Ch] [bp-1Ch]@3
  void *v18; // [sp+20h] [bp-18h]@3
  int v19; // [sp+24h] [bp-14h]@3
  int v20; // [sp+28h] [bp-10h]@3
  int v21; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v20 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_check_len(
            a1,
            1,
            "vector::_M_insert_aux");
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v17, a1);
    v19 = __gnu_cxx::operator-<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
            (int)&a2,
            (int)&v17);
    v10 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(a1, v20);
    v18 = (void *)v10;
    v21 = v10;
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(
      a1,
      (void *)(8 * v19 + v10),
      a3);
    v21 = 0;
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
    v11 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(
            *(_DWORD *)a1,
            *(_DWORD *)v11,
            (int)v18)
        + 8;
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
    v12 = *(_DWORD *)(a1 + 4);
    v13 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a2);
    v21 = std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(
            *(_DWORD *)v13,
            v12,
            v21);
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
    v14 = *(_DWORD *)(a1 + 4);
    v15 = *(_DWORD *)a1;
    std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
    v16 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
    std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v18;
    *(_DWORD *)(a1 + 4) = v21;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v18 + 8 * v20;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::construct<std::pair<char,int>>(
      a1,
      *(void **)(a1 + 4),
      *(_DWORD *)(a1 + 4) - 8);
    *(_DWORD *)(a1 + 4) += 8;
    v3 = *(_DWORD *)a3;
    v4 = *(_DWORD *)(a3 + 4);
    v5 = *(_DWORD *)(a1 + 4) - 8;
    v6 = *(_DWORD *)(a1 + 4) - 16;
    v7 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a2);
    std::copy_backward<std::pair<char,int> *,std::pair<char,int> *>(*(_DWORD *)v7, v6, v5);
    v8 = __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*((int)&a2);
    result = v3;
    *(_DWORD *)v8 = v3;
    *(_DWORD *)(v8 + 4) = v4;
  }
  return result;
}

//----- (08049C9A) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (08049CBC) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::construct(
           a1,
           a2,
           a3);
}

//----- (08049CDE) --------------------------------------------------------
void __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int v6; // eax@2
  int v7; // eax@3
  int v8; // esi@3
  int v9; // eax@3
  int v10; // ST08_4@3
  char v11; // [sp+10h] [bp-28h]@2
  char v12; // [sp+1Ch] [bp-1Ch]@3
  void *v13; // [sp+20h] [bp-18h]@3
  int v14; // [sp+24h] [bp-14h]@3
  int v15; // [sp+28h] [bp-10h]@3
  void *v16; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v15 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_check_len(
            a1,
            1,
            "vector::_M_insert_aux");
    std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::begin(
      (int)&v12,
      a1);
    v14 = __gnu_cxx::operator-<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>(
            (int)&a2,
            (int)&v12);
    v13 = (void *)std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_allocate(
                    a1,
                    v15);
    v16 = v13;
    __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
      a1,
      (char *)v13 + 12 * v14,
      a3);
    v16 = 0;
    std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
    v7 = __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base((int)&a2);
    v16 = (void *)(std::__uninitialized_move_if_noexcept_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
                     *(_DWORD *)a1,
                     *(_DWORD *)v7,
                     (int)v13)
                 + 12);
    std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
    v8 = *(_DWORD *)(a1 + 4);
    v9 = __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base((int)&a2);
    v16 = (void *)std::__uninitialized_move_if_noexcept_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
                    *(_DWORD *)v9,
                    v8,
                    (int)v16);
    std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
    std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
      *(_DWORD *)a1,
      *(_DWORD *)(a1 + 4));
    v10 = -1431655765 * ((*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2);
    std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(
      a1,
      *(void **)a1);
    *(_DWORD *)a1 = v13;
    *(_DWORD *)(a1 + 4) = v16;
    *(_DWORD *)(a1 + 8) = (char *)v13 + 12 * v15;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
      a1,
      *(void **)(a1 + 4),
      *(_DWORD *)(a1 + 4) - 12);
    *(_DWORD *)(a1 + 4) += 12;
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector((int)&v11, a3);
    v3 = *(_DWORD *)(a1 + 4) - 12;
    v4 = *(_DWORD *)(a1 + 4) - 24;
    v5 = __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base((int)&a2);
    std::copy_backward<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
      *(_DWORD *)v5,
      v4,
      v3);
    v6 = __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::operator*((int)&a2);
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator=(v6, (int)&v11);
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector((int)&v11);
  }
}

//----- (08049FE8) --------------------------------------------------------
int __userpurge std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::end@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::__normal_iterator(
    a1,
    a2 + 4);
  return a1;
}

//----- (0804A00A) --------------------------------------------------------
void std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl()
{
  std::allocator<int>::~allocator();
}

//----- (0804A01E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_base(int a1)
{
  return std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(a1);
}

//----- (0804A032) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::~_Vector_base(int a1)
{
  int v1; // ST08_4@1

  v1 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
  std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
  std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl();
}

//----- (0804A092) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804A09A) --------------------------------------------------------
void std::_Destroy<int *,int>()
{
  std::_Destroy<int *>();
}

//----- (0804A0B4) --------------------------------------------------------
void *__cdecl __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(int a1, void *a2, int a3)
{
  return __gnu_cxx::new_allocator<int>::construct(a1, a2, a3);
}

//----- (0804A0D6) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_insert_aux(int a1, char a2, int a3)
{
  int v3; // esi@2
  int v4; // ebx@2
  int v5; // eax@2
  int result; // eax@2
  char *v7; // eax@3
  int v8; // eax@3
  int v9; // esi@3
  int v10; // eax@3
  int v11; // ST04_4@3
  int v12; // ST00_4@3
  int v13; // ST08_4@3
  char v14; // [sp+18h] [bp-20h]@3
  void *v15; // [sp+1Ch] [bp-1Ch]@3
  int v16; // [sp+20h] [bp-18h]@3
  int v17; // [sp+24h] [bp-14h]@3
  int v18; // [sp+28h] [bp-10h]@2
  char *v19; // [sp+2Ch] [bp-Ch]@3

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    v17 = std::vector<int,std::allocator<int>>::_M_check_len(a1, 1, "vector::_M_insert_aux");
    std::vector<int,std::allocator<int>>::begin((int)&v14, a1);
    v16 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&v14);
    v7 = (char *)std::_Vector_base<int,std::allocator<int>>::_M_allocate(a1, v17);
    v15 = v7;
    v19 = v7;
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, &v7[4 * v16], a3);
    v19 = 0;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v8 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(
            *(_DWORD *)a1,
            *(_DWORD *)v8,
            (int)v15)
        + 4;
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v9 = *(_DWORD *)(a1 + 4);
    v10 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    v19 = std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(*(_DWORD *)v10, v9, (int)v19);
    std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
    v11 = *(_DWORD *)(a1 + 4);
    v12 = *(_DWORD *)a1;
    std::_Destroy<int *,int>();
    v13 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
    std::_Vector_base<int,std::allocator<int>>::_M_deallocate(a1, *(void **)a1);
    *(_DWORD *)a1 = v15;
    *(_DWORD *)(a1 + 4) = v19;
    result = a1;
    *(_DWORD *)(a1 + 8) = (char *)v15 + 4 * v17;
  }
  else
  {
    __gnu_cxx::__alloc_traits<std::allocator<int>>::construct<int>(a1, *(void **)(a1 + 4), *(_DWORD *)(a1 + 4) - 4);
    *(_DWORD *)(a1 + 4) += 4;
    v18 = *(_DWORD *)a3;
    v3 = *(_DWORD *)(a1 + 4) - 4;
    v4 = *(_DWORD *)(a1 + 4) - 8;
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a2);
    std::copy_backward<int *,int *>(*(_DWORD *)v5, v4, v3);
    result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    *(_DWORD *)result = v18;
  }
  return result;
}

//----- (0804A37E) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A38D) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804A3B9) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return (v2 - *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2)) >> 2;
}

//----- (0804A3E9) --------------------------------------------------------
bool __cdecl std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(char a1, int a2, int a3)
{
  bool result; // al@3
  int v4; // [sp+1Ch] [bp-Ch]@4

  while ( 1 )
  {
    result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 16;
    if ( !result )
      break;
    if ( !a3 )
      return std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a2);
    --a3;
    std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      (int)&v4,
      a1,
      a2);
    std::__introsort_loop<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(v4, a2, a3);
    a2 = v4;
  }
  return result;
}

//----- (0804A478) --------------------------------------------------------
bool __cdecl std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@2
  int v3; // [sp+10h] [bp-18h]@2
  int v4; // [sp+14h] [bp-14h]@2
  int v5; // [sp+18h] [bp-10h]@2
  int v6; // [sp+1Ch] [bp-Ch]@2

  if ( __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 16 )
  {
    v3 = 16;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v4, (int)&a1, (int)&v3);
    std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, v4);
    v5 = 16;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v6, (int)&a1, (int)&v5);
    result = std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
               v6,
               a2);
  }
  else
  {
    result = std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
  }
  return result;
}

//----- (0804A530) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::string>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A560) --------------------------------------------------------
void std::allocator<std::string>::~allocator()
{
  __gnu_cxx::new_allocator<std::string>::~new_allocator();
}

//----- (0804A574) --------------------------------------------------------
void __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::string>::deallocate(a1, a2);
}

//----- (0804A59B) --------------------------------------------------------
int __cdecl std::_Destroy<std::string *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::string *>(a1, a2);
}

//----- (0804A5B6) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804A5E6) --------------------------------------------------------
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~allocator()
{
  __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~new_allocator();
}

//----- (0804A5FA) --------------------------------------------------------
void __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::deallocate(a1, a2);
}

//----- (0804A621) --------------------------------------------------------
int __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2)
{
  return std::_Destroy_aux<false>::__destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           a1,
           a2);
}

//----- (0804A63C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804A64C) --------------------------------------------------------
void __cdecl std::vector<std::string,std::allocator<std::string>>::_M_fill_insert(int a1, char a2, int a3, std::string *a4)
{
  int v4; // ebx@4
  int v5; // eax@4
  int v6; // eax@4
  int v7; // ebx@4
  int v8; // eax@4
  int v9; // esi@5
  int v10; // eax@5
  int v11; // eax@5
  int v12; // eax@7
  int v13; // eax@7
  int v14; // esi@7
  int v15; // eax@7
  int v16; // ST08_4@7
  char v17; // [sp+1Ch] [bp-2Ch]@3
  char v18; // [sp+20h] [bp-28h]@3
  char v19; // [sp+24h] [bp-24h]@7
  void *v20; // [sp+28h] [bp-20h]@7
  int v21; // [sp+2Ch] [bp-1Ch]@7
  int v22; // [sp+30h] [bp-18h]@7
  int v23; // [sp+34h] [bp-14h]@3
  int v24; // [sp+38h] [bp-10h]@3
  int v25; // [sp+3Ch] [bp-Ch]@7

  if ( a3 )
  {
    if ( (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4)) >> 2 < (unsigned int)a3 )
    {
      v22 = std::vector<std::string,std::allocator<std::string>>::_M_check_len(a1, a3, "vector::_M_fill_insert");
      std::vector<std::string,std::allocator<std::string>>::begin((int)&v19, a1);
      v21 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(
              (int)&a2,
              (int)&v19);
      v20 = (void *)std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(a1, v22);
      v25 = (int)v20;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(
        (int)((char *)v20 + 4 * v21),
        a3,
        a4);
      v25 = 0;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      v12 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
      v13 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
              *(std::string **)a1,
              *(_DWORD *)v12,
              (int)v20);
      v25 = 4 * a3 + v13;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      v14 = *(_DWORD *)(a1 + 4);
      v15 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
      v25 = std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(
              *(std::string **)v15,
              v14,
              v25);
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
      std::_Destroy<std::string *,std::string>(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
      v16 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 2;
      std::_Vector_base<std::string,std::allocator<std::string>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 4) = v25;
      *(_DWORD *)(a1 + 8) = (char *)v20 + 4 * v22;
    }
    else
    {
      std::string::string((std::string *)&v17, a4);
      std::vector<std::string,std::allocator<std::string>>::end((int)&v18, a1);
      v24 = __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(
              (int)&v18,
              (int)&a2);
      v23 = *(_DWORD *)(a1 + 4);
      if ( v24 <= (unsigned int)a3 )
      {
        std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(
          *(_DWORD *)(a1 + 4),
          a3 - v24,
          (std::string *)&v17);
        *(_DWORD *)(a1 + 4) += 4 * (a3 - v24);
        std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
        v9 = *(_DWORD *)(a1 + 4);
        v10 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(
          *(std::string **)v10,
          v23,
          v9);
        *(_DWORD *)(a1 + 4) += 4 * v24;
        v11 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::fill<std::string *,std::string>(*(_DWORD *)v11, v23, (int)&v17);
      }
      else
      {
        std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
        std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(
          (std::string *)(-4 * a3 + *(_DWORD *)(a1 + 4)),
          *(_DWORD *)(a1 + 4),
          *(_DWORD *)(a1 + 4));
        *(_DWORD *)(a1 + 4) += 4 * a3;
        v4 = -4 * a3 + v23;
        v5 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::copy_backward<std::string *,std::string *>(*(_DWORD *)v5, v4, v23);
        v6 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        v7 = *(_DWORD *)v6 + 4 * a3;
        v8 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base((int)&a2);
        std::fill<std::string *,std::string>(*(_DWORD *)v8, v7, (int)&v17);
      }
      std::string::~string((std::string *)&v17);
    }
  }
}

//----- (0804AAB8) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<char,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804AAE8) --------------------------------------------------------
void std::allocator<std::pair<char,int>>::~allocator()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::~new_allocator();
}

//----- (0804AAFC) --------------------------------------------------------
void __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<std::pair<char,int>>::deallocate(a1, a2);
}

//----- (0804AB23) --------------------------------------------------------
void std::_Destroy<std::pair<char,int> *>()
{
  std::_Destroy_aux<true>::__destroy<std::pair<char,int> *>();
}

//----- (0804AB3E) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1
  void *v4; // ecx@1
  int v5; // edx@2

  result = operator new(8u, a2);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(a3 + 4);
    result = *(void **)a3;
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *((_DWORD *)v4 + 1) = v5;
  }
  return result;
}

//----- (0804AB6C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1)
{
  return a1;
}

//----- (0804AB74) --------------------------------------------------------
int __cdecl std::copy_backward<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<char,int> *>(a2);
  v4 = std::__miter_base<std::pair<char,int> *>(a1);
  return std::__copy_move_backward_a2<false,std::pair<char,int> *,std::pair<char,int> *>(v4, v3, a3);
}

//----- (0804ABAC) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804ABB6) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(a1);
  v4 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  v9 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(a1);
  return result;
}

//----- (0804AC5A) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804AC79) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a1);
  return (v2
        - *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a2)) >> 3;
}

//----- (0804ACAA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::pair<char,int>>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804ACD9) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::pair<char,int> *,std::pair<char,int> *,std::allocator<std::pair<char,int>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(a1, a2, a3);
}

//----- (0804AD01) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::destroy()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::destroy();
}

//----- (0804AD1C) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804AD2C) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(0xCu, a2);
  if ( result )
    result = (void *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector((int)result, a3);
  return result;
}

//----- (0804AD82) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector(int a1, int a2)
{
  int v2; // eax@1
  int v3; // eax@1
  int v4; // esi@1
  int result; // eax@1
  int v6; // [sp+18h] [bp-10h]@1
  int v7; // [sp+1Ch] [bp-Ch]@1

  v2 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a2);
  __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::_S_select_on_copy(v2);
  v3 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a2);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(a1, v3);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  v4 = *(_DWORD *)a1;
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v6, a2);
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v7, a2);
  result = std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(
             v7,
             v6,
             v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

//----- (0804AE3A) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base(int a1)
{
  return a1;
}

//----- (0804AE42) --------------------------------------------------------
int __cdecl std::copy_backward<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a2);
  v4 = std::__miter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a1);
  return std::__copy_move_backward_a2<false,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           v4,
           v3,
           a3);
}

//----- (0804AE7A) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804AE84) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator=(int a1, int a2)
{
  int v2; // ST04_4@3
  void *v3; // ST00_4@3
  int v4; // ST08_4@3
  void *v5; // ebx@6
  int v6; // esi@6
  int v7; // eax@6
  int v8; // edi@6
  int v9; // esi@6
  int v10; // ST1C_4@6
  int v11; // eax@6
  int v13; // [sp+2Ch] [bp-3Ch]@3
  int v14; // [sp+30h] [bp-38h]@3
  int v15; // [sp+34h] [bp-34h]@5
  int v16; // [sp+38h] [bp-30h]@5
  int v17; // [sp+3Ch] [bp-2Ch]@5
  int v18; // [sp+40h] [bp-28h]@5
  int v19; // [sp+44h] [bp-24h]@5
  int v20; // [sp+48h] [bp-20h]@3
  unsigned int v21; // [sp+4Ch] [bp-1Ch]@2

  if ( a2 != a1 )
  {
    v21 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a2);
    if ( std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::capacity(a1) < v21 )
    {
      std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v13, a2);
      std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v14, a2);
      v20 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
              a1,
              v21,
              v14,
              v13);
      std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
      v2 = *(_DWORD *)(a1 + 4);
      v3 = *(void **)a1;
      std::_Destroy<std::pair<char,int> *,std::pair<char,int>>();
      v4 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
      std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_deallocate(a1, *(void **)a1);
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * v21;
    }
    else if ( std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1) >= v21 )
    {
      std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
      std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v15, a1);
      std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v16, a1);
      std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end((int)&v17, a2);
      std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin((int)&v18, a2);
      std::copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,__gnu_cxx::__normal_iterator<std::pair<char,int>*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
        (int)&v19,
        v18,
        v17,
        v16);
      std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>>();
    }
    else
    {
      v5 = *(void **)a1;
      v6 = *(_DWORD *)a2;
      v7 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
      std::copy<std::pair<char,int> *,std::pair<char,int> *>(*(_DWORD *)a2, v6 + 8 * v7, (int)v5);
      std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
      v8 = *(_DWORD *)(a1 + 4);
      v9 = *(_DWORD *)(a2 + 4);
      v10 = *(_DWORD *)a2;
      v11 = std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::size(a1);
      std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(
        v10 + 8 * v11,
        v9,
        v8);
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)a1 + 8 * v21;
  }
  return a1;
}

//----- (0804B0CA) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size(a1);
  v4 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::size(a1);
  v9 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size(a1),
        v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size(a1);
  return result;
}

//----- (0804B16E) --------------------------------------------------------
int __userpurge std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804B18D) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base(a1);
  return -1431655765
       * ((v2
         - *(_DWORD *)__gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::base(a2)) >> 2);
}

//----- (0804B1E0) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocate(
               a1,
               a2);
  else
    result = 0;
  return result;
}

//----- (0804B20F) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
           a1,
           a2,
           a3);
}

//----- (0804B237) --------------------------------------------------------
void __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::destroy(int a1, int a2)
{
  __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::destroy(a1, a2);
}

//----- (0804B252) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804B262) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<int>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804B292) --------------------------------------------------------
void std::allocator<int>::~allocator()
{
  __gnu_cxx::new_allocator<int>::~new_allocator();
}

//----- (0804B2A6) --------------------------------------------------------
void __cdecl std::_Vector_base<int,std::allocator<int>>::_M_deallocate(int a1, void *a2)
{
  if ( a2 )
    __gnu_cxx::new_allocator<int>::deallocate(a1, a2);
}

//----- (0804B2CD) --------------------------------------------------------
void std::_Destroy<int *>()
{
  std::_Destroy_aux<true>::__destroy<int *>();
}

//----- (0804B2E8) --------------------------------------------------------
void *__cdecl __gnu_cxx::new_allocator<int>::construct(int a1, void *a2, int a3)
{
  void *result; // eax@1

  result = operator new(4u, a2);
  if ( result )
    *(_DWORD *)result = *(_DWORD *)a3;
  return result;
}

//----- (0804B30E) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(int a1)
{
  return a1;
}

//----- (0804B316) --------------------------------------------------------
int __cdecl std::copy_backward<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_backward_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804B34E) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804B358) --------------------------------------------------------
int __cdecl std::vector<int,std::allocator<int>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<int,std::allocator<int>>::max_size(a1);
  v4 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<int,std::allocator<int>>::size(a1);
  v9 = std::vector<int,std::allocator<int>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<int,std::allocator<int>>::size(a1);
  if ( v6 <= (unsigned int)v10 && (v7 = std::vector<int,std::allocator<int>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<int,std::allocator<int>>::max_size(a1);
  return result;
}

//----- (0804B3FC) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<int>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804B42B) --------------------------------------------------------
char *__cdecl std::__uninitialized_move_if_noexcept_a<int *,int *,std::allocator<int>>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<int *,int *,int>(a1, a2, a3);
}

//----- (0804B453) --------------------------------------------------------
void __gnu_cxx::__alloc_traits<std::allocator<int>>::destroy()
{
  __gnu_cxx::new_allocator<int>::destroy();
}

//----- (0804B46D) --------------------------------------------------------
bool __cdecl std::partial_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3)
{
  std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a3);
  return std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
}

//----- (0804B4A0) --------------------------------------------------------
int __userpurge std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3)
{
  int v3; // ebx@1
  int v5; // [sp+18h] [bp-20h]@1
  int v6; // [sp+1Ch] [bp-1Ch]@1
  int v7; // [sp+20h] [bp-18h]@1
  int v8; // [sp+24h] [bp-14h]@1
  int v9; // [sp+28h] [bp-10h]@1
  int v10; // [sp+2Ch] [bp-Ch]@1

  v6 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a3, (int)&a2) / 2;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v5, (int)&a2, (int)&v6);
  v7 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-((int)&v8, (int)&a3, (int)&v7);
  std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2, v5, v8);
  v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
  v9 = 1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a2, (int)&v9);
  std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>(
    a1,
    v10,
    a3,
    v3);
  return a1;
}

//----- (0804B584) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + 4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804B5B5) --------------------------------------------------------
bool __cdecl std::__insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@1
  int v3; // ebx@3
  int v4; // eax@4
  int v5; // [sp+18h] [bp-20h]@2
  int v6; // [sp+1Ch] [bp-1Ch]@2
  char v7; // [sp+20h] [bp-18h]@4
  int v8; // [sp+24h] [bp-14h]@4
  int v9; // [sp+28h] [bp-10h]@4
  int v10; // [sp+2Ch] [bp-Ch]@4

  result = __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>((int)&a1, (int)&a2);
  if ( !result )
  {
    v6 = 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v5, (int)&a1, (int)&v6);
    while ( 1 )
    {
      result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&v5, (int)&a2);
      if ( !result )
        break;
      v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v5);
      if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1) )
      {
        v10 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v5);
        v8 = 1;
        __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+(
          (int)&v9,
          (int)&v5,
          (int)&v8);
        std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
          (int)&v7,
          a1,
          v5,
          v9);
        v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
        *(_DWORD *)v4 = v10;
      }
      else
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(v5);
      }
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&v5);
    }
  }
  return result;
}

//----- (0804B6CB) --------------------------------------------------------
bool __cdecl std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1, char a2)
{
  bool result; // al@3
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = a1; ; __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator!=<int *,std::vector<int,std::allocator<int>>>((int)&i, (int)&a2);
    if ( !result )
      break;
    std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(i);
  }
  return result;
}

//----- (0804B712) --------------------------------------------------------
void std::allocator<std::string>::allocator()
{
  __gnu_cxx::new_allocator<std::string>::new_allocator();
}

//----- (0804B726) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::~new_allocator()
{
  ;
}

//----- (0804B72C) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::string>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B73F) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::string *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::string>(a1);
    std::_Destroy<std::string>((std::string *)v2);
    a1 += 4;
  }
  return result;
}

//----- (0804B768) --------------------------------------------------------
void std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocator()
{
  __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator();
}

//----- (0804B77C) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::~new_allocator()
{
  ;
}

//----- (0804B782) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B795) --------------------------------------------------------
int __cdecl std::_Destroy_aux<false>::__destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2)
{
  int v2; // eax@2
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    v2 = std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(a1);
    std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(v2);
    a1 += 12;
  }
  return result;
}

//----- (0804B7BE) --------------------------------------------------------
int __cdecl __gnu_cxx::operator-<std::string *,std::vector<std::string,std::allocator<std::string>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a1);
  return (v2
        - *(_DWORD *)__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(a2)) >> 2;
}

//----- (0804B7EE) --------------------------------------------------------
int __cdecl std::__uninitialized_move_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::string *,std::string *,std::string>(a1, a2, a3);
}

//----- (0804B816) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::base(int a1)
{
  return a1;
}

//----- (0804B81E) --------------------------------------------------------
int __cdecl std::copy_backward<std::string *,std::string *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::string *>(a2);
  v4 = std::__miter_base<std::string *>(a1);
  return std::__copy_move_backward_a2<false,std::string *,std::string *>(v4, v3, a3);
}

//----- (0804B856) --------------------------------------------------------
int __cdecl std::fill<std::string *,std::string>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__niter_base<std::string *>(a2);
  v4 = std::__niter_base<std::string *>(a1);
  return std::__fill_a<std::string *,std::string>(v4, v3, a3);
}

//----- (0804B88E) --------------------------------------------------------
std::string *__cdecl std::__uninitialized_fill_n_a<std::string *,unsigned int,std::string,std::string>(int a1, int a2, std::string *a3)
{
  return std::uninitialized_fill_n<std::string *,unsigned int,std::string>(a1, a2, a3);
}

//----- (0804B8B0) --------------------------------------------------------
int __cdecl std::vector<std::string,std::allocator<std::string>>::_M_check_len(int a1, int a2, char *a3)
{
  signed int v3; // ebx@1
  int v4; // eax@1
  int v5; // ebx@3
  int v6; // eax@3
  signed int v7; // eax@4
  int result; // eax@5
  int v9; // [sp+18h] [bp-10h]@3
  int v10; // [sp+1Ch] [bp-Ch]@3

  v3 = std::vector<std::string,std::allocator<std::string>>::max_size(a1);
  v4 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  if ( v3 - v4 < (unsigned int)a2 )
    std::__throw_length_error(a3);
  v5 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  v9 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  v10 = v5 + *(_DWORD *)std::max<unsigned int>((int)&v9, (int)&a2);
  v6 = std::vector<std::string,std::allocator<std::string>>::size(a1);
  if ( v6 <= (unsigned int)v10
    && (v7 = std::vector<std::string,std::allocator<std::string>>::max_size(a1), v7 >= (unsigned int)v10) )
    result = v10;
  else
    result = std::vector<std::string,std::allocator<std::string>>::max_size(a1);
  return result;
}

//----- (0804B954) --------------------------------------------------------
int __userpurge std::vector<std::string,std::allocator<std::string>>::begin@<eax>(int a1, int a2)
{
  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>::__normal_iterator(
    a1,
    a2);
  return a1;
}

//----- (0804B974) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_allocate(int a1, unsigned int a2)
{
  int result; // eax@2

  if ( a2 )
    result = __gnu_cxx::new_allocator<std::string>::allocate(a1, a2);
  else
    result = 0;
  return result;
}

//----- (0804B9A3) --------------------------------------------------------
int __cdecl std::__uninitialized_move_if_noexcept_a<std::string *,std::string *,std::allocator<std::string>>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy_a<std::string *,std::string *,std::string>(a1, a2, a3);
}

//----- (0804B9CC) --------------------------------------------------------
void std::allocator<std::pair<char,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
}

//----- (0804B9E0) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::~new_allocator()
{
  ;
}

//----- (0804B9E6) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804B9F9) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<std::pair<char,int> *>()
{
  ;
}

//----- (0804B9FE) --------------------------------------------------------
int __cdecl std::__miter_base<std::pair<char,int> *>(int a1)
{
  return std::_Iter_base<std::pair<char,int> *,false>::_S_base(a1);
}

//----- (0804BA11) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<char,int> *>(a3);
  v4 = std::__niter_base<std::pair<char,int> *>(a2);
  v5 = std::__niter_base<std::pair<char,int> *>(a1);
  return std::__copy_move_backward_a<false,std::pair<char,int> *,std::pair<char,int> *>(v5, v4, v3);
}

//----- (0804BA56) --------------------------------------------------------
signed int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::max_size(int a1)
{
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::max_size();
}

//----- (0804BA71) --------------------------------------------------------
int __cdecl std::max<unsigned int>(int a1, int a2)
{
  int result; // eax@2

  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )
    result = a1;
  else
    result = a2;
  return result;
}

//----- (0804BA8C) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::pair<char,int>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::pair<char,int>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(8 * a2);
}

//----- (0804BABC) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::pair<char,int> *,std::pair<char,int> *,std::pair<char,int>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::pair<char,int> *,std::pair<char,int> *>(a1, a2, a3);
}

//----- (0804BADE) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::destroy()
{
  ;
}

//----- (0804BAE3) --------------------------------------------------------
int __cdecl __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::_S_select_on_copy(int a1)
{
  return a1;
}

//----- (0804BAEC) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804BAF4) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_base(int a1, unsigned int a2)
{
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(a1);
  return std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_create_storage(a1, a2);
}

//----- (0804BB3E) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::begin@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)a2;
  __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (0804BB66) --------------------------------------------------------
int __userpurge std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::end@<eax>(int a1, int a2)
{
  int v3; // [sp+1Ch] [bp-Ch]@1

  v3 = *(_DWORD *)(a2 + 4);
  __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    (int)&v3);
  return a1;
}

//----- (0804BB8E) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(char a1, char a2, int a3)
{
  return std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(
           a1,
           a2,
           a3);
}

//----- (0804BBAF) --------------------------------------------------------
int __cdecl std::__miter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1)
{
  return std::_Iter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,false>::_S_base(a1);
}

//----- (0804BBC2) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a3);
  v4 = std::__niter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a2);
  v5 = std::__niter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(a1);
  return std::__copy_move_backward_a<false,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           v5,
           v4,
           v3);
}

//----- (0804BC06) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::capacity(int a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1) >> 3;
}

//----- (0804BC20) --------------------------------------------------------
int __cdecl std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(int a1, int a2, char a3, char a4)
{
  int v4; // ST1C_4@1

  v4 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(a1, a2);
  std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_get_Tp_allocator(a1);
  std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*,std::pair<char,int>>(
    a3,
    a4,
    v4);
  return v4;
}

//----- (0804BCA6) --------------------------------------------------------
int __userpurge std::copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,__gnu_cxx::__normal_iterator<std::pair<char,int>*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
    (int)&v5,
    a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
    (int)&v6,
    a2);
  std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,__gnu_cxx::__normal_iterator<std::pair<char,int>*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804BD00) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>>()
{
  std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>();
}

//----- (0804BD1A) --------------------------------------------------------
int __cdecl std::copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<std::pair<char,int> *>(a2);
  v4 = std::__miter_base<std::pair<char,int> *>(a1);
  return std::__copy_move_a2<false,std::pair<char,int> *,std::pair<char,int> *>(v4, v3, a3);
}

//----- (0804BD52) --------------------------------------------------------
int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::size(int a1)
{
  return -1431655765 * ((*(_DWORD *)(a1 + 4) - *(_DWORD *)a1) >> 2);
}

//----- (0804BD8E) --------------------------------------------------------
signed int __cdecl std::vector<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size(int a1)
{
  std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size();
}

//----- (0804BDAA) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(12 * a2);
}

//----- (0804BDE0) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           a1,
           a2,
           a3);
}

//----- (0804BE02) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::destroy(int a1, int a2)
{
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(a2);
}

//----- (0804BE16) --------------------------------------------------------
void std::allocator<int>::allocator()
{
  __gnu_cxx::new_allocator<int>::new_allocator();
}

//----- (0804BE2A) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::~new_allocator()
{
  ;
}

//----- (0804BE30) --------------------------------------------------------
void __cdecl __gnu_cxx::new_allocator<int>::deallocate(int a1, void *a2)
{
  operator delete(a2);
}

//----- (0804BE43) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<int *>()
{
  ;
}

//----- (0804BE48) --------------------------------------------------------
int __cdecl std::__miter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804BE5B) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_backward_a<false,int *,int *>((void *)v5, v4, v3);
}

//----- (0804BEA0) --------------------------------------------------------
signed int __cdecl std::vector<int,std::allocator<int>>::max_size(int a1)
{
  std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size();
}

//----- (0804BEBC) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<int>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<int>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804BEEC) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy_a<int *,int *,int>(int a1, int a2, int a3)
{
  return std::uninitialized_copy<int *,int *>(a1, a2, a3);
}

//----- (0804BF0E) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::destroy()
{
  ;
}

//----- (0804BF13) --------------------------------------------------------
bool __cdecl std::__heap_select<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, int a2, char a3)
{
  int v3; // ebx@2
  bool result; // al@5
  int i; // [sp+1Ch] [bp-Ch]@1

  std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2);
  for ( i = a2; ; __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&i) )
  {
    result = __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>((int)&i, (int)&a3);
    if ( !result )
      break;
    v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&i);
    if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1) )
      std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, i);
  }
  return result;
}

//----- (0804BFA1) --------------------------------------------------------
bool __cdecl std::sort_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  bool result; // al@3

  while ( 1 )
  {
    result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) > 1;
    if ( !result )
      break;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a2);
    std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a1, a2, a2);
  }
  return result;
}

//----- (0804BFEC) --------------------------------------------------------
int __userpurge __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator-@<eax>(int a1, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = *(_DWORD *)a2 + -4 * *(_DWORD *)a3;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v4);
  return a1;
}

//----- (0804C01F) --------------------------------------------------------
char __cdecl std::__move_median_first<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3)
{
  int v3; // ebx@1
  int v4; // ebx@2
  char result; // al@3
  int v6; // ebx@4
  int v7; // ebx@6
  int v8; // ebx@7

  v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  if ( v3 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2) )
  {
    v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
    {
      result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                 a1,
                 a2);
    }
    else
    {
      v6 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
      result = v6 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
      if ( result )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a3);
    }
  }
  else
  {
    v7 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
    result = v7 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
    if ( !result )
    {
      v8 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( v8 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a3);
      else
        result = std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
                   a1,
                   a2);
    }
  }
  return result;
}

//----- (0804C132) --------------------------------------------------------
int __userpurge std::__unguarded_partition<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int>@<eax>(int a1, int a2, char a3, int a4)
{
  int v4; // eax@3
  int v5; // ebx@6

  while ( 1 )
  {
    while ( 1 )
    {
      v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
      if ( *(_DWORD *)v4 >= *(_DWORD *)a4 )
        break;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
    }
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a3);
    while ( 1 )
    {
      v5 = *(_DWORD *)a4;
      if ( v5 >= *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3) )
        break;
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&a3);
    }
    if ( !__gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a3) )
      break;
    std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
      a2,
      a3);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++((int)&a2);
  }
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804C1E5) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator==<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 == *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804C212) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 4;
  return a1;
}

//----- (0804C227) --------------------------------------------------------
int __userpurge std::copy_backward<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2, int a3, char a4)
{
  int v5; // [sp+18h] [bp-10h]@1
  int v6; // [sp+1Ch] [bp-Ch]@1

  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v5, a3);
  std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>((int)&v6, a2);
  std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
    a1,
    v6,
    v5,
    a4);
  return a1;
}

//----- (0804C281) --------------------------------------------------------
int __cdecl std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(int a1)
{
  int v1; // ebx@2
  int v2; // eax@3
  int result; // eax@4
  int v4; // [sp+18h] [bp-10h]@1
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  v4 = a1;
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&v4);
  while ( 1 )
  {
    v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
    if ( *(_DWORD *)v2 <= v5 )
      break;
    v1 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
    *(_DWORD *)v1 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
    a1 = v4;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--((int)&v4);
  }
  result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  *(_DWORD *)result = v5;
  return result;
}

//----- (0804C306) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::string>::new_allocator()
{
  ;
}

//----- (0804C30B) --------------------------------------------------------
int __cdecl std::__addressof<std::string>(int a1)
{
  return a1;
}

//----- (0804C313) --------------------------------------------------------
int __cdecl std::_Destroy<std::string>(std::string *a1)
{
  return std::string::~string(a1);
}

//----- (0804C326) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::new_allocator()
{
  ;
}

//----- (0804C32B) --------------------------------------------------------
int __cdecl std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1)
{
  return a1;
}

//----- (0804C333) --------------------------------------------------------
void __cdecl std::_Destroy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1)
{
  std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::~vector(a1);
}

//----- (0804C346) --------------------------------------------------------
int __cdecl std::__uninitialized_copy_a<std::string *,std::string *,std::string>(std::string *a1, int a2, int a3)
{
  return std::uninitialized_copy<std::string *,std::string *>(a1, a2, a3);
}

//----- (0804C367) --------------------------------------------------------
int __cdecl std::__miter_base<std::string *>(int a1)
{
  return std::_Iter_base<std::string *,false>::_S_base(a1);
}

//----- (0804C37A) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a2<false,std::string *,std::string *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::string *>(a3);
  v4 = std::__niter_base<std::string *>(a2);
  v5 = std::__niter_base<std::string *>(a1);
  return std::__copy_move_backward_a<false,std::string *,std::string *>(v5, v4, v3);
}

//----- (0804C3BE) --------------------------------------------------------
int __cdecl std::__niter_base<std::string *>(int a1)
{
  return std::_Iter_base<std::string *,false>::_S_base(a1);
}

//----- (0804C3D1) --------------------------------------------------------
int __cdecl std::__fill_a<std::string *,std::string>(int a1, int a2, int a3)
{
  int result; // eax@3

  while ( 1 )
  {
    result = a1;
    if ( a1 == a2 )
      break;
    std::string::operator=(a1, a3);
    a1 += 4;
  }
  return result;
}
// 8048A90: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804C3F9) --------------------------------------------------------
std::string *__cdecl std::uninitialized_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3)
{
  return std::__uninitialized_fill_n<false>::__uninit_fill_n<std::string *,unsigned int,std::string>(a1, a2, a3);
}

//----- (0804C41A) --------------------------------------------------------
signed int __cdecl std::vector<std::string,std::allocator<std::string>>::max_size(int a1)
{
  std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(a1);
  return __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size();
}

//----- (0804C436) --------------------------------------------------------
int __cdecl __gnu_cxx::new_allocator<std::string>::allocate(int a1, unsigned int a2)
{
  if ( __gnu_cxx::new_allocator<std::string>::max_size() < a2 )
    std::__throw_bad_alloc();
  return operator new(4 * a2);
}

//----- (0804C466) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator()
{
  ;
}

//----- (0804C46B) --------------------------------------------------------
int __cdecl std::_Iter_base<std::pair<char,int> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804C473) --------------------------------------------------------
int __cdecl std::__niter_base<std::pair<char,int> *>(int a1)
{
  return std::_Iter_base<std::pair<char,int> *,false>::_S_base(a1);
}

//----- (0804C486) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<char,int> *,std::pair<char,int> *>(
           a1,
           a2,
           a3);
}

//----- (0804C4AB) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::pair<char,int>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::pair<char,int>>::max_size();
}

//----- (0804C4BE) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::pair<char,int>>::max_size()
{
  return 0x1FFFFFFF;
}

//----- (0804C4C8) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::pair<char,int> *,std::pair<char,int> *>(a1, a2, a3);
}

//----- (0804C4EA) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_Vector_impl::_Vector_impl(int a1)
{
  int result; // eax@1

  std::allocator<std::pair<char,int>>::allocator();
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  result = a1;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

//----- (0804C522) --------------------------------------------------------
int __cdecl std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_create_storage(int a1, unsigned int a2)
{
  int result; // eax@1

  *(_DWORD *)a1 = std::_Vector_base<std::pair<char,int>,std::allocator<std::pair<char,int>>>::_M_allocate(a1, a2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a1;
  result = a1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a1 + 8 * a2;
  return result;
}

//----- (0804C560) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(int a1, int a2)
{
  int result; // eax@1

  result = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return result;
}

//----- (0804C56F) --------------------------------------------------------
int __cdecl std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(
           a1,
           a2,
           a3);
}

//----- (0804C590) --------------------------------------------------------
int __cdecl std::_Iter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804C598) --------------------------------------------------------
int __cdecl std::__niter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1)
{
  return std::_Iter_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,false>::_S_base(a1);
}

//----- (0804C5AB) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           a1,
           a2,
           a3);
}

//----- (0804C5D0) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,false>::_S_base(
    a1,
    a2);
  return a1;
}

//----- (0804C5F2) --------------------------------------------------------
int __userpurge std::__copy_move_a2<false,__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,__gnu_cxx::__normal_iterator<std::pair<char,int>*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(a2);
  v8 = std::__copy_move_a<false,std::pair<char,int> const*,std::pair<char,int>*>(v6, v5, v4);
  __gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::__normal_iterator(
    a1,
    (int)&v8);
  return a1;
}

//----- (0804C650) --------------------------------------------------------
void std::_Destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>()
{
  std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>();
}

//----- (0804C66A) --------------------------------------------------------
int __cdecl std::__copy_move_a2<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<std::pair<char,int> *>(a3);
  v4 = std::__niter_base<std::pair<char,int> *>(a2);
  v5 = std::__niter_base<std::pair<char,int> *>(a1);
  return std::__copy_move_a<false,std::pair<char,int> *,std::pair<char,int> *>(v5, v4, v3);
}

//----- (0804C6AE) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::max_size()
{
  return __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size();
}

//----- (0804C6C2) --------------------------------------------------------
int __cdecl std::_Vector_base<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804C6CA) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::max_size()
{
  return 357913941;
}

//----- (0804C6D4) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(
           a1,
           a2,
           a3);
}

//----- (0804C6F6) --------------------------------------------------------
void __gnu_cxx::new_allocator<int>::new_allocator()
{
  ;
}

//----- (0804C6FB) --------------------------------------------------------
int __cdecl std::_Iter_base<int *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804C703) --------------------------------------------------------
int __cdecl std::__niter_base<int *>(int a1)
{
  return std::_Iter_base<int *,false>::_S_base(a1);
}

//----- (0804C716) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,int *,int *>(void *src, int a2, int a3)
{
  return std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(src, a2, a3);
}

//----- (0804C73B) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<int>>::max_size()
{
  return __gnu_cxx::new_allocator<int>::max_size();
}

//----- (0804C74E) --------------------------------------------------------
int __cdecl std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804C756) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<int>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804C760) --------------------------------------------------------
char *__cdecl std::uninitialized_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(a1, a2, a3);
}

//----- (0804C781) --------------------------------------------------------
char __cdecl std::make_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  char result; // al@1
  int i; // [sp+10h] [bp-18h]@2
  char v4; // [sp+14h] [bp-14h]@3
  int v5; // [sp+18h] [bp-10h]@3
  int v6; // [sp+1Ch] [bp-Ch]@2

  result = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1) <= 1;
  if ( !result )
  {
    v6 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
    for ( i = (v6 - 2) / 2; ; --i )
    {
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v4, (int)&a1, (int)&i);
      v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v4);
      std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
        a1,
        i,
        v6,
        v5);
      result = i;
      if ( !i )
        break;
    }
  }
  return result;
}

//----- (0804C837) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator<<int *,std::vector<int,std::allocator<int>>>(int a1, int a2)
{
  unsigned int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a1);
  return v2 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base(a2);
}

//----- (0804C863) --------------------------------------------------------
int __cdecl std::__pop_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2, char a3)
{
  int v3; // ST1C_4@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
  v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a3);
  *(_DWORD *)v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  v5 = __gnu_cxx::operator-<int *,std::vector<int,std::allocator<int>>>((int)&a2, (int)&a1);
  return std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
           a1,
           0,
           v5,
           v3);
}

//----- (0804C8CC) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator--(int a1)
{
  *(_DWORD *)a1 -= 4;
  return a1;
}

//----- (0804C8E1) --------------------------------------------------------
int __cdecl std::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  return std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(
           a1,
           a2);
}

//----- (0804C8FB) --------------------------------------------------------
int __userpurge std::__miter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, int a2)
{
  std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base(a1, a2);
  return a1;
}

//----- (0804C91D) --------------------------------------------------------
int __userpurge std::__copy_move_backward_a2<false,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>@<eax>(int a1, char a2, char a3, char a4)
{
  int v4; // esi@1
  int v5; // ebx@1
  int v6; // eax@1
  int v8; // [sp+1Ch] [bp-Ch]@1

  v4 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a4);
  v5 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a3);
  v6 = std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(a2);
  v8 = std::__copy_move_backward_a<false,int *,int *>((void *)v6, v5, v4);
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::__normal_iterator(a1, (int)&v8);
  return a1;
}

//----- (0804C97B) --------------------------------------------------------
int __cdecl std::uninitialized_copy<std::string *,std::string *>(std::string *a1, int a2, int a3)
{
  return std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(a1, a2, a3);
}

//----- (0804C99C) --------------------------------------------------------
int __cdecl std::_Iter_base<std::string *,false>::_S_base(int a1)
{
  return a1;
}

//----- (0804C9A4) --------------------------------------------------------
int __cdecl std::__copy_move_backward_a<false,std::string *,std::string *>(int a1, int a2, int a3)
{
  return std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(
           a1,
           a2,
           a3);
}

//----- (0804C9C9) --------------------------------------------------------
std::string *__cdecl std::__uninitialized_fill_n<false>::__uninit_fill_n<std::string *,unsigned int,std::string>(int a1, int a2, std::string *a3)
{
  std::string *result; // eax@1
  int v4; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  result = (std::string *)a1;
  v5 = a1;
  while ( a2 )
  {
    v4 = std::__addressof<std::string>(v5);
    result = std::_Construct<std::string,std::string>((void *)v4, a3);
    --a2;
    v5 += 4;
  }
  return result;
}

//----- (0804CA37) --------------------------------------------------------
signed int __gnu_cxx::__alloc_traits<std::allocator<std::string>>::max_size()
{
  return __gnu_cxx::new_allocator<std::string>::max_size();
}

//----- (0804CA4A) --------------------------------------------------------
int __cdecl std::_Vector_base<std::string,std::allocator<std::string>>::_M_get_Tp_allocator(int a1)
{
  return a1;
}

//----- (0804CA52) --------------------------------------------------------
signed int __gnu_cxx::new_allocator<std::string>::max_size()
{
  return 0x3FFFFFFF;
}

//----- (0804CA5C) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // edx@2
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - a1) >> 3; i > 0; --i )
  {
    a3 -= 8;
    a2 -= 8;
    v3 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_DWORD *)(a3 + 4) = v3;
  }
  return a3;
}

//----- (0804CA9A) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::pair<char,int>>(v5);
    std::_Construct<std::pair<char,int>,std::pair<char,int>>((void *)v3, a1);
    a1 += 8;
    v5 += 8;
  }
  return v5;
}

//----- (0804CAD8) --------------------------------------------------------
void std::allocator<std::pair<char,int>>::allocator()
{
  __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator();
}

//----- (0804CAF2) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,std::pair<char,int>*>(char a1, char a2, int a3)
{
  int v3; // ebx@2
  int v4; // eax@2
  int v6; // [sp+1Ch] [bp-Ch]@1

  v6 = a3;
  while ( __gnu_cxx::operator!=<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
            (int)&a1,
            (int)&a2) )
  {
    v3 = __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*((int)&a1);
    v4 = std::__addressof<std::pair<char,int>>(v6);
    std::_Construct<std::pair<char,int>,std::pair<char,int>>((void *)v4, v3);
    __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator++((int)&a1);
    v6 += 8;
  }
  return v6;
}

//----- (0804CB85) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = -1431655765 * ((a2 - a1) >> 2); i > 0; --i )
  {
    a2 -= 12;
    a3 -= 12;
    std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::operator=(a3, a2);
  }
  return a3;
}

//----- (0804CBE7) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804CBF9) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,true>::_S_base(a1);
}

//----- (0804CC0C) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,true>::_S_base(a1);
}

//----- (0804CC1F) --------------------------------------------------------
int __cdecl std::__copy_move_a<false,std::pair<char,int> const*,std::pair<char,int>*>(int a1, int a2, int a3)
{
  return std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::pair<char,int> const*,std::pair<char,int>*>(
           a1,
           a2,
           a3);
}

//----- (0804CC44) --------------------------------------------------------
void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>>()
{
  ;
}

//----- (0804CC49) --------------------------------------------------------
int __cdecl std::__copy_move_a<false,std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  return std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::pair<char,int> *,std::pair<char,int> *>(
           a1,
           a2,
           a3);
}

//----- (0804CC6E) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>> *>(int a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != a2 )
  {
    v3 = std::__addressof<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(v5);
    std::_Construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(
      (void *)v3,
      a1);
    a1 += 12;
    v5 += 12;
  }
  return v5;
}

//----- (0804CCE2) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,true,std::random_access_iterator_tag>::__copy_move_b<int>(void *src, int a2, int a3)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove((void *)(-4 * v4 + a3), src, 4 * v4);
  return -4 * v4 + a3;
}

//----- (0804CD37) --------------------------------------------------------
char *__cdecl std::__uninitialized_copy<true>::__uninit_copy<int *,int *>(int a1, int a2, int a3)
{
  return std::copy<int *,int *>(a1, a2, a3);
}

//----- (0804CD58) --------------------------------------------------------
int __cdecl std::__adjust_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4)
{
  int v4; // ebx@2
  int v5; // ebx@4
  int v6; // ebx@8
  int i; // [sp+18h] [bp-40h]@1
  char v9; // [sp+1Ch] [bp-3Ch]@2
  char v10; // [sp+20h] [bp-38h]@2
  int v11; // [sp+24h] [bp-34h]@2
  char v12; // [sp+28h] [bp-30h]@4
  char v13; // [sp+2Ch] [bp-2Ch]@4
  char v14; // [sp+30h] [bp-28h]@8
  char v15; // [sp+34h] [bp-24h]@8
  int v16; // [sp+38h] [bp-20h]@8
  int v17; // [sp+3Ch] [bp-1Ch]@1

  v17 = a2;
  for ( i = a2; (a3 - 1) / 2 > i; a2 = i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v9, (int)&a1, (int)&i);
    v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
    v11 = i - 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a1, (int)&v11);
    if ( v4 < *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10) )
      --i;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v12, (int)&a1, (int)&a2);
    v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v12);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v13, (int)&a1, (int)&i);
    *(_DWORD *)v5 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v13);
  }
  if ( !(a3 & 1) && (a3 - 2) / 2 == i )
  {
    i = 2 * (i + 1);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v14, (int)&a1, (int)&a2);
    v6 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v14);
    v16 = i - 1;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v15, (int)&a1, (int)&v16);
    *(_DWORD *)v6 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v15);
    a2 = i - 1;
  }
  return std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(
           a1,
           a2,
           v17,
           a4);
}

//----- (0804CF11) --------------------------------------------------------
int __cdecl std::__iter_swap<true>::iter_swap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1, char a2)
{
  int v2; // ebx@1
  int v3; // eax@1

  v2 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a2);
  v3 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&a1);
  return std::swap<int>(v3, v2);
}

//----- (0804CF42) --------------------------------------------------------
int __userpurge std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,false>::_S_base@<eax>(int a1, int a2)
{
  *(_DWORD *)a1 = a2;
  return a1;
}

//----- (0804CF54) --------------------------------------------------------
int __cdecl std::__niter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>>(char a1)
{
  return std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(a1);
}

//----- (0804CF67) --------------------------------------------------------
int __cdecl std::__uninitialized_copy<false>::__uninit_copy<std::string *,std::string *>(std::string *a1, int a2, int a3)
{
  int v3; // eax@2
  int v5; // [sp+1Ch] [bp-Ch]@1

  v5 = a3;
  while ( a1 != (std::string *)a2 )
  {
    v3 = std::__addressof<std::string>(v5);
    std::_Construct<std::string,std::string>((void *)v3, a1);
    a1 = (std::string *)((char *)a1 + 4);
    v5 += 4;
  }
  return v5;
}

//----- (0804CFDB) --------------------------------------------------------
int __cdecl std::__copy_move_backward<false,false,std::random_access_iterator_tag>::__copy_move_b<std::string *,std::string *>(int a1, int a2, int a3)
{
  int i; // [sp+1Ch] [bp-Ch]@1

  for ( i = (a2 - a1) >> 2; i > 0; --i )
  {
    a2 -= 4;
    a3 -= 4;
    std::string::operator=(a3, a2);
  }
  return a3;
}
// 8048A90: using guessed type int __cdecl std::string::operator=(_DWORD, _DWORD);

//----- (0804D01B) --------------------------------------------------------
std::string *__cdecl std::_Construct<std::string,std::string>(void *a1, std::string *a2)
{
  std::string *result; // eax@1

  result = (std::string *)operator new(4u, a1);
  if ( result )
    result = (std::string *)std::string::string(result, a2);
  return result;
}

//----- (0804D070) --------------------------------------------------------
int __cdecl std::__addressof<std::pair<char,int>>(int a1)
{
  return a1;
}

//----- (0804D078) --------------------------------------------------------
void *__cdecl std::_Construct<std::pair<char,int>,std::pair<char,int>>(void *a1, int a2)
{
  void *result; // eax@1
  void *v3; // ecx@1
  int v4; // edx@2

  result = operator new(8u, a1);
  v3 = result;
  if ( result )
  {
    v4 = *(_DWORD *)(a2 + 4);
    result = *(void **)a2;
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *((_DWORD *)v3 + 1) = v4;
  }
  return result;
}

//----- (0804D0A6) --------------------------------------------------------
void __gnu_cxx::new_allocator<std::pair<char,int>>::new_allocator()
{
  ;
}

//----- (0804D0AB) --------------------------------------------------------
bool __cdecl __gnu_cxx::operator!=<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(int a1, int a2)
{
  int v2; // ebx@1

  v2 = *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a1);
  return v2 != *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(a2);
}

//----- (0804D0D8) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator++(int a1)
{
  *(_DWORD *)a1 += 8;
  return a1;
}

//----- (0804D0EE) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::operator*(int a1)
{
  return *(_DWORD *)a1;
}

//----- (0804D0F8) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a1);
}

//----- (0804D10D) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<std::pair<char,int> *,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base((int)&a1);
}

//----- (0804D122) --------------------------------------------------------
int __cdecl std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::pair<char,int> const*,std::pair<char,int>*>(int a1, int a2, int a3)
{
  int v3; // edx@2
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - a1) >> 3; i > 0; --i )
  {
    v3 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a1;
    *(_DWORD *)(a3 + 4) = v3;
    a1 += 8;
    a3 += 8;
  }
  return a3;
}

//----- (0804D160) --------------------------------------------------------
int __cdecl std::__copy_move<false,false,std::random_access_iterator_tag>::__copy_m<std::pair<char,int> *,std::pair<char,int> *>(int a1, int a2, int a3)
{
  int v3; // edx@2
  int i; // [sp+Ch] [bp-4h]@1

  for ( i = (a2 - a1) >> 3; i > 0; --i )
  {
    v3 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a1;
    *(_DWORD *)(a3 + 4) = v3;
    a1 += 8;
    a3 += 8;
  }
  return a3;
}

//----- (0804D19E) --------------------------------------------------------
void *__cdecl std::_Construct<std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>(void *a1, int a2)
{
  void *result; // eax@1

  result = operator new(0xCu, a1);
  if ( result )
    result = (void *)std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>::vector((int)result, a2);
  return result;
}

//----- (0804D1F3) --------------------------------------------------------
char *__cdecl std::copy<int *,int *>(int a1, int a2, int a3)
{
  int v3; // ebx@1
  int v4; // eax@1

  v3 = std::__miter_base<int *>(a2);
  v4 = std::__miter_base<int *>(a1);
  return std::__copy_move_a2<false,int *,int *>(v4, v3, a3);
}

//----- (0804D22B) --------------------------------------------------------
int __cdecl std::__push_heap<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,int,int>(char a1, int a2, int a3, int a4)
{
  int v4; // ebx@2
  int v5; // eax@4
  bool v6; // al@5
  int result; // eax@8
  int i; // [sp+1Ch] [bp-2Ch]@1
  char v9; // [sp+20h] [bp-28h]@2
  char v10; // [sp+24h] [bp-24h]@2
  char v11; // [sp+28h] [bp-20h]@4
  char v12; // [sp+2Ch] [bp-1Ch]@8

  for ( i = (a2 - 1) / 2; ; i = (i - 1) / 2 )
  {
    v6 = 0;
    if ( a2 > a3 )
    {
      __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v11, (int)&a1, (int)&i);
      v5 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v11);
      if ( *(_DWORD *)v5 < a4 )
        v6 = 1;
    }
    if ( !v6 )
      break;
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v9, (int)&a1, (int)&a2);
    v4 = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v9);
    __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v10, (int)&a1, (int)&i);
    *(_DWORD *)v4 = *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v10);
    a2 = i;
  }
  __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator+((int)&v12, (int)&a1, (int)&a2);
  result = __gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::operator*((int)&v12);
  *(_DWORD *)result = a4;
  return result;
}

//----- (0804D32E) --------------------------------------------------------
int __cdecl std::swap<int>(int a1, int a2)
{
  int v2; // ST0C_4@1
  int result; // eax@1

  v2 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = a2;
  *(_DWORD *)a2 = v2;
  return result;
}

//----- (0804D350) --------------------------------------------------------
int __cdecl std::_Iter_base<__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>,true>::_S_base(char a1)
{
  return *(_DWORD *)__gnu_cxx::__normal_iterator<int *,std::vector<int,std::allocator<int>>>::base((int)&a1);
}

//----- (0804D366) --------------------------------------------------------
int __cdecl __gnu_cxx::__normal_iterator<std::pair<char,int> const*,std::vector<std::pair<char,int>,std::allocator<std::pair<char,int>>>>::base(int a1)
{
  return a1;
}

//----- (0804D36E) --------------------------------------------------------
char *__cdecl std::__copy_move_a2<false,int *,int *>(int a1, int a2, int a3)
{
  int v3; // esi@1
  int v4; // ebx@1
  int v5; // eax@1

  v3 = std::__niter_base<int *>(a3);
  v4 = std::__niter_base<int *>(a2);
  v5 = std::__niter_base<int *>(a1);
  return std::__copy_move_a<false,int *,int *>((void *)v5, v4, (void *)v3);
}

//----- (0804D3B2) --------------------------------------------------------
char *__cdecl std::__copy_move_a<false,int *,int *>(void *src, int a2, void *dest)
{
  return std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(src, a2, dest);
}

//----- (0804D3D7) --------------------------------------------------------
char *__cdecl std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>(void *src, int a2, void *dest)
{
  int v4; // [sp+1Ch] [bp-Ch]@1

  v4 = (a2 - (signed int)src) >> 2;
  if ( v4 )
    memmove(dest, src, 4 * v4);
  return (char *)dest + 4 * v4;
}

//----- (0804D420) --------------------------------------------------------
void _libc_csu_fini()
{
  ;
}

//----- (0804D430) --------------------------------------------------------
void __cdecl _libc_csu_init()
{
  init_proc();
}

//----- (0804D48A) --------------------------------------------------------
void _i686_get_pc_thunk_bx()
{
  ;
}

//----- (0804D490) --------------------------------------------------------
int __fastcall _do_global_ctors_aux(int a1, int a2)
{
  int (**v2)(); // ebx@1
  void (__cdecl *v3)(); // eax@1
  int v5; // [sp-4h] [bp-8h]@1

  v5 = a2;
  v2 = &off_8051788;
  v3 = (void (__cdecl *)())off_8051788;
  if ( off_8051788 != (int (*)())-1 )
  {
    do
    {
      --v2;
      v3();
      v3 = (void (__cdecl *)())*v2;
    }
    while ( *v2 != (int (*)())-1 );
  }
  return v5;
}
// 8051788: using guessed type int (*off_8051788)();

//----- (0804D4B8) --------------------------------------------------------
void term_proc()
{
  _do_global_dtors_aux();
}

#error "There were 1 decompilation failure(s) on 297 function(s)"
